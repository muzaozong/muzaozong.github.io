<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木枣粽子 | BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.cayun.me/"/>
  <updated>2019-12-20T11:17:28.192Z</updated>
  <id>https://www.cayun.me/</id>
  
  <author>
    <name>木枣粽子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring WebFlux简介</title>
    <link href="https://www.cayun.me/spring/Spring%20Webflux%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.cayun.me/spring/Spring%20Webflux%E7%AE%80%E4%BB%8B/</id>
    <published>2019-12-10T06:36:00.000Z</published>
    <updated>2019-12-20T11:17:28.192Z</updated>
    
    <content type="html"><![CDATA[<p>近期对高并发的非阻塞式的web框架非常感兴趣，研究vert.x一直迟迟没有太多进展，恰巧发现spring家族里面也有一款相对应的框架Spring WebFlux，于是花了点时间看了一下，感觉还是比较容易上手的，于是此处做一个简单的关于Spring WebFlux的介绍。</p><p>首先，在开始之前，先提一下个人关于Java异步非阻塞框架的两个疑惑:</p><ol><li>异步非阻塞的web框架是如何支持数据库操作的，因为平时主流的数据库驱动都是同步阻塞的，例如jdbc？</li><li>如果Java的官方协程Loom出来之后，那我们前期有尝鲜使用的基础吗，即社区支持度怎么样？</li></ol><p><code>建议在看此文之前先了解一下NIO或着协程</code></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简单地说，Spring WebFlux就是一个web服务器，为了可以更容易地理解，我们可以把它想象成另一种运行方式的SpringMVC。他们实现的功能几乎是一致的，就是实现了一个web服务器。但是他们的运行方式、实现原理、编码方式却是完全不同的。</p><h2 id="webFlux与SpringMVC的简单比较"><a href="#webFlux与SpringMVC的简单比较" class="headerlink" title="webFlux与SpringMVC的简单比较"></a>webFlux与SpringMVC的简单比较</h2><p>先来说说SpringMVC吧，SpringMVC的架构是基于Servlet的，并且使用同步阻塞IO的方式来运行的，大概如下图所示，每个请求均对应一个线程进行处理，也就是说有多少请求，就会产生多少线程（可以配置上限）。</p><p><img alt="image-20191210215141129" data-src="https://img.cayun.me/2019-12-10-135141.png" class="lazyload"></p><p>而WebFlux则采用的非阻塞IO的方式来进行处理，一般情况下，处理线程数量和core的核数保持一致，与请求数量无关，且IO不会产生线程阻塞。</p><p><img alt="image-20191210220420437" data-src="https://img.cayun.me/2019-12-10-140421.png" class="lazyload"></p><p>我们再从官网看一下两者之间的比较，</p><p><img alt="image-20191210224805635" data-src="https://img.cayun.me/2019-12-10-144806.png" class="lazyload"></p><p>从官网的对比信息，我们可以看到两者有两点核心不同:</p><ol><li>两者的运行容器不同，WebFlux是运行在netty或者servlet3.1+的容器中的，而springMVC则是运行在servlet容器中的。</li><li>两者底层交互的数据库是不同的，WebFlux只支持那些支持响应式调用的数据库，而springMVC则支持同步阻塞方式调用的数据库。</li></ol><p>本段说点题外话。众所周知，在Java中，很核心且很常用的jdbc是同步阻塞的，我曾经一直有这样一个疑问: <strong>现有的Java的NIO web框架是如何在数据库这一层做到异步非阻塞的呢？</strong>为了这个问题，我也尝试着做了一些简单的调查，发现了vert.x这个框架，这个框架通过自己实现一个新的jdbc客户端来支持了jdbc的异步非阻塞。而后我发现了WebFlux这个框架，可以从上图中发现，WebFlux的解法更加简单粗暴，WebFlux干脆直接不支持jdbc，不过想想也不失为一种解法，很多时候，老项目我们也不会考虑换成WebFlux，而新项目的选择权则相对会比较多，我们很多时候没必要特别拘泥于使用jdbc协议的数据库（至少个人项目可以这样）。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>从官方文档中，我对Spring WebFlux的定义做了一个简单的总结（仅代表个人观点，如有错误请指出）: </p><blockquote><p> Spring WebFlux是基于响应式流(Reactive Streams)API并运行在非阻塞服务器上的一个完全无阻塞、支持响应式背压的响应式web框架。</p></blockquote><h2 id="使用基础"><a href="#使用基础" class="headerlink" title="使用基础"></a>使用基础</h2><ol><li>首先Spring WebFlux是spring5.0之后才出现的，也就是说如果我们想使用WebFlux，我们得先使用spring5</li><li>由于WebFlux是基于NIO方式的，所以必须运行在非阻塞服务器上，目前官方支持netty、undertow以及Servlet3.1+的容器，默认情况下使用netty</li><li>WebFlux的响应式库默认使用的是Reactor，当然也可以自行选择RxJava</li><li>WebFlux同时支持Java和Kotlin</li></ol><h1 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h1><p>看到Spring WebFlux的定义，说实话，我是有点懵逼的，又是响应式流API，又是响应式背压，…，总而言之，都是一坨玄而又玄的概念。那么我们就从这个玄乎的概念入手。</p><h2 id="1-响应式编程"><a href="#1-响应式编程" class="headerlink" title="1. 响应式编程"></a>1. 响应式编程</h2><p>在上面的定义中，我们看到了一个全新的概念，叫做响应式编程，那么何为响应式编程呢？<strong>响应式编程是一种面向数据流和变化传播的编程范式</strong>。</p><p>响应式编程有如下几点特点:</p><ol><li>变化传递。假设定义了 a = b + 1 ，那么b的任何变化都会引起a的变化。例如响应式前端框架，当宽度变化时，页面布局就会相应变化。</li><li>基于数据流。在响应式编程中分为生产者和订阅者，生产者负责生产数据/事件，订阅者负责处理数据/事件，这些数据/事件在响应式编程中会通过数据流的形式发出。</li><li>声明式。我们事先声明好对数据流的处理流程，那么当数据流过来时，就会按照声明好的处理流程逐个处理。</li></ol><p>这种编程范式到底可以给我们带来怎样的好处呢？</p><p>想象一个性能监控系统，在前端部分，我们不再主动地去服务端拉取数据，而是由服务端源源不断地将数据推送过来，从而可以实时显示性能监控数据(变化图)，而我们唯一需要做的只是搭建一条能够传递变化的管道而已。</p><h2 id="2-响应式背压"><a href="#2-响应式背压" class="headerlink" title="2. 响应式背压"></a>2. 响应式背压</h2><blockquote><p>背压(Backpressure) 并不是响应式编程所独有的；其次，背压并不是一种「机制」，也不是一种「策略」。背压其实是一种现象：<strong>在数据流从上游生产者向下游消费者传输的过程中，上游生产速度大于下游消费速度，导致下游的 Buffer 溢出，这种现象就叫做 背压 出现。</strong></p><p>总结：背压 指的是在 Buffer 有上限的系统中，Buffer 溢出的现象；它的应对措施只有一个：丢弃新事件。</p><p>作者：扔物线<br>链接：<a href="https://www.zhihu.com/question/49618581/answer/237078934" target="_blank" rel="noopener">https://www.zhihu.com/question/49618581/answer/237078934</a></p></blockquote><h2 id="3-响应式流-Reactive-Streams"><a href="#3-响应式流-Reactive-Streams" class="headerlink" title="3. 响应式流(Reactive Streams)"></a>3. 响应式流(Reactive Streams)</h2><p>我们接下来再看一看另一个概念叫做响应式流(Reactive Streams)，那么何为响应式流呢？看一下官方的定义:</p><blockquote><p>响应式流是一个倡议，用来为具有非阻塞背压的异步流处理提供一个标准。</p></blockquote><p><small>具体的规范可以详见<a href="http://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a>和<a href="https://github.com/reactive-streams/reactive-streams-jvm" target="_blank" rel="noopener">reactive-streams-jvm</a></small></p><p>实现响应式流的库必须满足如下条件:</p><ul><li>具有处理无限数量的元素的能力</li><li>按序执行</li><li>组件之间异步传递元素</li><li>必须实现非阻塞背压</li></ul><p>响应式流提供了一个API规范以及测试套件。API规范如下，</p><h3 id="API组成"><a href="#API组成" class="headerlink" title="API组成"></a>API组成</h3><p>响应式流API由以下几个部分组成，第三方库必须要实现这几个接口，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 生产者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; s)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 订阅者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 订阅</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> * 处理者</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;, <span class="title">Publisher</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>一个典型的生产者与订阅者的交互场景如下:</p><p><img alt="image-20191220190558136" data-src="https://img.cayun.me/2019-12-20-110558.png" class="lazyload"></p><p><strong>那么这个时候就有同学要问了，这怎么感觉还是拉的方式，不是推的方式呀？订阅者请求n个数据，生产者返回n个数据，这和普通的拉有什么区别呢？</strong></p><p>那么，如果你也这样问的话，这里就是你想法太局限，这只是你觉得。事实上，从来没有人跟你说过当订阅者要n个数据之后，生产者要立即返回n个数据给你。生产者可能当时本身没有n个数据，但是他在5分钟后有数据了，他只是知道了你需要接受n个数据，于是所有n个数据可能是在5分钟后才完全给你的。</p><h3 id="Java中具体实现库"><a href="#Java中具体实现库" class="headerlink" title="Java中具体实现库"></a>Java中具体实现库</h3><p>在Java9中，java.util.concurrent.Flow这个类定义了响应式流API，并且提供了SubmissionPublisher 和 ConsumerSubscriber 这两个默认实现。除此以外，还有一些实现了响应式流规范的Java库，例如RxJava和Reactor。</p><h2 id="4-Reactor"><a href="#4-Reactor" class="headerlink" title="4. Reactor"></a>4. Reactor</h2><p>Reactor是一个响应式编程库，与Spring是兄弟项目，WebFlux框架就是使用Reactor作为其内置的响应式支持。</p><p>在Reactor中的Publisher是由Flux和Mono两个类定义的，Flux用来操作0..N个元素的数据序列，而Mono用来操作0..1个元素的数据序列。映射关系举例如下: String对应Mono&lt;String&gt;，List&lt;String&gt;对应Flux&lt;String&gt; 。</p><h3 id="Reactor的简单使用"><a href="#Reactor的简单使用" class="headerlink" title="Reactor的简单使用"></a>Reactor的简单使用</h3><p>Flux和Mono提供了多种创建数据流的方法，其中just是一种比较直接的声明数据流的方式，其参数就是数据序列，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Mono.just(<span class="number">1</span>);</span></pre></td></tr></table></figure><p>但是光是有数据流还不够，我们还需要有订阅者，我们接下来将上面的所有数据全部都打印出来，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>).subscribe(System.out::println);</span></pre></td></tr></table></figure><p>甚至我们可以按照响应式流API的方式来实现一个控制流量速度的订阅者，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> Subscription subscription = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.subscription = subscription;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    System.out.println(simpleDateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">": "</span> + integer);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      Thread.sleep(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    System.out.println(<span class="string">"Complete!"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><p>执行结果如下，每秒输出一个数字，</p><p><img alt="image-20191212180256565" data-src="https://img.cayun.me/2019-12-12-100257.png" class="lazyload"></p><h1 id="WebFlux的简单使用"><a href="#WebFlux的简单使用" class="headerlink" title="WebFlux的简单使用"></a>WebFlux的简单使用</h1><p>上面讲了一坨虚的，那么下面来点实在的，我们来看一下WebFlux如何使用？</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>web部分，WebFlux的编程模型分为两种: 一种是通过带注解的Controller的方式，另一种是通过函数式端点的方式。接下来这两种方式我都来简单介绍一下吧。</p><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>对于过去使用过springMVC的同学而言，这种方式并不陌生，spring全家桶的使用过程中注解随处可见，方便简单易用。那么对于WebFlux也是一样，WebFlux也同样支持注解的方式，而且WebFlux与springMVC的注解几乎是一模一样的。两者最主要的区别在于底层协议不同，WebFlux是基于响应式的<code>ServerHttpRequest</code>和<code>ServerHttpResponse</code>，而SpringMVC是基于<code>HttpServletRequest</code>和<code>HttpServletResponse</code>。</p><p>官方的样例如下,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PersonRepository repository;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PersonController</span><span class="params">(PersonRepository repository)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.repository = repository;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/person"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">create</span><span class="params">(@RequestBody Publisher&lt;Person&gt; personStream)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.repository.save(personStream).then();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/person"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;Person&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.repository.findAll();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/person/&#123;id&#125;"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="function">Mono&lt;Person&gt; <span class="title">findById</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.repository.findOne(id);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>我们可以自己写一个简单的例子来比较一下同步阻塞的方式与异步非阻塞的方式的区别,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/sync/hello"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">syncHello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        logger.info(<span class="string">"syncHello start"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        Thread.sleep(<span class="number">3000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        String result = <span class="string">"world"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        logger.info(<span class="string">"syncHello end"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/async/hello"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        logger.info(<span class="string">"asyncHello start"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Mono&lt;String&gt; result = Mono.delay(Duration.ofSeconds(<span class="number">3</span>)).thenReturn(<span class="string">"world"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        logger.info(<span class="string">"asyncHello end"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img alt="image-20191211233030647" data-src="https://img.cayun.me/2019-12-11-153030.png" class="lazyload"></p><p><img alt="image-20191211232623385" data-src="https://img.cayun.me/2019-12-11-152624.png" class="lazyload"></p><p>从执行结果中我们可以两者在请求结果上是一致的，都是等待了3秒得到了结果。但是从日志中，我们可以发现两者的运行方式是完全不同的，其中同步阻塞的同步等待了3秒，而异步阻塞的方式则直接return了。</p><h3 id="函数式端点方式"><a href="#函数式端点方式" class="headerlink" title="函数式端点方式"></a>函数式端点方式</h3><p>这种方式在很多web框架中也极为常见，例如vert.x。下面写了一个简单的例子来说明函数式端点的方式的编码方式（基于spring-boot-starter-webflux2.2.2版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndPointApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        UserHandler userHandler = <span class="keyword">new</span> UserHandler();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        RouterFunction&lt;ServerResponse&gt; router = route()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                .GET(<span class="string">"/user/hello"</span>, accept(APPLICATION_JSON), request -&gt; userHandler.hello())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                .GET(<span class="string">"/user/goodbye"</span>, accept(APPLICATION_JSON), request -&gt; userHandler.goodbye())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                .GET(<span class="string">"/user/always"</span>, accept(APPLICATION_JSON), request -&gt; userHandler.always())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                .build();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        HttpHandler httpHandler = RouterFunctions.toHttpHandler(router);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        ReactorHttpHandlerAdapter adapter = <span class="keyword">new</span> ReactorHttpHandlerAdapter(httpHandler);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        HttpServer.create().host(<span class="string">"0.0.0.0"</span>).port(<span class="number">9090</span>).handle(adapter).bind().block();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            lock.wait();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">hello</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(APPLICATION_JSON).bodyValue(<span class="string">"world"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">goodbye</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(APPLICATION_JSON).bodyValue(<span class="string">"Bye bye."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">always</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(TEXT_EVENT_STREAM)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                .body(Flux.interval(Duration.ofSeconds(<span class="number">1</span>)).map(l -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date())), String<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img alt="image-20191212011159469" data-src="https://img.cayun.me/2019-12-11-171200.png" class="lazyload"></p><h3 id="注解-VS-函数式端点"><a href="#注解-VS-函数式端点" class="headerlink" title="注解 VS 函数式端点"></a>注解 VS 函数式端点</h3><p>相对而言，注解的方式似乎更容易编码，也更具备易读性。但是事实上函数式端点的方式也并不是一无是处，函数式端点的方式更加地轻量级。另一个比较重要的优点就是，函数式端点的方式中，应用程序负责从头到尾的请求处理，开发者对应用程序的掌控力会更强。</p><h2 id="webclient"><a href="#webclient" class="headerlink" title="webclient"></a>webclient</h2><p>此处不做详解，简单贴一个示例，具体的可以自行翻阅官方文档，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebClientApplication</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        WebClient client = WebClient.create(<span class="string">"http://www.baidu.com"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Mono&lt;String&gt; result = client.get().uri(<span class="string">"/"</span>).retrieve().bodyToMono(String<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        System.out.println(result.block());   <span class="comment">// 为了方便起见，我这边直接使用block来获取数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="springMVC与spring-WebFlux的性能对比"><a href="#springMVC与spring-WebFlux的性能对比" class="headerlink" title="springMVC与spring WebFlux的性能对比"></a>springMVC与spring WebFlux的性能对比</h1><p>之前有在网上看到不少博主进行两者的性能对比时，往往在测试springMVC的时候会将并发数设置的大于tomcat的处理线程数，从而得出webFlux在高并发下远优于springMVC的结论，私以为这样的测试结果是不公平的，且很大程度上不合理的。(此处不去讨论其不合理性，接下来仅按照个人的想法来进行测试对比)</p><p>考虑到我们平时业务代码多以IO密集型的场景为主，且IO密集型的应用也更能得出我们想要的测试结果，因此此处我们的对比场景就是IO密集型场景。</p><p>分别贴上两边的代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// springMVC</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/redisTest"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redisTest</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> x = count.getAndIncrement() % <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        String result = redisTemplate.opsForValue().get(String.valueOf(x));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"redis:"</span> + result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">"empty:"</span> + (x * x * x / <span class="number">3</span> * x / <span class="number">3</span> * (x + <span class="number">3</span>) / <span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// spring WebFlux</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> ReactiveStringRedisTemplate redisTemplate;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/redisTest"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">redisTest</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> x = count.getAndIncrement() % <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(String.valueOf(x))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                .map(s -&gt; <span class="string">"redis:"</span> + s)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                .switchIfEmpty(Mono.just(<span class="string">"empty:"</span> + (x * x * x / <span class="number">3</span> * x / <span class="number">3</span> * (x + <span class="number">3</span>) / <span class="number">3</span>)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>Redis中的数据如下:</p><p><img alt="image-20191220010118214" data-src="https://img.cayun.me/2019-12-19-170118.png" class="lazyload"></p><p>压测命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">wrk -t4 -c1000 -d120s http://localhost:8080/redisTest</span></pre></td></tr></table></figure><p>springMVC应用的tomcat的最大线程数设置为1000。</p><h2 id="springMVC"><a href="#springMVC" class="headerlink" title="springMVC"></a>springMVC</h2><p><img alt="image-20191220010943616" data-src="https://img.cayun.me/2019-12-19-170944.png" class="lazyload"></p><p><img alt="image-20191220010932232" data-src="https://img.cayun.me/2019-12-19-170932.png" class="lazyload"></p><h2 id="spring-WebFlux"><a href="#spring-WebFlux" class="headerlink" title="spring WebFlux"></a>spring WebFlux</h2><p><img alt="image-20191220011327255" data-src="https://img.cayun.me/2019-12-19-171327.png" class="lazyload"></p><p><img alt="image-20191220011313639" data-src="https://img.cayun.me/2019-12-19-171314.png" class="lazyload"></p><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><p>这次的压测其实比较简单，无法真实反映webFlux在真实生产/复杂业务上的表现，仅可以作为一定参考来使用。有一些与预期一致的地方，也有一些与预期不一致的地方，此处简单提一下。</p><p>与预期一致的地方:</p><ol><li>webFlux的吞吐率比springMVC要高</li><li>webFlux的延迟波动(标准差)比springMVC小</li></ol><p>与预期不一致的地方:</p><ol><li>webFlux的内存消耗貌似比springMVC要高（预期中webFlux的内存消耗要小一些）</li><li>webFlux的平均延迟比springMVC小很多（预期中两者延迟应该差不多）</li></ol><h1 id="springMVC与spring-WebFlux的比较与选择"><a href="#springMVC与spring-WebFlux的比较与选择" class="headerlink" title="springMVC与spring WebFlux的比较与选择"></a>springMVC与spring WebFlux的比较与选择</h1><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>不管三七二十一，先贴一张官方的对比图。</p><p><img alt="spring mvc and webflux venn" data-src="https://img.cayun.me/2019-12-11-173739.png" class="lazyload"></p><p>接下来说一下简单的个人对比吧，</p><table><thead><tr><th></th><th>springMVC</th><th>WebFlux</th></tr></thead><tbody><tr><td>编码</td><td>容易</td><td>困难</td></tr><tr><td>第三方Java库</td><td>丰富</td><td>有限</td></tr><tr><td>支持的数据库</td><td>丰富</td><td>有限</td></tr><tr><td>普及率</td><td>广</td><td>小</td></tr><tr><td>性能</td><td>差</td><td>优</td></tr></tbody></table><p>其实可以直截了当地说WebFlux的最大的好处就是在性能方面了，其他的地方相对而言都是比较薄弱的。其次就是新技术总是更能勾引人的兴趣吧（当然这个并不能算是优点）。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>接下来，同样的对官方的建议做一些总结和摘要吧，</p><ul><li>如果你的springMVC的应用跑得好好的，那没必要换成WebFlux。因为命令式编程更加容易编写、阅读以及调试，而且目前绝大多数Java库仍然是阻塞式的。</li><li>如果你依赖于一些阻塞式API（例如JPA、JDBC），那么springMVC往往是最好的选择。</li><li>可以在springMVC的应用中使用WebFlux的webclient模块。</li><li>如果有一个比较大的团队，却想要转响应式编程，则建议先从小处着手，例如先开始使用webclient。而且对于绝大多数情况，这种转换是没有必要的。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux" target="_blank" rel="noopener">Spring WebFlux文档</a></p><p>[2] <a href="https://www.cnblogs.com/yuanrw/p/10050509.html" target="_blank" rel="noopener">响应式编程系列（一）：什么是响应式编程？reactor入门</a></p><p>[3] <a href="https://www.zhihu.com/question/49618581" target="_blank" rel="noopener">如何形象的描述反应式编程中的背压(Backpressure)机制？</a></p><p>[4] <a href="https://blog.51cto.com/liukang/2090922" target="_blank" rel="noopener">照虎画猫深入理解响应式流规范——响应式Spring的道法术器</a></p><p>[5] <a href="https://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期对高并发的非阻塞式的web框架非常感兴趣，研究vert.x一直迟迟没有太多进展，恰巧发现spring家族里面也有一款相对应的框架Spring WebFlux，于是花了点时间看了一下，感觉还是比较容易上手的，于是此处做一个简单的关于Spring WebFlux的介绍。&lt;/
      
    
    </summary>
    
    
      <category term="spring" scheme="https://www.cayun.me/categories/spring/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="Spring WebFlux" scheme="https://www.cayun.me/tags/Spring-WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>双十一压测&amp;Java应用性能问题排查总结</title>
    <link href="https://www.cayun.me/java/%E5%8F%8C%E5%8D%81%E4%B8%80%E5%8E%8B%E6%B5%8B&amp;Java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://www.cayun.me/java/%E5%8F%8C%E5%8D%81%E4%B8%80%E5%8E%8B%E6%B5%8B&amp;Java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E6%80%BB%E7%BB%93/</id>
    <published>2019-11-07T08:40:00.000Z</published>
    <updated>2019-12-13T11:26:51.471Z</updated>
    
    <content type="html"><![CDATA[<p>连续参加了两年公司的双十一大促压测项目，遇到了很多问题，也成长了很多，于是在这里对大促压测做一份总结。以及记录一下大促压测过程中出现的一些常见的Java应用性能问题。</p><a id="more"></a><h1 id="一、为什么要压测"><a href="#一、为什么要压测" class="headerlink" title="一、为什么要压测"></a>一、为什么要压测</h1><ol><li>找出应用的性能瓶颈</li><li>探究应用的性能基准</li><li>给大促机器扩容提供参考依据</li></ol><h1 id="二、如何压测"><a href="#二、如何压测" class="headerlink" title="二、如何压测"></a>二、如何压测</h1><h2 id="关注哪些指标"><a href="#关注哪些指标" class="headerlink" title="关注哪些指标"></a>关注哪些指标</h2><p>吞吐率 TPS（每秒响应的请求数量）</p><p>响应时长 RT （一般情况下重点关注90%请求的响应时长，我们的大促标准一般是1s以内）</p><p>错误率   （看业务的可接受程度，我们的大促标准是不超过2%）</p><h2 id="压测工具"><a href="#压测工具" class="headerlink" title="压测工具"></a>压测工具</h2><p>现在有很多可以用来进行压测的工具，例如ab、jmeter、wrk等，此处主要介绍一下ab和jmeter。</p><h3 id="1-ab"><a href="#1-ab" class="headerlink" title="1. ab"></a>1. ab</h3><p>ab是一个命令行工具，使用起来非常简单，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># -c表示并发数，-n表示请求总数，其他一些参数可以查询手册/相关资料</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">ab -c 10 -n 200 https://www.baidu.com/</span></pre></td></tr></table></figure><p>命令执行完成后会得出一份压测结果报告，其中错误请求数、TPS和RT在下图中有标注</p><p><img alt="image-20191105160037216" data-src="https://img.cayun.me/2019-11-05-080037.png" class="lazyload"></p><h3 id="2-jmeter"><a href="#2-jmeter" class="headerlink" title="2. jmeter"></a>2. jmeter</h3><p>jmeter同时支持图形化界面和命令行方式，</p><h4 id="图形化方式"><a href="#图形化方式" class="headerlink" title="图形化方式"></a>图形化方式</h4><p>首先在”Test Plan”中添加一个”线程组”，里面可以设置并发数、压测时长等参数。</p><p>接下来需要在“线程组”中添加“HTTP请求取样器”，里面是设置HTTP请求的各项参数。</p><p>最后添加查看结果用的监听组件，我个人比较常用的有“查看结果树”、“聚合报告”和“TPS曲线图”（需要安装）。</p><p><img alt="image-20191105163923823" data-src="https://img.cayun.me/2019-11-05-083924.png" class="lazyload"></p><p>重点来看一下“聚合报告”，（一定要记得每次压测前都要清理一下数据才行[上方的”齿轮+2个扫把”图标]，不然回合之前的数据混合在一起）</p><p><img alt="image-20191105165259837" data-src="https://img.cayun.me/2019-11-05-085300.png" class="lazyload"></p><p>上面只是一些简单的介绍，事实上jmeter还支持很多复杂的压测场景: jdbc压测、dubbo压测、动态参数压测、自定义响应断言……这些可以自行网上搜索。</p><h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><p>命令行方式主要可以用来做一些自动化压测的任务。使用方式如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jmeter -n -t [jmx脚本] -l [压测请求结果文件] -e -o [压测报告文件夹(会生成一堆网页文件)]</span></pre></td></tr></table></figure><p>其中jmx脚本可以先通过jmeter图形化界面全部设置好了，然后保存一下就会生成对应的jmx脚本了。</p><h3 id="3-ab与jmeter的对比"><a href="#3-ab与jmeter的对比" class="headerlink" title="3.  ab与jmeter的对比"></a>3.  ab与jmeter的对比</h3><table><thead><tr><th>操作</th><th>ab</th><th>jmeter</th></tr></thead><tbody><tr><td>操作难度</td><td>简单</td><td>复杂</td></tr><tr><td>命令行</td><td>支持，操作简单</td><td>支持，操作稍微复杂一些</td></tr><tr><td>请求结果列表</td><td>无法显示</td><td>有详细请求列表</td></tr><tr><td>动态参数</td><td>不支持</td><td>支持</td></tr><tr><td>复杂场景支持</td><td>极其有限</td><td>丰富</td></tr></tbody></table><p>基本上，对于一些简单的固定参数请求并且是自测的情况下，使用ab会非常简便。一般情况下jmeter的适用性会更广。</p><h1 id="三、如何制定大促压测目标"><a href="#三、如何制定大促压测目标" class="headerlink" title="三、如何制定大促压测目标"></a>三、如何制定大促压测目标</h1><h2 id="压测接口的选取"><a href="#压测接口的选取" class="headerlink" title="压测接口的选取"></a>压测接口的选取</h2><p>一般情况下，不必要将公司所有的接口都进行压测，压测接口主要包含核心链路接口、访问量大的接口以及新上线的活动接口。获取方式基本是如下两种:</p><ol><li>对核心业务进行抓包</li><li>咨询各业务线负责人</li></ol><h2 id="压测并发数的设定"><a href="#压测并发数的设定" class="headerlink" title="压测并发数的设定"></a>压测并发数的设定</h2><p>在上面的两种压测工具中，我们都看到了一个参数为并发数，这个参数一般需要根据公司的业务量来进行推算，可以去网上找些资料。不过为了简化压测过程，我们公司的大促统一使用读接口200并发，写接口100并发的标准来执行的。</p><p>事实上，我对并发数的设定这块也比较模糊，因此上述描述仅做参考。</p><h2 id="TPS的设定"><a href="#TPS的设定" class="headerlink" title="TPS的设定"></a>TPS的设定</h2><p>一般是根据大促销售目标、平时各接口qps、各接口访问量按照比例制定出最终的TPS目标，不要忘了最后乘上一个风险系数。具体的算法可以自行设计，大概思路就是这样的。</p><h1 id="四、关注哪些指标"><a href="#四、关注哪些指标" class="headerlink" title="四、关注哪些指标"></a>四、关注哪些指标</h1><p>对于压测工具的指标上面已经说过了，主要是关注TPS、RT和错误率。</p><p>那么还有哪些需要关注的指标呢？其实这个都是根据公司的业务来决定的，例如我们公司主要使用java应用、mysql作为数据库、redis作为缓存中间件，那么我们主要关注的性能数据如下:</p><table><thead><tr><th>监控对象</th><th>性能指标</th></tr></thead><tbody><tr><td>压测指标</td><td>TPS、RT、错误率</td></tr><tr><td>应用服务器（服务化应用包含下游链路的应用服务器）</td><td>CPU、网络带宽、磁盘IO、GC</td></tr><tr><td>数据库</td><td>CPU、网络带宽、慢SQL</td></tr><tr><td>REDIS</td><td>网络带宽</td></tr><tr><td>其他</td><td>(根据相应特性自行设定)</td></tr></tbody></table><p>每个监控对象都有其特性，所以应该根据实际情况的来制定自己的监控指标。</p><h1 id="五、如何去排查问题"><a href="#五、如何去排查问题" class="headerlink" title="五、如何去排查问题"></a>五、如何去排查问题</h1><p>由于公司主要使用的是Java8，因此本文也主要是针对Java8应用做分析。</p><h2 id="为什么要找瓶颈点"><a href="#为什么要找瓶颈点" class="headerlink" title="为什么要找瓶颈点"></a>为什么要找瓶颈点</h2><p>举个例子，如果告诉你一个接口稍微一些压力就能把服务器的cpu跑满了，导致TPS上不去，里面一堆复杂逻辑，而且还有不少远程调用(数据库查询、缓存查询、dubbo调用等)。</p><p>你可能对业务非常熟悉，开始大刀阔斧地进行代码修改、增加缓存、业务降级等，也许期望很美好，但是事实上有极大的可能是你做的一切对TPS只能产生轻微的影响。然后只能通过不停地尝试删改代码去查找问题点，那么显然只能带来几个结果: 1.效率低下 2.把代码弄的一团糟 3.不具备可复制性 4.对业务会造成或小或大的影响，最最关键的是改的时候心里也没底、改完之后心里依旧没底。</p><h2 id="几个问题（请根据自己的实际认知回答）"><a href="#几个问题（请根据自己的实际认知回答）" class="headerlink" title="几个问题（请根据自己的实际认知回答）"></a>几个问题（请根据自己的实际认知回答）</h2><ol><li>你认为cpu达到100%是好是坏？</li><li>你认为哪些代码对cpu的开销大？你认为大量判断逻辑对cpu的开销大吗？</li><li>你认为大量的网络数据传输对哪些指标的影响大？</li><li>你认为对于Java应用监控服务器内存的必要性有多高？</li></ol><h2 id="如何排查性能问题"><a href="#如何排查性能问题" class="headerlink" title="如何排查性能问题"></a>如何排查性能问题</h2><p>那么问题来了，我们到底应该怎么去排查问题呢？（以下均为一些个人经验，可能会有不少遗漏，或者会有一些错误，如果有的话，请及时指出）</p><p>排查问题的话，首先我们需要先有一些排查的突破点和方向。（无法保证100%找到对应问题，但是大幅提升找到性能问题的效率）</p><p>前面有提到，我们压测过程中需要监控各项指标，那么其实我们的突破方向一般就在这些监控指标上了。我们可以对这些指标进行分类，对于每一类都可以有着相对应的排查策略。</p><h3 id="1-数据库慢SQL问题"><a href="#1-数据库慢SQL问题" class="headerlink" title="1. 数据库慢SQL问题"></a>1. 数据库慢SQL问题</h3><p>这个问题是最好排查的一类问题了，只需要对慢SQL进行针对性地分析优化即可，此处不过多讲解。</p><h3 id="2-网络带宽过大"><a href="#2-网络带宽过大" class="headerlink" title="2. 网络带宽过大"></a>2. 网络带宽过大</h3><p>那么一个问题来了，此处的网络带宽到底是指的什么呢？换个问法吧，假设数据库的带宽上限为1Gbps，实际上压测导致数据库的网络带宽占用了800Mbps，那可以说明这个接口是一个问题接口吗？</p><p>考虑下面这种情况，这个接口的TPS假设在压测过程中达到了80000，远大于接口实际目标TPS，那该接口将数据库的带宽占到800Mbps是合情合理的。</p><p>那么上面的问题的答案也就呼之欲出了，这里的网络带宽，在很多情况下，我们更应该关注的是单个请求的平均占用带宽。</p><h4 id="如何排查网络带宽过大的问题"><a href="#如何排查网络带宽过大的问题" class="headerlink" title="如何排查网络带宽过大的问题"></a>如何排查网络带宽过大的问题</h4><p>猜一猜，其实不难想象，就是抓包。我常用的抓包方式是通过tcpdump抓包，然后使用wireshark解析抓包内容（如果有更简单的方式，可以留言）。下面讲一下tcpdump+wireshark的方式如何抓包。</p><p>为了避免大量的数据混杂在一起，一般情况下，我更喜欢是抓单个请求的数据，而不是在压测中抓包。下面简单介绍一下tcpdump和wireshark如何抓包，</p><ol><li>在服务器上执行命令<code>sudo tcpdump -w xxx.pcap</code></li><li>然后请求一下接口</li><li>Ctrl+C停掉tcpdump</li><li>将xxx.pcap拷到本地，使用wireshark打开</li><li>如下图，找到一个请求 &gt; 右键”Follow” &gt; “TCP Stream”</li></ol><p><img alt="image-20191106175128011" data-src="https://img.cayun.me/2019-11-06-095128.png" class="lazyload"></p><p>打开TCP流后通过调整右下方的”Stream”，我们就可以看到应用在请求过程中的网络数据(包含Http请求数据、Mysql请求数据、Redis请求数据……)，以下图为例，可以看到这个请求的mysql请求量非常大，接下来就是查看到底是哪些SQL语句导致的。</p><p><img alt="image-20191106175708652" data-src="https://img.cayun.me/2019-11-06-095709.png" class="lazyload"></p><h3 id="3-数据库CPU过高"><a href="#3-数据库CPU过高" class="headerlink" title="3.  数据库CPU过高"></a>3.  数据库CPU过高</h3><p>开启数据库日志，看看压测期间都执行了哪些SQL语句，然后进行针对性的分析即可。一般情况下，全表扫描、不加索引、大表的count这些都比较容易引起cpu问题。绝大多数情况下都可以通过技术手段来优化，但也有可能技术手段无法优化的情况，则可以考虑业务上的优化。</p><h3 id="4-应用服务器磁盘IO问题"><a href="#4-应用服务器磁盘IO问题" class="headerlink" title="4. 应用服务器磁盘IO问题"></a>4. 应用服务器磁盘IO问题</h3><p>绝大多数情况下是由于日志问题导致的，日志问题一般分为如下两种情况:</p><ol><li>压测接口参数/环境有问题，导致接口不停地打印异常</li><li>打印了大量的业务日志</li></ol><p>至于其他的磁盘IO问题，则需要根据实际业务去分析了，暂时未遇到过，此处略过。</p><h3 id="5-GC问题"><a href="#5-GC问题" class="headerlink" title="5. GC问题"></a>5. GC问题</h3><p>一般情况下，我们不太需要去关注YoungGC，更多地只需要关注FullGC就行了，如果只是偶尔出现一次FullGC，那基本上没有太大问题，如果频繁FullGC(几秒就有一次FullGC，甚至可能一秒几次)，那就要做相应排查了。</p><h4 id="如何监测FullGC"><a href="#如何监测FullGC" class="headerlink" title="如何监测FullGC"></a>如何监测FullGC</h4><p>一般可以通过jstat来监测，命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jstat -gccause [PID] 1000</span></pre></td></tr></table></figure><p><img alt="image-20191106141050865" data-src="https://img.cayun.me/2019-11-06-061051.png" class="lazyload"></p><p>具体的每个参数的含义可以查看<code>man jstat</code>手册。</p><p>其实用visualvm装个GC插件然后监测java进程，可以很直观地看到java应用的内存和GC情况，就是操作相对而言比较繁琐。</p><h4 id="如何排查GC问题"><a href="#如何排查GC问题" class="headerlink" title="如何排查GC问题"></a>如何排查GC问题</h4><p>很多情况下(主要是大对象/大量堆对象导致FullGC的情况)，都可以通过将Java堆dump下来，然后通过MAT、jhat等内存分析工具来分析。流程如下:</p><ol><li>首先需要dump堆文件，在服务器上执行如下命令: <code>jmap -dump:format=b,file=heap.bin [PID]</code></li><li>然后将堆文件拷到本地，使用MAT打开(需要调大内存启动参数，必须要比堆文件大)，个人比较常用的MAT功能是”Leak Suspects”和”Histogram”，前者是可能出现内存泄漏的怀疑点，后者是堆中类的直方图</li></ol><h5 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h5><p>此处以一个真实的出现过宕机的Java应用的堆作为举例(加上-XX:+HeapDumpOnOutOfMemoryError这个参数就可以在出现OOM的时候自动将堆dump下来了)</p><p><img alt="image-20191106144338830" data-src="https://img.cayun.me/2019-11-06-064339.png" class="lazyload"></p><p>本文简单看一下”Leak Suspects”，至于Histogram则可以自行去研究。</p><p><img alt="image-20191106145139680" data-src="https://img.cayun.me/2019-11-06-065139.png" class="lazyload"></p><p>这个堆文件其实还是比较简单的，因为可怀疑点只有一个，八九不离十就是这块出现问题了。点击”Details”可以看到更详细的信息(ps:不是每种怀疑对象都有Details的)。</p><p><img alt="image-20191106145600510" data-src="https://img.cayun.me/2019-11-06-065600.png" class="lazyload"></p><p>在详细信息里面基本上可以很明显地看出来，有一个SQL语句查出来了超多的数据，导致内存塞不下了。事实上，最终在数据库日志中找到了这条语句，共查询了200W+条数据。</p><p>这个例子比较简单，事实上我们可能会遇到更多复杂的情况，例如怀疑对象特别多，甚至真正原因并不在怀疑对象中，或者metaspace导致的FullGC，这些情况下，我们可能又需要采用其他方式去处理这些问题。</p><h3 id="6-应用服务器cpu达到100-问题-以下只针对常规业务应用，不考虑追求极端性能应用"><a href="#6-应用服务器cpu达到100-问题-以下只针对常规业务应用，不考虑追求极端性能应用" class="headerlink" title="6. 应用服务器cpu达到100%问题(以下只针对常规业务应用，不考虑追求极端性能应用)"></a>6. 应用服务器cpu达到100%问题(以下只针对常规业务应用，不考虑追求极端性能应用)</h3><p>还记得之前的有个问题——你认为cpu达到100%是好是坏吗？</p><p>那么在这里我揭晓一下答案，如果接口的TPS高，那么我们的服务器的cpu当然是越高越好了，因为这说明了资源被充分利用了。但是，如果接口的TPS低，那么cpu达到100%就说明很有可能是有问题了，很大可能是存在问题代码占据了大量的cpu。</p><p>那么还有一个问题就是，你认为哪些代码对cpu的开销大？</p><ol><li>大量的业务逻辑判断——几乎无影响 (上万个if语句可能总的执行时间都不会超过1ms)</li><li>大量的网络传输——几乎无影响 (会有一些cpu开销，但是极其有限，可以找个应用生成火焰图看看)</li><li>线程阻塞——几乎无影响 (如果不考虑极其大量的线程切换的话，那么线程阻塞是不会占用cpu的)</li><li>大量的内存拷贝——几乎无影响 (会有一些cpu开销，但是极其有限，可以找个应用生成火焰图看看)</li></ol><p>这些都没有影响，那到底什么才对cpu有影响呢？常见的业务场景总结如下(如有遗漏请留言补充)</p><ol><li>长度特别大的循环，尤其是多层嵌套循环</li><li>字符串处理，常见的消耗cpu的操作是json解析、正则表达式</li><li>日期格式化，Date.format非常消耗cpu</li><li>大量的sql数据处理，sql数据处理量很多的情况下是会大量占用cpu的，这个情况最为常见</li><li>大量的日志输出有时也会占用不少的cpu，不过更多的情况是产生线程阻塞</li></ol><h4 id="排查cpu问题的方式"><a href="#排查cpu问题的方式" class="headerlink" title="排查cpu问题的方式"></a>排查cpu问题的方式</h4><p>我在大促压测中实践的比较多的方式是perf + perf-map-agent + FlamaGraph工具组合，其中perf是用来监控各个函数的cpu消耗(可以实时监控，也可以记录一段时间的数据)，perf-map-agent是用来辅助perf使用的，用来生成java堆的映射文件，FlamaGraph则是用来生成火焰图的。</p><p>这套工具的安装使用就不做介绍了，可以参考一下下面这两篇文章，</p><p><a href="http://senlinzhan.github.io/2018/03/18/perf/" target="_blank" rel="noopener">http://senlinzhan.github.io/2018/03/18/perf/</a><br><a href="https://www.jianshu.com/p/bea2b6a1eb6e" target="_blank" rel="noopener">https://www.jianshu.com/p/bea2b6a1eb6e</a> </p><p>主要使用方式，有如下两种:</p><ol><li>sudo perf top [-g]，可以实时观察cpu的消耗，操作相对比较轻量级</li><li>生成火焰图(一定要用浏览器打开)，操作相当繁琐，不过生成的信息也更详细，更易阅读，对于那些无法一眼看出来的问题会有不错的效果</li></ol><p><strong>火焰图示例</strong></p><p>下面展示一下本次大促压测solr优化过程中生成的火焰图，从图中可以看到YoungGC就占用了将近一半的cpu，</p><p><img alt="image-20191106155941396" data-src="https://img.cayun.me/2019-11-06-075942.png" class="lazyload"></p><p><strong>perf-top示例</strong></p><p>用这个示例代码做个perf-top的使用示范:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">100000000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        simple();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simple</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (count &lt; LIMIT) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            Date date = <span class="keyword">new</span> Date();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss SSS"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            String sd = df.format(date);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (sd.length() == <span class="number">23</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                count++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        System.out.println(System.currentTimeMillis() - startTime);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>首先使用<code>perf-map-agent/bin/create-java-perf-map.sh [PID]</code>生成JVM映射文件，然后使用<code>sudo perf top</code>可以看到cpu基本上都被SimpleDateFormat给占用了，(下面还有很多展示不出来的，事实上会更多)</p><p><img alt="image-20191107113205727" data-src="https://img.cayun.me/2019-11-07-033206.png" class="lazyload"></p><p>有了这些工具之后，绝大多数问题都已经可以比较容易地找到性能优化点了。</p><h5 id="其他一些方式"><a href="#其他一些方式" class="headerlink" title="其他一些方式"></a>其他一些方式</h5><p>上面那套组合实际用起来十分繁琐，大促压测结束后又了解到了一些其他工具，不过未经过真实实践，所以列出来仅做参考:</p><ol><li><p>visualvm中的Sampler</p></li><li><p>jvmtop</p></li><li><p><a href="https://github.com/oldratlee/useful-scripts" target="_blank" rel="noopener">https://github.com/oldratlee/useful-scripts</a> ，这个里面有个show-busy-java-threads脚本，试用了一下，感觉超方便，后续考虑在真实排查问题中实践一下</p></li></ol><h3 id="7-线程阻塞问题"><a href="#7-线程阻塞问题" class="headerlink" title="7. 线程阻塞问题"></a>7. 线程阻塞问题</h3><p>当我们在系统的所有环节都无法找到硬件瓶颈的时候，那往往就是线程产生了阻塞，一般情况下线程阻塞可以使用jstack和arthas来排查，分别举个例子吧，用下面这段样例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                    run();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &#125;, <span class="string">"myThread-"</span> + i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        Integer x = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            x *= i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        System.out.println(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        sleep(<span class="number">10</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(millis);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h4 id="jstack的方式查看"><a href="#jstack的方式查看" class="headerlink" title="jstack的方式查看"></a>jstack的方式查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jstack [PID]</span></pre></td></tr></table></figure><p><img alt="image-20191106184616989" data-src="https://img.cayun.me/2019-11-06-104617.png" class="lazyload"></p><p>从图中可以看到大量的线程都卡在<code>Block.sleep()</code>上。一般情况下，jstack可以配合grep来使用，通常关注得比较多的状态更多是BLOCKED。jstack相对而言没那么直观，但是比较轻量级，很多时候也可以比较容易地看出来一些常见的线程阻塞问题。</p><h4 id="arthas的方式查看"><a href="#arthas的方式查看" class="headerlink" title="arthas的方式查看"></a>arthas的方式查看</h4><p>arthas其实是一个比较全能的jvm性能分析工具，用起来也是各种舒服，而且相对而言也比较轻量，强烈推荐。</p><p>此处主要介绍arthas在排查线程阻塞方面的应用，</p><ol><li>执行arthas，命令<code>java -jar arthas-boot.jar</code></li><li>选择目标java进程</li><li>执行<code>trace [包名.类名] [方法名] -n [数量] &#39;#cost&gt;[执行时间]&#39;</code>就可以查看了，更多参数可以查询arthas的文档</li></ol><p><img alt="image-20191106185440691" data-src="https://img.cayun.me/2019-11-06-105440.png" class="lazyload"></p><p>如上图，我们可以看到各个方法的执行时间（包含了阻塞时间），筛选出执行时间长的方法，很大可能就能发现造成线程阻塞的瓶颈点。</p><h3 id="8-内存泄漏问题"><a href="#8-内存泄漏问题" class="headerlink" title="8. 内存泄漏问题"></a>8. 内存泄漏问题</h3><p>内存泄漏问题往往都伴随着宕机，我所遇见的情况有如下几种:</p><h4 id="Heap内存泄漏"><a href="#Heap内存泄漏" class="headerlink" title="Heap内存泄漏"></a>Heap内存泄漏</h4><p>这种情况属于相对而言比较容易处理的情况，使用-XX:+HeapDumpOnOutOfMemoryError参数可以在应用宕机的时候自动dump下堆文件，然后使用MAT等内存分析工具在绝大多数情况下都可以找到问题原因。</p><h4 id="metaspace内存泄漏"><a href="#metaspace内存泄漏" class="headerlink" title="metaspace内存泄漏"></a>metaspace内存泄漏</h4><p>这个有见过JVM调用groovy在某些情况下会产生内存泄漏。不过没有真实排查过相关问题，此处略过。</p><p>防风有一篇文章可以参考一下<a href="https://ffutop.github.io/posts/2019-11-07-groovyclassloader-fullgc/" target="_blank" rel="noopener">GroovyClassLoader 引发的 FullGC</a></p><h4 id="nonheap内存泄漏"><a href="#nonheap内存泄漏" class="headerlink" title="nonheap内存泄漏"></a>nonheap内存泄漏</h4><p>nonheap内存泄漏问题属于非常难排查的问题，一般情况下比较难dump下堆文件，即使dump下来了，一般情况下也很难确定原因，之前有用过tcmalloc、jemalloc等工具进行排查过。暂时没找到什么比较通用的套路，一般也是特事特办。根据之前的排查经验来看，如下几种情况会比较容易出现nonheap内存泄漏（如果遗漏，请留言补充）:</p><ol><li>图片合成业务中，涉及到Font的创建，可以详见之前的文章<a href="https://www.cayun.me/java/%E8%AE%B0%E4%B8%80%E6%AC%A1Font%E5%AF%BC%E8%87%B4JVM%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/">记一次Font导致JVM堆外内存泄漏分析</a></li><li>使用了JNI的情况下很有可能会导致JVM的arena内存区刚好超过机器内存限制 / nonheap内存泄漏（可以参考防风的文章<a href="https://ffutop.github.io/posts/2019-07-06-jni_problem/" target="_blank" rel="noopener">JNI 引发的堆外内存泄露</a>）</li><li>GZIPStream未关闭的情况会导致nonheap泄漏 (来源于网上资料，未真实遇到过)</li></ol><h3 id="9-从业务角度去排查问题"><a href="#9-从业务角度去排查问题" class="headerlink" title="9. 从业务角度去排查问题"></a>9. 从业务角度去排查问题</h3><p>排查很多问题之前，最好能够先去了解一下相关业务逻辑，因为很多性能问题是由于大量的问题业务代码引起的，很多时候从业务角度去考虑、辅以技术手段往往能够得到更好的效果。</p><h3 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h3><p>上面的各种方式只是提供一些策略，无法保证100%能够找到问题，甚至可能连70%都保证不了，更多情况下我们需要灵活使用各种工具进行问题分析。总结一下上面的性能分析工具，可以大概如下分类:</p><table><thead><tr><th>类型</th><th>工具</th></tr></thead><tbody><tr><td>全能型分析工具</td><td>arthas、visualvm</td></tr><tr><td>cpu分析工具</td><td>perf、jvmtop</td></tr><tr><td>内存分析工具</td><td>jmap、jhat、MAT</td></tr><tr><td>网络分析工具</td><td>tcpdump、wireshark</td></tr><tr><td>GC分析工具</td><td>jstat、gc日志文件、visualvm</td></tr><tr><td>堆栈分析工具</td><td>jstack、arthas</td></tr><tr><td>Linux底层排查工具</td><td>strace、perf、dmesg、journalctl</td></tr></tbody></table><p>有些工具甚至有更多的功能，例如arthas和visualvm，可能会漏掉一些分类，每种分类也同样还有着各种各样其他的分析工具，此处就不求尽善尽美了。</p><h1 id="六、压测中出现的典型性能问题"><a href="#六、压测中出现的典型性能问题" class="headerlink" title="六、压测中出现的典型性能问题"></a>六、压测中出现的典型性能问题</h1><p>以下总结一下我在大促压测过程中所遇到的一些比较典型的性能问题。</p><h3 id="1-Log4j日志阻塞问题"><a href="#1-Log4j日志阻塞问题" class="headerlink" title="1. Log4j日志阻塞问题"></a>1. Log4j日志阻塞问题</h3><p>公司的部分老应用仍然使用的Log4j，打印日志全部为同步方式，就会导致在并发高且业务日志多的情况下，会造成日志大量阻塞。</p><h3 id="2-redis大value问题"><a href="#2-redis大value问题" class="headerlink" title="2. redis大value问题"></a>2. redis大value问题</h3><p>有些代码不论有多大的数据都直接往redis里面塞，只要并发稍微一高，就很容易导致redis的带宽达到上限。</p><h3 id="3-sql全字段查询问题"><a href="#3-sql全字段查询问题" class="headerlink" title="3. sql全字段查询问题"></a>3. sql全字段查询问题</h3><p>很多代码查询mysql的时候，无论什么场景都会将表的所有的字段都查询出来，会导致两个结果:</p><ol><li>网络带宽极大浪费，尤其是查询中包含了不必要的”描述”等超大字段</li><li>极大地消耗cpu资源</li></ol><h3 id="4-sql未加索引问题"><a href="#4-sql未加索引问题" class="headerlink" title="4. sql未加索引问题"></a>4. sql未加索引问题</h3><p>比较容易犯的问题，一般会产生慢SQL，甚至可能导致数据库cpu消耗严重。</p><h3 id="5-sql-N-1问题"><a href="#5-sql-N-1问题" class="headerlink" title="5. sql N+1问题"></a>5. sql N+1问题</h3><p>也是比较容器犯的问题，会对应用本身和数据库都产生或多或少的性能影响，至于具体的影响度暂时还没有直观数据。</p><h3 id="6-正则表达式问题"><a href="#6-正则表达式问题" class="headerlink" title="6. 正则表达式问题"></a>6. 正则表达式问题</h3><p>正则表达式在业务中也是比较常用的，但是有些糟糕的正则表达式可能会导致一些可怕的后果，会严重消耗cpu资源，举个例子，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        String regex = <span class="string">"(\\w+,?)+"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        String val = <span class="string">"abcdefghijklmno,abcdefghijklmno+"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        System.out.println(val.matches(regex));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>就这么一段看上去简单的代码，会一直保持着cpu单核100%的状态，而且会执行15秒左右。具体原因可以详见防风的文章 <a href="https://www.ffutop.com/posts/2018-11-16-regex-exponential-explosion/" target="_blank" rel="noopener">https://www.ffutop.com/posts/2018-11-16-regex-exponential-explosion/</a></p><h3 id="7-DateFormat问题"><a href="#7-DateFormat问题" class="headerlink" title="7. DateFormat问题"></a>7. DateFormat问题</h3><p>大量使用DateFormat导致极大地cpu资源消耗，一般情况下请使用FastDateFormat替代SimpleDateFormat，性能能提升一倍以上。对于一些时间点比较规整的且瓶颈点仍在DateFormat上的，可以考虑使用缓存等方案。</p><h3 id="8-线程池不正确使用问题"><a href="#8-线程池不正确使用问题" class="headerlink" title="8. 线程池不正确使用问题"></a>8. 线程池不正确使用问题</h3><p>远程调用时长远大于cpu消耗的业务直接使用默认线程池或着线程数设置太少，很容易导致线程阻塞。</p><h3 id="9-传说中的问题"><a href="#9-传说中的问题" class="headerlink" title="9. 传说中的问题"></a>9. 传说中的问题</h3><p>只听说过，但是我还从未真实见到过，</p><ol><li>大量线程切换导致cpu开销大</li><li>数据库死锁问题</li><li>数据库连接池设置问题（有发生过几次，但是我都不在现场）</li><li>… …</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连续参加了两年公司的双十一大促压测项目，遇到了很多问题，也成长了很多，于是在这里对大促压测做一份总结。以及记录一下大促压测过程中出现的一些常见的Java应用性能问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="性能" scheme="https://www.cayun.me/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>JVM常量池&amp;字符串存储</title>
    <link href="https://www.cayun.me/java/JVM%E5%B8%B8%E9%87%8F%E6%B1%A0&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%82%A8/"/>
    <id>https://www.cayun.me/java/JVM%E5%B8%B8%E9%87%8F%E6%B1%A0&amp;%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E5%82%A8/</id>
    <published>2019-09-27T02:24:00.000Z</published>
    <updated>2019-12-13T11:26:51.471Z</updated>
    
    <content type="html"><![CDATA[<p><code>本文基于openjdk11及hotspot</code></p><p>根据查阅大量网上资料，综合而言可以得到这样一些内容:</p><p>JVM中常量池分为如下三种: 字符串常量池、class文件常量池、运行时常量池。</p><p><strong>字符串常量池</strong></p><p>字符串常量池与jdk1.7之后变移到了heap区中，且StringTable在JVM中只有一份，被所有类共享。</p><p><strong>class文件常量池</strong></p><p>class文件常量池主要是用来存储编译阶段就已经确定了的常量池数据。</p><p><strong>运行时常量池</strong></p><p>运行时常量池是方法区的一部分，JVM在执行某个类，会产生加载、链接、初始化。在加载阶段，会有一步是将class字节流代表的静态储存结构转化为方法区的运行时数据结构，其中就包含了class文件常量池进入运行时常量池的过程。</p><h1 id="JVM常量池"><a href="#JVM常量池" class="headerlink" title="JVM常量池"></a>JVM常量池</h1><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>字符串常量池在hotspot对应的数据结构是StringTable，我们先来看看StringTable的数据结构，</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><strong>StringTable</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ConcurrentHashTable&lt;WeakHandle&lt;vm_string_table_data&gt;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">                            StringTableConfig, mtSymbol&gt; StringTableHash;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTable</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtSymbol&gt;&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  StringTableHash* _local_table;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> _current_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在StringTable中，核心的存储结构就是一个ConcurrentHashTable。</p><h3 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h3><h4 id="1-字符串常量池"><a href="#1-字符串常量池" class="headerlink" title="1. 字符串常量池"></a>1. 字符串常量池</h4><p>我们从StringTable的初始化入手来看看字符串常量池占据的是JVM哪一部分的空间，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringTable初始化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">StringTable::StringTable() : _local_table(<span class="literal">NULL</span>), _current_size(<span class="number">0</span>), _has_work(<span class="number">0</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  _needs_rehashing(<span class="literal">false</span>), _weak_handles(<span class="literal">NULL</span>), _items(<span class="number">0</span>), _uncleaned_items(<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  _weak_handles = <span class="keyword">new</span> OopStorage(<span class="string">"StringTable weak"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                                 StringTableWeakAlloc_lock,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                                 StringTableWeakActive_lock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> start_size_log_2 = ceil_pow_2(StringTableSize);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  _current_size = ((<span class="keyword">size_t</span>)<span class="number">1</span>) &lt;&lt; start_size_log_2;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  _local_table = <span class="keyword">new</span> StringTableHash(start_size_log_2, END_SIZE, REHASH_LEN);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里面StringTableSize的默认大小为64位机器65536，非64位机器1024，可以通过<code>-XX:StringTableSize</code>来设置。可以看到，StringTable的初始化过程中new了一个StringTableHash(即ConcurrentHashTable)，我们接下来来追踪ConcurrentHashTable的初始化过程，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConcurrentHashTable初始化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> ConcurrentHashTable&lt;VALUE, CONFIG, F&gt;::</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  ConcurrentHashTable(<span class="keyword">size_t</span> log2size, <span class="keyword">size_t</span> log2size_limit, <span class="keyword">size_t</span> grow_hint)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    : _new_table(<span class="literal">NULL</span>), _log2_start_size(log2size),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">       _log2_size_limit(log2size_limit), _grow_hint(grow_hint),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">       _size_limit_reached(<span class="literal">false</span>), _resize_lock_owner(<span class="literal">NULL</span>),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">       _invisible_epoch(<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  _table = <span class="keyword">new</span> InternalTable(log2size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  _size_limit_reached = _table-&gt;_log2_size == _log2_size_limit;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里new了一个InternalTable，继续追踪InternalTable的初始化，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// InternalTable初始化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NEW_C_HEAP_ARRAY(type, size, memflags)\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  (type*) (AllocateHeap((size) * <span class="keyword">sizeof</span>(type), memflags))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> ConcurrentHashTable&lt;VALUE, CONFIG, F&gt;::</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  InternalTable::InternalTable(<span class="keyword">size_t</span> log2_size)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    : _log2_size(log2_size), _size(((<span class="keyword">size_t</span>)<span class="number">1u</span>l) &lt;&lt; _log2_size),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      _hash_mask(~(~((<span class="keyword">size_t</span>)<span class="number">0</span>) &lt;&lt; _log2_size))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  assert(_log2_size &gt;= SIZE_SMALL_LOG2 &amp;&amp; _log2_size &lt;= SIZE_BIG_LOG2,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">         <span class="string">"Bad size"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">void</span>* memory = NEW_C_HEAP_ARRAY(Bucket, _size, F);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  _buckets = <span class="keyword">new</span> (memory) Bucket[_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里即可看到StringTable的存储位置是在JVM的heap区域。</p><p>但是，到这里还没完，事实上StringTable只是存储了String的指针，我们还需要进一步知道字符串内容的存储位置。</p><h4 id="2-字符串具体内容"><a href="#2-字符串具体内容" class="headerlink" title="2. 字符串具体内容"></a>2. 字符串具体内容</h4><p>这个我们从<code>StringTable::do_intern()</code>中找到字符串插入StringTable的方法，在StringTable新增字符串的过程中，调用了<code>Node::create_node()</code>方法，如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处CONFIG为StringTableConfig</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Node* <span class="title">create_node</span><span class="params">(<span class="keyword">const</span> VALUE&amp; value, Node* next = <span class="literal">NULL</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> (CONFIG::allocate_node(<span class="keyword">sizeof</span>(Node), value)) Node(value, next);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>接下来是<code>StringTableConfig::allocate_node()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate_node</span><span class="params">(<span class="keyword">size_t</span> size, WeakHandle&lt;vm_string_table_data&gt; <span class="keyword">const</span>&amp; value)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  StringTable::item_added();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> StringTableHash::BaseConfig::allocate_node(size, value);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里调用的也是ConcurrentHashTable默认的分配节点的方法，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span>* ConcurrentHashTable&lt;VALUE, CONFIG, F&gt;::</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  BaseConfig::allocate_node(<span class="keyword">size_t</span> size, <span class="keyword">const</span> VALUE&amp; value)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> AllocateHeap(size, F);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>最终可以看到，字符串常量池中的字符串的存放位置也是在heap区域。</p><h3 id="存放原理"><a href="#存放原理" class="headerlink" title="存放原理"></a>存放原理</h3><p>根据字符串常量池的数据结构及存储位置，我们可以很容易就猜出常量池中的字符串的存放原理与HashMap的使用方式大同小异，即如果常量池中存在某个字符串，则直接返回，否则存入常量池后再返回。内部源码细节，我们就不再详解。</p><h2 id="class文件常量池"><a href="#class文件常量池" class="headerlink" title="class文件常量池"></a>class文件常量池</h2><p>在我们编译java文件时，就会在.class文件中生成一份常量池，该常量池在编译阶段就已经确定。可用通过<code>javap -v xxx.class</code>来查看，</p><p><img alt="image-20190927122651277" data-src="https://img.cayun.me/2019-09-27-042651.png" class="lazyload"></p><p>class常量池中主要存放着两大常亮: 字面量和符号引用。</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;本文基于openjdk11及hotspot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据查阅大量网上资料，综合而言可以得到这样一些内容:&lt;/p&gt;
&lt;p&gt;JVM中常量池分为如下三种: 字符串常量池、class文件常量池、运行时常量池。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串常量
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="hotspot" scheme="https://www.cayun.me/tags/hotspot/"/>
    
  </entry>
  
  <entry>
    <title>Java metaspace源码解析</title>
    <link href="https://www.cayun.me/java/Java%20metaspace%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.cayun.me/java/Java%20metaspace%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2019-08-09T08:50:00.000Z</published>
    <updated>2019-12-13T11:26:51.471Z</updated>
    
    <content type="html"><![CDATA[<p><code>本文基于openjdk11及hotspot</code></p><p>从Java8开始，JVM中的永久代被替换为了metaspace，本文将根据JVM源码对metaspace的初始化、分配内存、释放内存三个主要过程进行解析。</p><a id="more"></a><h1 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h1><p>在metaspace中有如下一些概念，metaspace、classLoaderMetaspace、virtualSpace、metachunk、chunkManager、spaceManager、metablock。首先来看看各个数据结构中的内容，</p><h2 id="1-1-metaspace"><a href="#1-1-metaspace" class="headerlink" title="1.1 metaspace"></a>1.1 metaspace</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/memory/metaspace.hpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Metaspace</span> :</span> <span class="keyword">public</span> AllStatic &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> metaspace::VirtualSpaceList* _space_list;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> metaspace::VirtualSpaceList* _class_space_list;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> metaspace::ChunkManager* _chunk_manager_metadata;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> metaspace::ChunkManager* _chunk_manager_class;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>Metaspace是一个只包含静态属性和静态方法的类，看上去更像是一个工具类。在里面重要包含了VirtualSpaceList和ChunkManager，不难看出VirtualSpaceList及ChunkManager是全局共享的。</p><h3 id="space-list和class-space-list的区别"><a href="#space-list和class-space-list的区别" class="headerlink" title="space_list和class_space_list的区别"></a>space_list和class_space_list的区别</h3><p>这两者分别对应了一片内存区域，从名称中可以看出class_space_list是用来存储java中class的数据的。但事实上，不完全正确，只有当压缩指针生效的时候，class_space_list才会存在，否则class数据也同样会存储在space_list中。也就是说其实JVM的metaspace区域其实分为两块——Class区域和NonClass区域。</p><p>同理，chunk_manager_metadata对应了NonClass，chunk_manager_class对应了Class。</p><h2 id="1-2-classLoaderMetaspace"><a href="#1-2-classLoaderMetaspace" class="headerlink" title="1.2 classLoaderMetaspace"></a>1.2 classLoaderMetaspace</h2><p>在Java中，每个ClassLoader实例(包括bootstrapClassLoader)都会在metaspace中拥有一块独立的区域，叫做classLoaderMetaspace。classLoaderMetaspace的数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderMetaspace</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtClass&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  metaspace::SpaceManager* _vsm;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  metaspace::SpaceManager* _class_vsm;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>每个ClassLoaderMetaspace实例都会有一个spaceManager(可能还有一个classSpaceManager)，用来处理ClassLoaderMetaspace的内存分配。</p><h3 id="classLoaderMetaspace类型"><a href="#classLoaderMetaspace类型" class="headerlink" title="classLoaderMetaspace类型"></a>classLoaderMetaspace类型</h3><p>classLoaderMetaspace有些多种类型，分别对应了不同的ClassLoader</p><table><thead><tr><th>名称</th><th>对应ClassLoader</th></tr></thead><tbody><tr><td>StandardMetaspace</td><td>普通ClassLoader</td></tr><tr><td>BootMetaspace</td><td>BootstrapClassLoader</td></tr><tr><td>AnonymousMetaspace</td><td>匿名ClassLoader</td></tr><tr><td>ReflectionMetaspace</td><td>反射ClassLoader</td></tr></tbody></table><p>不同类型的metaspace之间区别不大，主要在于他们创建的chunk大小的区别。</p><h2 id="1-3-virtualSpace"><a href="#1-3-virtualSpace" class="headerlink" title="1.3 virtualSpace"></a>1.3 virtualSpace</h2><p>virtualSpace组成了为metaspace分配的空间，以链表形式共享给ClassLoaderMetaspace使用。数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualSpace</span> &#123;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Reserved area</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _low_boundary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _high_boundary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Committed area</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _low;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _high;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// MPSS Support</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _lower_high;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _middle_high;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _upper_high;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _lower_high_boundary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _middle_high_boundary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">char</span>* _upper_high_boundary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在virtualSpace中划分为了上中下三个区域，如下图所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">-----------------  upper_high_boundary &#x2F; high_boundary</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">| unused |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">|--------|  上  |- upper_high</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">|  used  |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">-----------------  middle_high_boundary</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">| unused |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">|--------|  中  |- middle_high</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">|  used  |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">-----------------  lower_high_boundary</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">| unused |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">|--------|  下  |- lower_high</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">|  used  |      |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">-----------------  low_boundary</span></pre></td></tr></table></figure><p>这三块区域的区别，本文不予细究。</p><h2 id="1-4-metachunk"><a href="#1-4-metachunk" class="headerlink" title="1.4 metachunk"></a>1.4 metachunk</h2><p>metachunk是ClassLoaderMetaspace从VirtualSpace区域分配出来的内存，每个ClassLoaderMetaspace都会通过spaceManager持有一个metachunk列表，表明它所有持有的metaspace内存，同样的该classLoader的所有内存申请也全部是在chunk中进行。</p><p>在JVM中chunk从小到大分为了四种类型，以及其对应的chunk大小如下表，</p><table><thead><tr><th>chunk类型</th><th>Class（单位：字）</th><th>NonClass（单位：字）</th></tr></thead><tbody><tr><td>specialized</td><td>128</td><td>128</td></tr><tr><td>small</td><td>256</td><td>512</td></tr><tr><td>medium</td><td>4K</td><td>8K</td></tr><tr><td>humongous</td><td>无固定大小</td><td>无固定大小</td></tr></tbody></table><h2 id="1-5-chunkManager"><a href="#1-5-chunkManager" class="headerlink" title="1.5 chunkManager"></a>1.5 chunkManager</h2><p>chunkManager用来那些已经释放了的chunk，用以重复使用，数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChunkManager</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtInternal&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ChunkList _free_chunks[NumberOfFreeLists];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  ChunkTreeDictionary _humongous_dictionary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>其中<code>free_chunks[]</code>用来存储special、small、medium三种类型的chunk，而<code>humongous_dictionary</code>用来存储humongous类型的chunk。前面三种是固定大小，因此直接使用数组存储，而humongous是无固定大小的，因此使用排序二叉树的形式存储。</p><h2 id="1-6-spaceManager"><a href="#1-6-spaceManager" class="headerlink" title="1.6 spaceManager"></a>1.6 spaceManager</h2><p>每个classLoaderMetaspace都对应一个NonClassSpaceManager和一个ClassSpaceManager，SpaceManager中存储了当前classLoaderMetaspace所使用的chunk的信息以及释放后用于重新使用的metablock列表。同时classLoaderMetaspace的内存分配最终也是由spaceManager来处理的。主要数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpaceManager</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtClass&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Metachunk* _chunk_list;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Metachunk* _current_chunk;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  BlockFreelist* _block_freelists;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="1-7-metablock"><a href="#1-7-metablock" class="headerlink" title="1.7 metablock"></a>1.7 metablock</h2><p>metablock则是由metachunk中分配出来用于最终使用的内存。在spaceManager的BlockFreeList中存储了那些释放后可再次使用的block。</p><h2 id="1-8-总图"><a href="#1-8-总图" class="headerlink" title="1.8 总图"></a>1.8 总图</h2><p><img alt="image-20190809164533218" data-src="https://img.cayun.me/2019-08-09-084533.png" class="lazyload"></p><h1 id="2-初始化过程"><a href="#2-初始化过程" class="headerlink" title="2. 初始化过程"></a>2. 初始化过程</h1><p>JVM metaspace初始化分为了metaspace和classLoaderMetaspace的初始化。我们依次来看这两者的初始化，</p><h2 id="2-1-metaspace初始化"><a href="#2-1-metaspace初始化" class="headerlink" title="2.1 metaspace初始化"></a>2.1 metaspace初始化</h2><p>metaspace的初始化分为三步，先是Arguments::apply_ergo()时调用Metaspace::ergo_initialize()，接着在universe_init()时调用Metaspace::global_initialize()，最后调用Metaspace::post_initialize()。这三步都是在JVM初始化的过程中执行。我们依次来看这三步初始化过程，</p><h3 id="ergo-initialize"><a href="#ergo-initialize" class="headerlink" title="ergo_initialize"></a>ergo_initialize</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Metaspace::ergo_initialize() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (DumpSharedSpaces) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    FLAG_SET_ERGO(<span class="keyword">bool</span>, UseLargePagesInMetaspace, <span class="literal">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> page_size = os::vm_page_size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (UseLargePages &amp;&amp; UseLargePagesInMetaspace) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    page_size = os::large_page_size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  _commit_alignment  = page_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  _reserve_alignment = MAX2(page_size, (<span class="keyword">size_t</span>)os::vm_allocation_granularity());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  MaxMetaspaceSize = align_down_bounded(MaxMetaspaceSize, _reserve_alignment);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (MetaspaceSize &gt; MaxMetaspaceSize) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    MetaspaceSize = MaxMetaspaceSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  MetaspaceSize = align_down_bounded(MetaspaceSize, _commit_alignment);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  assert(MetaspaceSize &lt;= MaxMetaspaceSize, <span class="string">"MetaspaceSize should be limited by MaxMetaspaceSize"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  MinMetaspaceExpansion = align_down_bounded(MinMetaspaceExpansion, _commit_alignment);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  MaxMetaspaceExpansion = align_down_bounded(MaxMetaspaceExpansion, _commit_alignment);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  CompressedClassSpaceSize = align_down_bounded(CompressedClassSpaceSize, _reserve_alignment);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> min_metaspace_sz =</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      VIRTUALSPACEMULTIPLIER * InitialBootClassLoaderMetaspaceSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (UseCompressedClassPointers) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((min_metaspace_sz + CompressedClassSpaceSize) &gt;  MaxMetaspaceSize) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (min_metaspace_sz &gt;= MaxMetaspaceSize) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        vm_exit_during_initialization(<span class="string">"MaxMetaspaceSize is too small."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        FLAG_SET_ERGO(<span class="keyword">size_t</span>, CompressedClassSpaceSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">                      MaxMetaspaceSize - min_metaspace_sz);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (min_metaspace_sz &gt;= MaxMetaspaceSize) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    FLAG_SET_ERGO(<span class="keyword">size_t</span>, InitialBootClassLoaderMetaspaceSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                  min_metaspace_sz);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  set_compressed_class_space_size(CompressedClassSpaceSize);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在ergo初始化过程中主要是进行一些全局变量的设置，例如MaxMetaspaceSize、MinMetaspaceExpansion、MaxMetaspaceExpansion和CompressedClassSpaceSize。其中比较重要的就是MaxMetaspaceSize和CompressedClassSpaceSize，默认情况下CompressedClassSpaceSize的大小为1G（相见globals.hpp）。</p><h3 id="global-initialize"><a href="#global-initialize" class="headerlink" title="global_initialize"></a>global_initialize</h3><p>全局初始化主要是用来初始化VirtualSpaceList和ChunkManager。其中ClassVirtualSpaceList的首节点大小直接分配为CompressedClassSpaceSize（不考虑开启UseSharedSpaces模式的情况下）。而NonClassVirtualSpaceList的首节点大小则分配为4M*8/2（64位机器）或 2200K/4*2(32位机器)。源码中有很多关于对齐计算的源码，较为啰嗦，此处就不展示了。</p><h3 id="post-initialize"><a href="#post-initialize" class="headerlink" title="post_initialize"></a>post_initialize</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Metaspace::post_initialize() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  MetaspaceGC::post_initialize();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>post初始化主要是用于MetaspaceGC的初始化，本文不关注Metaspace的GC，因此此部分也不进行探讨。</p><h2 id="2-2-classLoaderMetaspace初始化"><a href="#2-2-classLoaderMetaspace初始化" class="headerlink" title="2.2 classLoaderMetaspace初始化"></a>2.2 classLoaderMetaspace初始化</h2><p>classLoaderMetaspace的初始化与metaspace的初始化不同，metaspace是在JVM启动的时候就已经初始化了，而classLoaderMetaspace的初始化则是当其对应的classLoader需要使用metaspace的时候才会进行初始化，代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ClassLoaderMetaspace* ClassLoaderData::metaspace_non_null() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ClassLoaderMetaspace* metaspace = OrderAccess::load_acquire(&amp;_metaspace);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (metaspace == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function">MutexLockerEx <span class="title">ml</span><span class="params">(_metaspace_lock,  Mutex::_no_safepoint_check_flag)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Check if _metaspace got allocated while we were waiting for this lock.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((metaspace = _metaspace) == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> == the_null_class_loader_data()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        assert (class_loader() == <span class="literal">NULL</span>, <span class="string">"Must be"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        metaspace = <span class="keyword">new</span> ClassLoaderMetaspace(_metaspace_lock, Metaspace::BootMetaspaceType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_anonymous()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        metaspace = <span class="keyword">new</span> ClassLoaderMetaspace(_metaspace_lock, Metaspace::AnonymousMetaspaceType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (class_loader()-&gt;is_a(SystemDictionary::reflect_DelegatingClassLoader_klass())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        metaspace = <span class="keyword">new</span> ClassLoaderMetaspace(_metaspace_lock, Metaspace::ReflectionMetaspaceType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        metaspace = <span class="keyword">new</span> ClassLoaderMetaspace(_metaspace_lock, Metaspace::StandardMetaspaceType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      OrderAccess::release_store(&amp;_metaspace, metaspace);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> metaspace;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码中我们可以看到四种ClassLoaderMetaspace类型分别与四种ClassLoader一一对应。</p><hr><p>接下来是classLoaderMetaspace的初始化过程，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ClassLoaderMetaspace::initialize(Mutex* lock, Metaspace::MetaspaceType type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  Metaspace::verify_global_initialization();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  DEBUG_ONLY(Atomic::inc(&amp;g_internal_statistics.num_metaspace_births));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  _vsm = <span class="keyword">new</span> SpaceManager(Metaspace::NonClassType, type, lock)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (Metaspace::using_class_space()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    _class_vsm = <span class="keyword">new</span> SpaceManager(Metaspace::ClassType, type, lock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="function">MutexLockerEx <span class="title">cl</span><span class="params">(MetaspaceExpand_lock, Mutex::_no_safepoint_check_flag)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  initialize_first_chunk(type, Metaspace::NonClassType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (Metaspace::using_class_space()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    initialize_first_chunk(type, Metaspace::ClassType);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码中我们可以看到初始化过程主要包含两个步骤，</p><ol><li>创建NonClassSpaceManger(_vsm)和ClassSpaceManager(_class_vsm)</li><li>初始化第一个NonClassChunk和第一个ClassChunk</li></ol><hr><p>我们接下来重点关注一下第一个Chunk的初始化过程（简单期间，我们只关注NonClass类型的初始化，其实两者基本一样）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码已经过简单整理</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ClassLoaderMetaspace::initialize_first_chunk(Metaspace::MetaspaceType type, Metaspace::MetadataType mdtype) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> chunk_word_size = get_space_manager(mdtype)-&gt;get_initial_chunk_size(type);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Metachunk* chunk = Metaspace::get_chunk_manager(mdtype)-&gt;chunk_freelist_allocate(chunk_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (chunk == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    chunk = Metaspace::get_space_list(mdtype)-&gt;get_new_chunk(chunk_word_size,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                                                  get_space_manager(mdtype)-&gt;medium_chunk_bunch());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (chunk != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    get_space_manager(mdtype)-&gt;add_chunk(chunk, <span class="literal">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>总体看来，初始化第一个chunk分为了三步：</p><ol><li>从全局chunk_freelist中尝试分配一个chunk</li><li>从全局virtualSpaceList中创建一个新的chunk</li><li>将新的chunk添加到spaceManager中管理</li></ol><p>不过在探究这三步之前，我们先来看看第一句代码，计算chunk大小，我们先来看看chunk大小如何计算，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> ChunkSizes &#123;    <span class="comment">// in words.</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  ClassSpecializedChunk = <span class="number">128</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  SpecializedChunk = <span class="number">128</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ClassSmallChunk = <span class="number">256</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  SmallChunk = <span class="number">512</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  ClassMediumChunk = <span class="number">4</span> * K,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  MediumChunk = <span class="number">8</span> * K</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> SpaceManager::adjust_initial_chunk_size(<span class="keyword">size_t</span> requested, <span class="keyword">bool</span> is_class_space) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> chunk_sizes[] = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">      specialized_chunk_size(is_class_space),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">      small_chunk_size(is_class_space),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">      medium_chunk_size(is_class_space)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE(chunk_sizes); i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (requested &lt;= chunk_sizes[i]) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> chunk_sizes[i];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> requested;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> SpaceManager::get_initial_chunk_size(Metaspace::MetaspaceType type) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> requested;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (is_class()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::BootMetaspaceType:       requested = Metaspace::first_class_chunk_word_size(); <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::AnonymousMetaspaceType:  requested = ClassSpecializedChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::ReflectionMetaspaceType: requested = ClassSpecializedChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">default</span>:                                 requested = ClassSmallChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">switch</span> (type) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::BootMetaspaceType:       requested = Metaspace::first_chunk_word_size(); <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::AnonymousMetaspaceType:  requested = SpecializedChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">case</span> Metaspace::ReflectionMetaspaceType: requested = SpecializedChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">default</span>:                                 requested = SmallChunk; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> adjusted = adjust_initial_chunk_size(requested);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  assert(adjusted != <span class="number">0</span>, <span class="string">"Incorrect initial chunk size. Requested: "</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">         SIZE_FORMAT <span class="string">" adjusted: "</span> SIZE_FORMAT, requested, adjusted);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> adjusted;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里我们可以看到不同类型的classLoaderMetaspace之间的区别，它们的初始chunk大小是不一样的。同时，对于Class类和NonClass类型的Chunk，它们的specialized、small、medium三档的大小值也是完全不同的。</p><hr><p>接下来，我们重点仍然放回第一个chunk的初始化过程，此处重点关注前两步，先是第一步——从全局chunk_freelist中尝试分配一个chunk。<code>ChunkManager::chunk_freelist_allocate(size_t word_size)</code>中主要调用了<code>ChunkManager::free_chunks_get</code>方法，我们来看看具体源码，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去除了校验代码&amp;日志代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Metachunk* ChunkManager::free_chunks_get(<span class="keyword">size_t</span> word_size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  slow_locked_verify();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Metachunk* chunk = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">bool</span> we_did_split_a_chunk = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (list_index(word_size) != HumongousIndex) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    ChunkList* free_list = find_free_chunks_list(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    chunk = free_list-&gt;head();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (chunk == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      ChunkIndex target_chunk_index = get_chunk_type_by_size(word_size, is_class());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      Metachunk* larger_chunk = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">      ChunkIndex larger_chunk_index = next_chunk_index(target_chunk_index);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">while</span> (larger_chunk == <span class="literal">NULL</span> &amp;&amp; larger_chunk_index &lt; NumberOfFreeLists) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        larger_chunk = free_chunks(larger_chunk_index)-&gt;head();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (larger_chunk == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">          larger_chunk_index = next_chunk_index(larger_chunk_index);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (larger_chunk != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        chunk = split_chunk(word_size, larger_chunk);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        we_did_split_a_chunk = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (chunk == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    free_list-&gt;remove_chunk(chunk)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    chunk = humongous_dictionary()-&gt;get_chunk(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (chunk == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  chunk-&gt;set_next(<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  chunk-&gt;set_prev(<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> chunk;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>简单讲解一下这段代码，内存分配分为了两种情况</p><ul><li>specialized、small、medium三种大小的chunk</li><li>humongous类型的chunk</li></ul><p>其中specialized、small、medium三种类型的freeChunk分别对应了三个列表，而humongou类型的freeChunk由于其大小不固定，则使用排序二叉树来存储。</p><p>非humongou类型的chunk在分配过程中如果失败，会尝试将更大的chunk进行拆分。</p><hr><p>接下来看从全局virtualSpaceList中创建一个新的chunk的过程，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Metachunk* VirtualSpaceList::get_new_chunk(<span class="keyword">size_t</span> chunk_word_size, <span class="keyword">size_t</span> suggested_commit_granularity) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Metachunk* next = current_virtual_space()-&gt;get_chunk_vs(chunk_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (next != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> size_for_padding = largest_possible_padding_size_for_chunk(chunk_word_size, <span class="keyword">this</span>-&gt;is_class());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> min_word_size       = align_up(chunk_word_size + size_for_padding, Metaspace::commit_alignment_words());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> preferred_word_size = align_up(suggested_commit_granularity, Metaspace::commit_alignment_words());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (min_word_size &gt;= preferred_word_size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    preferred_word_size = min_word_size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">bool</span> expanded = expand_by(min_word_size, preferred_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (expanded) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    next = current_virtual_space()-&gt;get_chunk_vs(chunk_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   <span class="keyword">return</span> next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>整段代码可以整理为三步：</p><ol><li>尝试从当前virtualSpace分配chunk</li><li>扩展virtualSpace</li><li>再次尝试从当前virtualSpace分配chunk</li></ol><p>比较让人感到好奇的是第二步，扩展virtualSpace，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VirtualSpaceList::expand_by(<span class="keyword">size_t</span> min_words, <span class="keyword">size_t</span> preferred_words) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!MetaspaceGC::can_expand(min_words, <span class="keyword">this</span>-&gt;is_class())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> allowed_expansion_words = MetaspaceGC::allowed_expansion();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (allowed_expansion_words &lt; min_words) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> max_expansion_words = MIN2(preferred_words, allowed_expansion_words);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">bool</span> vs_expanded = expand_node_by(current_virtual_space(), min_words, max_expansion_words);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (vs_expanded) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  retire_current_virtual_space();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> grow_vs_words = MAX2((<span class="keyword">size_t</span>)VirtualSpaceSize, preferred_words);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  grow_vs_words = align_up(grow_vs_words, Metaspace::reserve_alignment_words());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (create_new_virtual_space(grow_vs_words)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (current_virtual_space()-&gt;is_pre_committed()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> expand_node_by(current_virtual_space(), min_words, max_expansion_words);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这一步主要包含几个核心步骤：</p><ul><li>尝试扩展当前virtualSpace</li><li>当前virtualSpace不满足要求，则将当前virtualSpace退休。这一步会将当前virtualSpace的剩余空间回收到chunk_freelist</li><li>创建一个新的virtualSpace</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>整个classLoaderMetaspace的初始化过程可以总结为如下步骤：</p><ol><li>创建SpaceManager</li><li>初始化ClassLoaderMetaspace第一个Chunk<ol><li>从全局chunk_freelist中尝试分配一个chunk</li><li>从全局virtualSpaceList中创建一个新的chunk<ol><li>从当前virtualSpace尝试分配</li><li>回收当前virtualSpace剩余空间，新建一个virtualSpace并尝试分配</li></ol></li><li>初始化完成，将chunk添加到spaceManager中管理</li></ol></li></ol><h1 id="3-分配内存"><a href="#3-分配内存" class="headerlink" title="3. 分配内存"></a>3. 分配内存</h1><p>对于metaspace而言，除了初始化之外，还有两个最重要的功能——分配内存和释放内存。我们先来看分配内存，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">is_class_space_allocation</span><span class="params">(MetadataType mdType)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mdType == ClassType &amp;&amp; using_class_space();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">MetaWord* ClassLoaderMetaspace::allocate(<span class="keyword">size_t</span> word_size, Metaspace::MetadataType mdtype) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (Metaspace::is_class_space_allocation(mdtype)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span>  class_vsm()-&gt;allocate(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span>  vsm()-&gt;allocate(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这段代码中，我们可以看到，只有元数据类型为Class类型以及使用压缩指针的时候才会使用Class空间，否则都是使用NonClass空间。</p><p>接下来，我们继续探究<code>vsm()-&gt;allocate(word_size)</code>方法，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">MetaWord* SpaceManager::allocate(<span class="keyword">size_t</span> word_size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="function">MutexLockerEx <span class="title">cl</span><span class="params">(lock(), Mutex::_no_safepoint_check_flag)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> raw_word_size = get_allocation_word_size(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  BlockFreelist* fl =  block_freelists();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  MetaWord* p = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (fl != <span class="literal">NULL</span> &amp;&amp; fl-&gt;total_size() &gt; allocation_from_dictionary_limit) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    p = fl-&gt;get_block(raw_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    p = allocate_work(raw_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> p;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这一步与之前metaspace初始化chunk有些异曲同工之处，此处也是先尝试从block_freelists中进行分配，分配失败再尝试从chunk中进行分配，逻辑几乎与上文的chunk初始化一摸一样。</p><p>block_freelists同样也是分为了小的和大的，数据结构如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockFreelist</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtClass&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  BlockTreeDictionary* <span class="keyword">const</span> _dictionary;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  SmallBlocks* _small_blocks;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallBlocks</span> :</span> <span class="keyword">public</span> CHeapObj&lt;mtClass&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  FreeList&lt;Metablock&gt; _small_lists[_small_block_max_size - _small_block_min_size];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在small_block_max_size到small_block_min_size范围内的block通过链表来存储，更大的block则使用排序二叉树来实现。</p><p>至于chunk分配内存也如出一辙，先尝试从当前chunk分配，分配失败再新建chunk进行分配。</p><h1 id="4-释放内存"><a href="#4-释放内存" class="headerlink" title="4. 释放内存"></a>4. 释放内存</h1><p>释放内存的代码则比较简单，即直接将需要释放的内存放回block_freelist中重新使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> SpaceManager::deallocate(MetaWord* p, <span class="keyword">size_t</span> word_size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> raw_word_size = get_allocation_word_size(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (block_freelists() == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    _block_freelists = <span class="keyword">new</span> BlockFreelist();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  block_freelists()-&gt;return_block(p, raw_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> BlockFreelist::return_block(MetaWord* p, <span class="keyword">size_t</span> word_size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  Metablock* free_chunk = ::<span class="keyword">new</span> (p) Metablock(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (word_size &lt; SmallBlocks::small_block_max_size()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    small_blocks()-&gt;return_block(free_chunk, word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  dictionary()-&gt;return_chunk(free_chunk);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>至此，metaspace部分的初始化，内存分配，内存释放便已结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;本文基于openjdk11及hotspot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从Java8开始，JVM中的永久代被替换为了metaspace，本文将根据JVM源码对metaspace的初始化、分配内存、释放内存三个主要过程进行解析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="hotspot" scheme="https://www.cayun.me/tags/hotspot/"/>
    
      <category term="metaspace" scheme="https://www.cayun.me/tags/metaspace/"/>
    
  </entry>
  
  <entry>
    <title>Java对象分配原理</title>
    <link href="https://www.cayun.me/java/Java%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/"/>
    <id>https://www.cayun.me/java/Java%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</id>
    <published>2019-06-27T19:07:00.000Z</published>
    <updated>2019-12-13T11:26:51.471Z</updated>
    
    <content type="html"><![CDATA[<p><code>本文基于openjdk11及hotspot</code></p><a id="more"></a><h1 id="Java对象模型-OOP-Klass模型"><a href="#Java对象模型-OOP-Klass模型" class="headerlink" title="Java对象模型: OOP-Klass模型"></a>Java对象模型: OOP-Klass模型</h1><p>在正式探讨JVM对象的创建前，先简单地介绍一下hotspot中实现的Java的对象模型。在JVM中，并没有直接将Java对象映射成C++对象，而是采用了oop-klass模型，主要是不希望每个对象中都包含有一份虚函数表，其中：</p><ol><li>OOP(Ordinary Object Point)，表示对象的实例信息</li><li>Klass，是Java类的在C++中的表示，用来描述Java类的信息</li></ol><p>简单地说，一个Java类在JVM中被拆分为了两个部分：数据和描述信息，分别对应OOP和Klass。</p><p>在具体的JVM源码中，当加载一个Class时，会创建一个InstanceKlass对象，实例化的对象则对应InstanceOopDesc，其中InstanceKlass存放在元空间，InstanceOopDesc存放在堆中。</p><h1 id="对象创建过程"><a href="#对象创建过程" class="headerlink" title="对象创建过程"></a>对象创建过程</h1><p>首先先来看InstanceOopDesc的数据结构，InstanceOopDesc继承了OopDesc，数据结构如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处为了方便阅读，改写了一下代码</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">instanceOopDesc</span> :</span> <span class="keyword">public</span> oopDesc &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">volatile</span> markOop _mark;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">union</span> _metadata &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Klass*      _klass;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    narrowKlass _compressed_klass;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125; _metadata;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure><p>其中_metadata指向该对象的InstanceKlass，而_mark中则存储了对象运行时的状态数据，数据结构如下(图中为32位的情况下的数据，64位也大同小异)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">32 bits:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">--------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">size:32 ------------------------------------------&gt;| (CMS free block)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></pre></td></tr></table></figure><p>每一行都代表了一种情况，描述了哈希码、GC分代年龄、锁等状态信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hash： 哈希码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">age： 分代年龄</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">biased_lock： 偏向锁标识位</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">lock： 锁状态标识位</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">JavaThread*： 持有偏向锁的线程ID</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">epoch： 偏向时间戳</span></pre></td></tr></table></figure><p>instanceOopDesc其实保存的是对象的头部信息，除了头部信息，对象还有数据，对象数据紧跟着头部后面，图示如下：</p><p><img alt="image-20190628015456829" data-src="https://img.cayun.me/2019-06-27-175457.png" class="lazyload"></p><h2 id="1-入口"><a href="#1-入口" class="headerlink" title="1. 入口"></a>1. 入口</h2><p><img alt="image-20190628025924528" data-src="https://img.cayun.me/2019-06-27-185925.png" class="lazyload"></p><p>上图截取了一段程序字节码，红线所框对应了Java中new操作的字节码，Java中的new操作对应了字节码的三个操作，本文主要讲述第一个操作(new)。字节码中new操作对应JVM中的InterpreterRuntime::_new，代码如下，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/interpreter/interpreterRuntime.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">IRT_ENTRY(<span class="keyword">void</span>, InterpreterRuntime::_new(JavaThread* thread, ConstantPool* pool, <span class="keyword">int</span> index))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  Klass* k = pool-&gt;klass_at(index, CHECK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  InstanceKlass* klass = InstanceKlass::cast(k);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  klass-&gt;check_valid_for_instantiation(<span class="literal">true</span>, CHECK); <span class="comment">// 校验：接口/抽象类/Class不能实例化</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  klass-&gt;initialize(CHECK); <span class="comment">// 初始化klass</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  oop obj = klass-&gt;allocate_instance(CHECK); <span class="comment">// 分配实例</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  thread-&gt;set_vm_result(obj);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">IRT_END</span></pre></td></tr></table></figure><p>里面主要包含了两个部分：初始化klass和分配实例</p><h2 id="2-初始化klass"><a href="#2-初始化klass" class="headerlink" title="2. 初始化klass"></a>2. 初始化klass</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/oops/instanceKlass.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InstanceKlass::initialize(TRAPS) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;should_be_initialized()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    initialize_impl(CHECK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    assert(is_initialized(), <span class="string">"sanity check"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里我们继续看<code>initialize_impl()</code>方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/oops/instanceKlass.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> InstanceKlass::initialize_impl(TRAPS) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="function">HandleMark <span class="title">hm</span><span class="params">(THREAD)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  link_class(CHECK);     <span class="comment">// 链接class</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">bool</span> wait = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Step 1</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function">Handle <span class="title">h_init_lock</span><span class="params">(THREAD, init_lock())</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function">ObjectLocker <span class="title">ol</span><span class="params">(h_init_lock, THREAD, h_init_lock() != <span class="literal">NULL</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    Thread *self = THREAD;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span>(is_being_initialized() &amp;&amp; !is_reentrant_initialization(self)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        wait = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">      ol.waitUninterruptibly(CHECK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 3</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (is_being_initialized() &amp;&amp; is_reentrant_initialization(self)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">      DTRACE_CLASSINIT_PROBE_WAIT(recursive, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 4</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (is_initialized()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">      DTRACE_CLASSINIT_PROBE_WAIT(concurrent, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (is_in_error_state()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">      DTRACE_CLASSINIT_PROBE_WAIT(erroneous, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">      <span class="function">ResourceMark <span class="title">rm</span><span class="params">(THREAD)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span>* desc = <span class="string">"Could not initialize class "</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span>* className = external_name();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">size_t</span> msglen = <span class="built_in">strlen</span>(desc) + <span class="built_in">strlen</span>(className) + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">char</span>* message = NEW_RESOURCE_ARRAY(<span class="keyword">char</span>, msglen);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (<span class="literal">NULL</span> == message) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Out of memory: can't create detailed error message</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">          THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), className);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        jio_snprintf(message, msglen, <span class="string">"%s%s"</span>, desc, className);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">          THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), message);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 6</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    set_init_state(being_initialized);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    set_init_thread(self);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Step 7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!is_interface()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    Klass* super_klass = super();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (super_klass != <span class="literal">NULL</span> &amp;&amp; super_klass-&gt;should_be_initialized()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">      super_klass-&gt;initialize(THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!HAS_PENDING_EXCEPTION &amp;&amp; has_nonstatic_concrete_methods()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">      initialize_super_interfaces(THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (HAS_PENDING_EXCEPTION) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">      <span class="function">Handle <span class="title">e</span><span class="params">(THREAD, PENDING_EXCEPTION)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      CLEAR_PENDING_EXCEPTION;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">      &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        EXCEPTION_MARK;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Locks object, set state, and notify all waiting threads</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">        set_initialization_state_and_notify(initialization_error, THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">        CLEAR_PENDING_EXCEPTION;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">      DTRACE_CLASSINIT_PROBE_WAIT(super__failed, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">      THROW_OOP(e());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">  AOTLoader::load_for_klass(<span class="keyword">this</span>, THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Step 8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">    assert(THREAD-&gt;is_Java_thread(), <span class="string">"non-JavaThread in initialize_impl"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    JavaThread* jt = (JavaThread*)THREAD;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">    DTRACE_CLASSINIT_PROBE_WAIT(clinit, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">    <span class="function">PerfClassTraceTime <span class="title">timer</span><span class="params">(ClassLoader::perf_class_init_time(),</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                             ClassLoader::perf_class_init_selftime(),</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                             ClassLoader::perf_classes_inited(),</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                             jt-&gt;get_thread_stat()-&gt;perf_recursion_counts_addr(),</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                             jt-&gt;get_thread_stat()-&gt;perf_timers_addr(),</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">                             PerfClassTraceTime::CLASS_CLINIT)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">    call_class_initializer(THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Step 9</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!HAS_PENDING_EXCEPTION) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">    set_initialization_state_and_notify(fully_initialized, CHECK);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">      debug_only(vtable().verify(tty, <span class="literal">true</span>);)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Step 10 and 11</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">    Handle e(THREAD, PENDING_EXCEPTION);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">    CLEAR_PENDING_EXCEPTION;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line">    JvmtiExport::clear_detected_exception((JavaThread*)THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">      EXCEPTION_MARK;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">      set_initialization_state_and_notify(initialization_error, THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line">      CLEAR_PENDING_EXCEPTION;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">      JvmtiExport::clear_detected_exception((JavaThread*)THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">    DTRACE_CLASSINIT_PROBE_WAIT(error, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (e-&gt;is_a(SystemDictionary::Error_klass())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">      THROW_OOP(e());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">      JavaCallArguments args(e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">      THROW_ARG(vmSymbols::java_lang_ExceptionInInitializerError(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">                vmSymbols::throwable_void_signature(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">                &amp;args);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">  DTRACE_CLASSINIT_PROBE_WAIT(end, <span class="number">-1</span>, wait);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h3 id="2-1-链接"><a href="#2-1-链接" class="headerlink" title="2.1 链接"></a>2.1 链接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/oops/instanceKlass.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> InstanceKlass::link_class_impl(<span class="keyword">bool</span> throw_verifyerror, TRAPS) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (is_linked()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  assert(THREAD-&gt;is_Java_thread(), <span class="string">"non-JavaThread in link_class_impl"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  JavaThread* jt = (JavaThread*)THREAD;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 先链接父类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  Klass* super_klass = super();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (super_klass != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (super_klass-&gt;is_interface()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      <span class="function">ResourceMark <span class="title">rm</span><span class="params">(THREAD)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">      Exceptions::fthrow(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        THREAD_AND_LOCATION,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        vmSymbols::java_lang_IncompatibleClassChangeError(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        <span class="string">"class %s has interface %s as super class"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        external_name(),</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        super_klass-&gt;external_name()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">      );</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    InstanceKlass* ik_super = InstanceKlass::cast(super_klass);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    ik_super-&gt;link_class_impl(throw_verifyerror, CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 链接该类的所有借口</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  Array&lt;Klass*&gt;* interfaces = local_interfaces();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> num_interfaces = interfaces-&gt;length();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; num_interfaces; index++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">    InstanceKlass* interk = InstanceKlass::cast(interfaces-&gt;at(index));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    interk-&gt;link_class_impl(throw_verifyerror, CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (is_linked()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 验证 &amp; 重写</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="function">HandleMark <span class="title">hm</span><span class="params">(THREAD)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">    <span class="function">Handle <span class="title">h_init_lock</span><span class="params">(THREAD, init_lock())</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">    <span class="function">ObjectLocker <span class="title">ol</span><span class="params">(h_init_lock, THREAD, h_init_lock() != <span class="literal">NULL</span>)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!is_linked()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!is_rewritten()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">bool</span> verify_ok = verify_code(throw_verifyerror, THREAD);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">if</span> (!verify_ok) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (is_linked()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 重写类</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">        rewrite_class(CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is_shared()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">        SystemDictionaryShared::check_verification_constraints(<span class="keyword">this</span>, CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 重写完成后链接方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">      link_methods(CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 初始化vtable和itable</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">      ClassLoaderData * loader_data = class_loader_data();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!(is_shared() &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">            loader_data-&gt;is_the_null_class_loader_data())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line">        <span class="function">ResourceMark <span class="title">rm</span><span class="params">(THREAD)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">        vtable().initialize_vtable(<span class="literal">true</span>, CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">        itable().initialize_itable(<span class="literal">true</span>, CHECK_false);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 将类的状态标记为已链接</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">      set_init_state(linked);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">if</span> (JvmtiExport::should_post_class_prepare()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line">        Thread *thread = THREAD;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line">        assert(thread-&gt;is_Java_thread(), <span class="string">"thread-&gt;is_Java_thread()"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line">        JvmtiExport::post_class_prepare((JavaThread *) thread, <span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>class链接的过程就是这样，主要步骤总结如下：</p><ol><li>链接父类和实现的接口</li><li>重写类</li><li>初始化vtable和itable</li><li>将类的状态标记为已链接</li></ol><p>关于重写类和初始化vtable、itable的内容有空新开一章，本文就不描述具体细节了。</p><h3 id="2-2-初始化过程"><a href="#2-2-初始化过程" class="headerlink" title="2.2 初始化过程"></a>2.2 初始化过程</h3><p>这段初始化klass步骤在JVM规范中有详细描述，假设当前类(接口)为C，它持有一个独有的初始化锁LC</p><ol><li>同步锁LC，防止并发导致多次初始化</li><li>如果有其他线程正在初始化C，就释放LC并阻塞当前线程直到那个线程完成初始化</li><li>如果是执行初始化的是当前线程，则表明是递归请求，释放LC并正常完成初始化</li><li>如果C已经被初始化了，则释放LC并正常完成初始化</li><li>如果C的对象处于一个错误状态，则释放LC并抛出NoClassDefFoundError异常</li><li>记录C正在被当前线程初始化并释放LC，初始化类中所有final static字段</li><li>如果C是一个类，初始化其父类和接口</li><li>判断C是否打开断言</li><li>执行类(接口)的初始化方法</li><li>标记C已经完全初始化，并唤醒所有的等待线程</li><li>如果初始化失败，则抛出异常，并将C标记为错误，同时唤醒所有的等待线程</li></ol><p>上文为JVM11规范中的步骤，实际中可以看到hotspot在实现时和规范所写略有偏差，但基本差不多。</p><h2 id="3-分配实例"><a href="#3-分配实例" class="headerlink" title="3. 分配实例"></a>3. 分配实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/oops/instanceKlass.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">instanceOop InstanceKlass::allocate_instance(TRAPS) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">bool</span> has_finalizer_flag = has_finalizer(); <span class="comment">// 是否存在非空finalize()方法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">int</span> size = size_helper();  <span class="comment">// 类的大小</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  instanceOop i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  i = (instanceOop)Universe::heap()-&gt;obj_allocate(<span class="keyword">this</span>, size, CHECK_NULL);  <span class="comment">// 分配对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (has_finalizer_flag &amp;&amp; !RegisterFinalizersAtInit) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    i = register_finalizer(i, CHECK_NULL);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里我们比较关注的是堆空间分配对象环节，</p><h3 id="3-1-堆空间分配对象"><a href="#3-1-堆空间分配对象" class="headerlink" title="3.1 堆空间分配对象"></a>3.1 堆空间分配对象</h3><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">oop MemAllocator::allocate() <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  oop obj = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function">Allocation <span class="title">allocation</span><span class="params">(*<span class="keyword">this</span>, &amp;obj)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    HeapWord* mem = mem_allocate(allocation);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (mem != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      obj = initialize(mem);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> obj;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>很容易可以看到，此处的主流程分为两个部分，内存分配和初始化。</p><h4 id="3-1-1-内存分配"><a href="#3-1-1-内存分配" class="headerlink" title="3.1.1 内存分配"></a>3.1.1 内存分配</h4><p>直接打开代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HeapWord* MemAllocator::mem_allocate(Allocation&amp; allocation) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (UseTLAB) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    HeapWord* result = allocate_inside_tlab(allocation);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (result != NULL) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> allocate_outside_tlab(allocation);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码中，我们可以看到一个很耳熟的东西——TLAB(ThreadLocalAllocBuffer)，默认情况下TLAB是打开状态，而且其对Java性能提升非常显著。首先，先简单介绍一下TLAB的概念，</p><blockquote><p>因为JVM堆空间是所有线程共享的，因此分配一个对象时会锁住整个堆，这样效率就会比较低下。因此JVM在eden区分配了一块空间作为线程的私有缓冲区，这个缓冲区称为TLAB。不同线程不共享TLAB，因此在TLAB中分配对象时是无需上锁的，从而可以快速分配。</p></blockquote><p>在这段代码中，内存分配划分为了两个部分——TLAB内分配和TLAB外分配。</p><h5 id="a-TLAB内分配"><a href="#a-TLAB内分配" class="headerlink" title="a. TLAB内分配"></a>a. TLAB内分配</h5><p>我们先来看看TLAB内分配的过程，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HeapWord* MemAllocator::allocate_inside_tlab(Allocation&amp; allocation) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  HeapWord* mem = _thread-&gt;tlab().allocate(_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (mem != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> mem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> allocate_inside_tlab_slow(allocation);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>同样的在TLAB的分配的过程中，也被拆成了两种情况，一种是直接使用线程现有的TLAB来进行分配，代码如下，在下面的这段代码中，我们可以看到TLAB的分配就只是简单地将top指针向上增加了size大小，并且将原先top的位置分配给了obj，因此分配效率可以说是极速了。(事实上，TLAB就是通过start、top、end等指针标记了TLAB的存储信息以及分配空间)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/threadLocalAllocBuffer.inline.hpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> HeapWord* ThreadLocalAllocBuffer::allocate(<span class="keyword">size_t</span> size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  invariants();     <span class="comment">// 校验TLAB是否合法</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  HeapWord* obj = top();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (pointer_delta(end(), obj) &gt;= size) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    set_top(obj + size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    invariants();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> obj;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>接下来我们来看看TLAB内的慢分配，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HeapWord* MemAllocator::allocate_inside_tlab_slow(Allocation&amp; allocation) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  HeapWord* mem = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  ThreadLocalAllocBuffer&amp; tlab = _thread-&gt;tlab();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (ThreadHeapSampler::enabled()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    tlab.set_back_allocation_end();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    mem = tlab.allocate(_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (mem != <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">      allocation._tlab_end_reset_for_sample = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">return</span> mem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 如果TLAB的剩余空间大于阈值，则保留TLAB，这样就会进入TLAB外分配。在这里，每次TLAB分配失败，该TLAB都会调大该阈值，以防线程重复分配同样大小的对象</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (tlab.<span class="built_in">free</span>() &gt; tlab.refill_waste_limit()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    tlab.record_slow_allocation(_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 计算一个新的TLAB的大小，公式=min&#123;可用空间，期待空间+对象占据空间，最大TLAB空间&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> new_tlab_size = tlab.compute_size(_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 清理原先的TLAB。会将剩余的未使用空间填充进一个假数组，创造EDEN连续的假象，并且将start、end、top等指针全部置为空</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">  tlab.clear_before_allocation();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (new_tlab_size == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 创建一个新的TLAB，空间可能在min_tlab_size到new_tlab_size之间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> min_tlab_size = ThreadLocalAllocBuffer::compute_min_size(_word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">  mem = _heap-&gt;allocate_new_tlab(min_tlab_size, new_tlab_size, &amp;allocation._allocated_tlab_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (mem == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 将分配的空间数据全部清0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (ZeroTLAB) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    Copy::zero_to_words(mem, allocation._allocated_tlab_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 将mem位置分配word_size大小给obj</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">  tlab.fill(mem, mem + _word_size, allocation._allocated_tlab_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="b-TLAB外分配"><a href="#b-TLAB外分配" class="headerlink" title="b. TLAB外分配"></a>b. TLAB外分配</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HeapWord* MemAllocator::allocate_outside_tlab(Allocation&amp; allocation) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  allocation._allocated_outside_tlab = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  HeapWord* mem = _heap-&gt;mem_allocate(_word_size, &amp;allocation._overhead_limit_exceeded);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (mem == <span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> mem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  NOT_PRODUCT(_heap-&gt;check_for_non_bad_heap_word_value(mem, _word_size));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> size_in_bytes = _word_size * HeapWordSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  _thread-&gt;incr_allocated_bytes(size_in_bytes);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> mem;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这里的核心关注点只有一个——堆内存分配，此处以openjdk11的默认GC——G1为例，看一看分配的过程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/g1/g1CollectedHeap.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">HeapWord* G1CollectedHeap::mem_allocate(<span class="keyword">size_t</span> word_size,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                              <span class="keyword">bool</span>*  gc_overhead_limit_was_exceeded) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  assert_heap_not_locked_and_not_at_safepoint();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (is_humongous(word_size)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> attempt_allocation_humongous(word_size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">size_t</span> dummy = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> attempt_allocation(word_size, word_size, &amp;dummy);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在G1中，对象的分配分为了两种形式：大对象分配、普通分配。由于代码比较长，简单描述大对象的分配过程如下：</p><ol><li>检查是否需要GC，如需要则触发GC，因为大对象消耗堆的速度非常快</li><li>计算大对象需要占据多少区块，尝试分配连续的空闲区块</li><li>如果没有足够的连续空间，找到一块包含空闲和不可用的连续区块，尝试扩展</li><li>尝试GC，如果失败达到阈值则分配失败，进行下一步的普通分配</li></ol><p>接下来的普通分配过程较为复杂，本文就不再深入探究了。</p><h4 id="3-1-2-初始化对象"><a href="#3-1-2-初始化对象" class="headerlink" title="3.1.2 初始化对象"></a>3.1.2 初始化对象</h4><p>代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">oop ObjAllocator::initialize(HeapWord* mem) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  mem_clear(mem);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> finish(mem);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>其中<code>mem_clear()</code>方法比较简单，就是将对象除头部以外的数据全部置为0，代码如下，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MemAllocator::mem_clear(HeapWord* mem) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> <span class="keyword">size_t</span> hs = oopDesc::header_size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  oopDesc::set_klass_gap(mem, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  Copy::fill_to_aligned_words(mem + hs, _word_size - hs);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>接下来看看<code>finish()</code>函数，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotspot/share/gc/shared/memAllocator.cpp</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">oop MemAllocator::finish(HeapWord* mem) <span class="keyword">const</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  assert(mem != <span class="literal">NULL</span>, <span class="string">"NULL object pointer"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (UseBiasedLocking) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    oopDesc::set_mark_raw(mem, _klass-&gt;prototype_header());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    oopDesc::set_mark_raw(mem, markOopDesc::prototype());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  oopDesc::release_set_klass(mem, _klass);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> oop(mem);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>还记得对象头中有两个属性mark和metadata吗？<code>finish()</code>方法就是设置对象的头部数据。</p><h3 id="3-2-注册finalize-方法"><a href="#3-2-注册finalize-方法" class="headerlink" title="3.2 注册finalize()方法"></a>3.2 注册finalize()方法</h3><p>由于平时几乎很少用到finalize()，且内部逻辑比较复杂，因此本文暂时不探究finalize的注册机制。</p><h2 id="4-整体流程"><a href="#4-整体流程" class="headerlink" title="4. 整体流程"></a>4. 整体流程</h2><p>整个JVM对象分配的整体流程大致如下，</p><p><img alt="image-20190628025235263" data-src="https://img.cayun.me/2019-06-27-185236.png" class="lazyload"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://docs.oracle.com/javase/specs/jvms/se11/jvms11.pdf" target="_blank" rel="noopener">The Java® Virtual Machine Specification Java SE 11 Edition</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;本文基于openjdk11及hotspot&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="hotspot" scheme="https://www.cayun.me/tags/hotspot/"/>
    
  </entry>
  
  <entry>
    <title>ThreadPoolExecutor源码阅读</title>
    <link href="https://www.cayun.me/java/ThreadPoolExecutor/"/>
    <id>https://www.cayun.me/java/ThreadPoolExecutor/</id>
    <published>2019-05-23T06:46:00.000Z</published>
    <updated>2019-12-13T11:26:51.471Z</updated>
    
    <content type="html"><![CDATA[<p>在阿里巴巴的Java开发手册中看到了线程池比较推荐使用ThreadPoolExecutor，于是每次也都是照葫芦画瓢地使用，对于其中的参数(corePoolSize, maximumPoolSize,keepAliveTime , workQueue)等完全靠着yy去使用。每次用的是时候都感觉心慌慌的，总算是找了个时间来真正地去阅读其源码。</p><a id="more"></a><h1 id="四个主要参数"><a href="#四个主要参数" class="headerlink" title="四个主要参数"></a>四个主要参数</h1><p>在使用ThreadPoolExecutor的时候，我们通常会使用它的如下构造函数，(此处未考虑拒绝策略)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">                   <span class="keyword">int</span> maximumPoolSize,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">                   <span class="keyword">long</span> keepAliveTime,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">                   TimeUnit unit,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">                   BlockingQueue&lt;Runnable&gt; workQueue)</span></pre></td></tr></table></figure><p>在这里主要有四个参数：核心线程池大小、最大线程池大小、存活时间、工作队列。其实看到这四个参数我是很懵的，比如，核心线程池与最大线程池之间的区别、工作队列又是用来做什么的，存活时间指的是谁的存活时间。在讲解源码之前不妨猜猜。</p><h1 id="流程总览"><a href="#流程总览" class="headerlink" title="流程总览"></a>流程总览</h1><p><img alt="image-20190520193752856" data-src="https://img.cayun.me/2019-05-20-113753.png" class="lazyload"></p><p>这个流程粗看没太大问题，但是有一块一方却异常突兀、反常识，就是workQueue和maximum的顺序，在我的想象中应该是先maximum再workQueue。但是事实上的确是先workQueue，再maximum。可以尝试运行下面这段demo，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> tmp = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            pool.execute(() -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                    System.out.println(tmp);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段demo中，不发生意外的时候，执行顺序为(1,12,13),(2,3,4),(5,6,7),(8,9,10),11，每组内部顺序可以混乱。(注意：在真正使用的时候，我们需要将ThreadPoolExecutor当作无序的使用)</p><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h2><p>首先直接看execute()方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> c = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 1. 判断core是否塞得下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        c = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 2. 判断workQueue是否塞得下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            reject(command);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 3. addWorker中判断max是否塞得下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        reject(command);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里ctl是一个设计非常精巧的状态管理器，它其实是一个AtomicInteger，它利用int的前三位来存储当前线程池的状态(RUNNING、SHUTDOWN、STOP、TIDYING、TERMINATED)，后29位用来存储线程数量。</p><p>在这段代码中，我们可以看到对线程的执行策略分为了三个部分：1. core部分  2. workQueue部分  3. max部分。其中workQueue部分比较直观，就是直接调用workQueue.offer(command)将线程加入了待执行队列。那么接下来需要关注的是addWorker()方法。</p><h2 id="addWorker"><a href="#addWorker" class="headerlink" title="addWorker()"></a>addWorker()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 判断firstTask能否被执行</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    retry:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (;;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> c = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            ! (rs == SHUTDOWN &amp;&amp;  <span class="comment">// SHUTDOWN状态不会执行新线程，但是可以执行workQueue中的线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">               ! workQueue.isEmpty()))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (;;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||  <span class="comment">// 最多支持2^29-1个线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))  <span class="comment">// 此处判断max是否塞得下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c)) <span class="comment">// 利用CAS防止并发问题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span> retry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            c = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">continue</span> retry;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 执行新的线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    Worker w = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">            mainLock.lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123;    <span class="comment">// 尝试添加线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123; <span class="comment">// SHUTDOWN状态不会执行新线程，但是可以执行workQueue中的线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (t.isAlive())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                    workers.add(w);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> s = workers.size();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">                        largestPoolSize = s;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">                    workerAdded = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">                mainLock.unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">                t.start();         <span class="comment">// 执行线程</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">                workerStarted = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (! workerStarted)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">            addWorkerFailed(w);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> workerStarted;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>addWorker()这段代码看起来比较复杂，但是如果去除掉一些细节和并发安全相关的代码，整体的代码逻辑就是判断线程是否可以执行，如果可以执行则新建线程执行。在这段代码中，我们可以看到我们的线程被封装到了一个叫做Worker的类中，接下来，我们继续探究Worker的源码。</p><h2 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h2><p>在上面的代码中我们可以看到Worker的执行是通过worker.thread.start()来执行的，先看一下构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Worker(Runnable firstTask) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.firstTask = firstTask;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这里面Worker又作为了Runnable参数传给了Worker.thread。那接下来看run()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    runWorker(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Thread wt = Thread.currentThread();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    Runnable task = w.firstTask;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    w.firstTask = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    w.unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;   <span class="comment">// 获取Task</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            w.lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                 (Thread.interrupted() &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                !wt.isInterrupted())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                wt.interrupt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                beforeExecute(wt, task);  <span class="comment">// 空方法，扩展使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                    task.run();     <span class="comment">// 执行Task</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                    afterExecute(task, thrown);   <span class="comment">// 空方法，扩展使用</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                task = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                w.completedTasks++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                w.unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">        processWorkerExit(w, completedAbruptly);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这段run()方法可以看到ThreadPoolExecutor是通过不停地getTask()来复用线程的，但是到这里，其实我还有一个疑问，就是ThreadPoolExecutor如何保持线程一直处于存活状态的。那这个问题同样通过源码来继续解读。</p><h2 id="getTask"><a href="#getTask" class="headerlink" title="getTask()"></a>getTask()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (;;) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> c = ctl.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            decrementWorkerCount();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 判断是否超时消亡</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// 根据超时设置选择不同的策略获取Task</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            Runnable r = timed ?</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                workQueue.take();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> r;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            timedOut = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            timedOut = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码中我们可以看到此处利用workQueue是阻塞队列的特性来保持core线程一直处于存活状态(workQueue.take)，max线程超时消亡(workQueue.poll)。当然在这段代码中，我们发现也可以通过设置ThreadPoolExecutor的allowCoreThreadTimeOut来使得core线程超时消亡。至于workQueue的内部实现(take和poll)此处就不继续深究下去了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，我们已经知道了ThreadPoolExecutor的整体执行流程以及常用参数的意义，同样也清楚了流程总览中的demo代码的执行结果为何具有顺序性。至于workQueue内部的实现就留到下一次，初步看了一下，感觉其内部也有很多非常有意思的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阿里巴巴的Java开发手册中看到了线程池比较推荐使用ThreadPoolExecutor，于是每次也都是照葫芦画瓢地使用，对于其中的参数(corePoolSize, maximumPoolSize,keepAliveTime , workQueue)等完全靠着yy去使用。每次用的是时候都感觉心慌慌的，总算是找了个时间来真正地去阅读其源码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="多线程" scheme="https://www.cayun.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java8函数式编程</title>
    <link href="https://www.cayun.me/java/Java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.cayun.me/java/Java8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2019-04-18T11:37:00.000Z</published>
    <updated>2019-12-13T11:26:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用lambda表达式，感觉使用起来非常舒服，箭头函数极大增强了代码的表达能力。于是决心花点时间深入地去研究一下java8的函数式。</p><a id="more"></a><h1 id="一、lambda表达式"><a href="#一、lambda表达式" class="headerlink" title="一、lambda表达式"></a>一、lambda表达式</h1><p>先po一个最经典的例子——线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Java7</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        System.out.println(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  &#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// Java8</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> Thread(() -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">      System.out.println(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">  &#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>第一次接触lambda表达式是在创建线程时，比较直观的感受就是lambda表达式相当于匿名类的语法糖，emm～，真甜。不过事实上，lambda表达式并不是匿名类的语法糖，而且经过一段时间的使用，感觉恰恰相反，在使用上匿名类更像是Java中lambda表达式的载体。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>下面的一些使用场景均为个人的一些体会，可能存在不当或遗漏之处。</p><h3 id="1-简化匿名类的编码"><a href="#1-简化匿名类的编码" class="headerlink" title="1. 简化匿名类的编码"></a>1. 简化匿名类的编码</h3><p>上面的创建线程就是一个很好简化编码的例子，此处就不再重复。</p><h3 id="2-减少不必要的方法创建"><a href="#2-减少不必要的方法创建" class="headerlink" title="2. 减少不必要的方法创建"></a>2. 减少不必要的方法创建</h3><p>在Java中，我们经常会遇到这样一种场景，某个方法只会在某处使用且内部逻辑也很简单，在Java8之前我们通常都会创建一个方法，但是事实上我们经常会发现这样写着写着，一个类中的方法可能会变得非常庞杂，严重影响阅读体验，进而影响编码效率。但是如果使用lambda表达式，那么这个问题就可以很容易就解决掉了。</p><p>一个简单的例子，如果我们需要在一个函数中多次打印时间。(这个例子可能有些牵强，但是实际上还是挺常遇见的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        TimeDemo timeDemo = <span class="keyword">new</span> TimeDemo();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        timeDemo.createTime = System.currentTimeMillis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        timeDemo.updateTime = System.currentTimeMillis() + <span class="number">10000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        outputTimeDemo(timeDemo);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputTimeDemo</span><span class="params">(TimeDemo timeDemo)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        Function timestampToDate = timestamp -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> df.format(<span class="keyword">new</span> Date(timestamp));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        System.out.println(timestampToDate.apply(timeDemo.createTime));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        System.out.println(timestampToDate.apply(timeDemo.updateTime));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Function</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="function">String <span class="title">apply</span><span class="params">(<span class="keyword">long</span> timestamp)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeDemo</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> createTime;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> updateTime;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码的outputTimeDemo中我们可以看到，对于时间戳转换的内容，我们并没有额外创建一个方法，而是类似于创建了一个变量来表达。不过，这个时候出现了另一个问题，虽然我们少创建了一个方法，但是我们却多创建了一个接口Function，总有种因小失大的感觉， 不过这个问题，我们在后面的<a href="#java.util.function包">java.util.function包</a>部分可以找到答案。</p><h3 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. 事件处理</h3><p>一个比较常见的例子就是回调。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    execute(<span class="string">"hello world"</span>, () -&gt; System.out.println(<span class="string">"callback"</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String s, Callback callback)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    System.out.println(s);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    callback.callback();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callback</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里，可以发现一点小不同，就是Callback多了一个注解@FunctionalInterface，这个注解主要用于编译期检查，如果我们的接口不符合函数式接口的要求，那编译的时候就会报错。不加也是可以正常执行的。</p><h3 id="4-stream中使用"><a href="#4-stream中使用" class="headerlink" title="4. stream中使用"></a>4. stream中使用</h3><p>这个在后面的<a href="#stream">stream</a>中详解。</p><h2 id="java-util-function包"><a href="#java-util-function包" class="headerlink" title="java.util.function包"></a>java.util.function包</h2><p>在之前的例子中，我们发现使用lambda表达式的时候，经常需要定义一些接口用来辅助我们的编码，这样就会使得本应轻量级的lambda表达式又变得重量级。那是否存在解决方案呢？其实Java8本身已经为我们提供了一些常见的函数式接口，就在java.util.function包下面。</p><table><thead><tr><th>接口</th><th>描述</th></tr></thead><tbody><tr><td>Function&lt;T,R&gt;</td><td>接受一个输入参数，返回一个结果</td></tr><tr><td>Supplier&lt;T&gt;</td><td>无参数，返回一个结果</td></tr><tr><td>Consumer&lt;T&gt;</td><td>接受一个输入参数，并且不返回任何结果</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td>接受两个输入参数的方法，并且返回一个结果</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>接受两个输入参数的操作，并且不返回任何结果</td></tr></tbody></table><p>此处列出最基本的几个，其他的都是在这些的基础上做了一些简单的封装，例如IntFunction&lt;R&gt;就是对Function&lt;T,R&gt;的封装。上面的这些函数式接口已经可以帮助我们处理绝大多数场景了，如果有更复杂的情况，那就得我们自己定义接口了。不过遗憾的是在java.util.function下没找到无参数无返回结果的接口，目前我找到的方案就是自己定义一个接口或者直接使用Runnable接口。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    System.out.println(f.apply(<span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    BiFunction&lt;Integer, Integer, Integer&gt; g = (x, y) -&gt; x + y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    System.out.println(g.apply(<span class="number">1</span>, <span class="number">2</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="lambda表达式和匿名类的区别"><a href="#lambda表达式和匿名类的区别" class="headerlink" title="lambda表达式和匿名类的区别"></a>lambda表达式和匿名类的区别</h2><p>lambda表达式虽然使用时和匿名类很相似，但是还是存在那么一些区别。</p><h3 id="1-this指向不同"><a href="#1-this指向不同" class="headerlink" title="1. this指向不同"></a>1. this指向不同</h3><p>lambda表达式中使用this指向的是外部的类，而匿名类中使用this则指向的是匿名类本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> String test = <span class="string">"test-main"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">new</span> FunctionMain().output();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        Function f = () -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            System.out.println(<span class="string">"1:-----------------"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            System.out.println(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            System.out.println(<span class="keyword">this</span>.test);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        f.outputThis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">new</span> Function() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputThis</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                System.out.println(<span class="string">"2:-----------------"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                System.out.println(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                System.out.println(<span class="keyword">this</span>.test);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        &#125;.outputThis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Function</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        String test = <span class="string">"test-function"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">outputThis</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>如上面这段代码，输出结果如下</p><p><img alt="image-20190417113153242" data-src="https://img.cayun.me/2019-04-17-033153.png" class="lazyload"></p><p>所以如果想使用lambda表达式的同时去访问原类中的变量、方法的是做不到的。</p><h3 id="2-底层实现不同"><a href="#2-底层实现不同" class="headerlink" title="2. 底层实现不同"></a>2. 底层实现不同</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>从编译结果来看，两者的编译结果完全不同。</p><p>首先是匿名类的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        Function&lt;Integer, Integer&gt; f = <span class="keyword">new</span> Function&lt;Integer, Integer&gt;() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> integer + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        System.out.println(f.apply(<span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>编译后的结果如下：</p><p><img alt="image-20190418185503781" data-src="https://img.cayun.me/2019-04-18-105504.png" class="lazyload"></p><p>可以看到ClassMain在编译后生成了两个class，其中ClassMain$1.class就是匿名类生成的class。</p><hr><p>那么接下来，我们再来编译一下lambda版本的。代码和编译结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.Function;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        System.out.println(f.apply(<span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img alt="image-20190418185243575" data-src="https://img.cayun.me/2019-04-18-105243.png" class="lazyload"></p><p>在这里我们可以看到FunctionMain并没有生成第二个class文件。</p><h4 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h4><p>更进一步，我们打开他们的字节码来寻找更多的细节。首先依然是匿名类的方式</p><p><img alt="image-20190418190414990" data-src="https://img.cayun.me/2019-04-18-110415.png" class="lazyload"></p><p>在Code-0这一行，我们可以看到匿名类的方式是通过new一个类来实现的。</p><hr><p>接下来是lambda表达式生成的字节码，</p><p><img alt="image-20190418190726628" data-src="https://img.cayun.me/2019-04-18-110727.png" class="lazyload"></p><p>在lambda表达式的字节码中，我们可以看到我们的lambda表达式被编译成了一个叫做<code>lambda$main$0</code>的静态方法，接着通过invokedynamic的方式进行了调用。</p><h3 id="3-lambda表达式只能替代部分匿名类"><a href="#3-lambda表达式只能替代部分匿名类" class="headerlink" title="3. lambda表达式只能替代部分匿名类"></a>3. lambda表达式只能替代部分匿名类</h3><p>lambda表达式想要替代匿名类是有条件的，即这个匿名类实现的接口必须是函数式接口，即只能有一个抽象方法的接口。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>由于没有实际测试过lambda表达式的性能，且我使用lambda更多是基于编码简洁度的考虑，因此本文就不探讨性能相关问题。</p><p>关于lambda表达式和匿名类的性能对比可以参考官方ppt <a href="https://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/jvmls2013kuksen-2014088.pdf</a></p><h1 id="二、Stream-API"><a href="#二、Stream-API" class="headerlink" title="二、Stream API"></a>二、Stream API</h1><p>Stream API是Java8对集合类的补充与增强。它主要用来对集合进行各种便利的聚合操作或者批量数据操作。</p><h2 id="1-创建流"><a href="#1-创建流" class="headerlink" title="1. 创建流"></a>1. 创建流</h2><p>在进行流操作的第一步是创建一个流，下面介绍几种常见的流的创建方式</p><p><strong>从集合类创建流</strong></p><p>如果已经我们已经有一个集合对象，那么我们可以直接通过调用其stream()方法得到对应的流。如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"la"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">list.stream();</span></pre></td></tr></table></figure><p><strong>利用数组创建流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">String[] strArray = <span class="keyword">new</span> String[]&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"la"</span>&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Stream.of(strArray);</span></pre></td></tr></table></figure><p><strong>利用可变参数创建流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"la"</span>);</span></pre></td></tr></table></figure><p><strong>根据范围创建数值流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">0</span>, <span class="number">100</span>);         <span class="comment">// 不包含最后一个数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">IntStream.rangeClosed(<span class="number">0</span>, <span class="number">99</span>);    <span class="comment">// 包含最后一个数</span></span></pre></td></tr></table></figure><p><strong>BufferReader.lines()</strong></p><p>对于BufferReader而言，它的lines方法也同样可以创建一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"/Users/cayun/.m2/settings.xml"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">br.lines().forEach(System.out::println);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">br.close();</span></pre></td></tr></table></figure><h2 id="2-流操作"><a href="#2-流操作" class="headerlink" title="2. 流操作"></a>2. 流操作</h2><p>在Stream API中，流的操作有两种：Intermediate和Terminal</p><blockquote><p><strong>Intermediate</strong>：一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。<br><strong>Terminal</strong>：一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</p></blockquote><p>除此以外，还有一种叫做short-circuiting的操作</p><blockquote><p>对于一个 intermediate 操作，如果它接受的是一个无限大（infinite/unbounded）的 Stream，但返回一个有限的新 Stream。<br>对于一个 terminal 操作，如果它接受的是一个无限大的 Stream，但能在有限的时间计算出结果。</p></blockquote><p>常见的流操作可以如下归类：</p><p><strong>Intermediate</strong><br>map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</p><p><strong>Terminal</strong><br>forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</p><p><strong>Short-circuiting</strong><br>anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</p><h3 id="常见的流操作详解"><a href="#常见的流操作详解" class="headerlink" title="常见的流操作详解"></a>常见的流操作详解</h3><h4 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach"></a>1. forEach</h4><p>forEach可以说是最常见的操作了，甚至对于List等实现了Collection接口的类可以不创建stream而直接使用forEach。简单地说，forEach就是遍历并执行某个操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>).forEach(System.out::println);</span></pre></td></tr></table></figure><h4 id="2-map"><a href="#2-map" class="headerlink" title="2. map"></a>2. map</h4><p>map也同样是一个非常高频的流操作，用来将一个集合映射为另一个集合。下面代码展示了将[1,2,3,4]映射为[1,4,9,16]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">4</span>).map(x -&gt; x * x).forEach(System.out::println);</span></pre></td></tr></table></figure><p>除此之外，还有一个叫做flatMap的操作，这个操作在映射的基础上又做了一层扁平化处理。这个概念可能比较难理解，那举个例子，我们需要将[“hello”, “world”]转换成[h,e,l,l,o,w,o,r,l,d]，可以尝试一下使用map，那你会惊讶地发现，可能结果不是你想象中的那样。如果不信可以执行下面这段代码，就会发现map与flatMap之间的区别了，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>).map(s -&gt; s.split(<span class="string">""</span>)).forEach(System.out::println);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"--------------"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Stream.of(<span class="string">"hello"</span>, <span class="string">"world"</span>).flatMap(s -&gt; Stream.of(s.split(<span class="string">""</span>))).forEach(System.out::println);</span></pre></td></tr></table></figure><h4 id="3-filter"><a href="#3-filter" class="headerlink" title="3. filter"></a>3. filter</h4><p>filter则实现了过滤的功能，如果只需要[1,2,3,4,5]中的奇数，可以如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">IntStream.rangeClosed(<span class="number">1</span>, <span class="number">5</span>).filter(x -&gt; x % <span class="number">2</span> == <span class="number">1</span>).forEach(System.out::println);</span></pre></td></tr></table></figure><h4 id="4-sorted和distinct"><a href="#4-sorted和distinct" class="headerlink" title="4. sorted和distinct"></a>4. sorted和distinct</h4><p>其中sorted表示排序，distinct表示去重，简单的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;    <span class="comment">// 千万不要用int</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Stream.of(arr).sorted().forEach(System.out::println);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Stream.of(arr).distinct().forEach(System.out::println);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">Stream.of(arr).distinct().sorted().forEach(System.out::println);</span></pre></td></tr></table></figure><h4 id="5-collect"><a href="#5-collect" class="headerlink" title="5. collect"></a>5. collect</h4><p>在流操作中，我们往往需求是从一个List得到另一个List，而不是直接通过forEach来打印。那么这个时候就需要使用到collect了。依然是之前的例子，将[1,2,3,4]转换成[1,4,9,16]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list1= Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(x -&gt; x * x).collect(Collectors.toList());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于IntStream生成的流需要使用mapToObj而不是map</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list2 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">4</span>).mapToObj(x -&gt; x * x).collect(Collectors.toList());</span></pre></td></tr></table></figure><h2 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h2><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>除了普通的stream之外还有parallelStream，区别比较直观，就是stream是单线程执行，parallelStream为多线程执行。parallelStream的创建及使用基本与stream类似，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接创建一个并行流</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">list.parallelStream().map(x -&gt; x * x).forEach(System.out::println);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或者将一个普通流转换成并行流</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">list.stream().parallel().map(x -&gt; x * x).forEach(System.out::println);</span></pre></td></tr></table></figure><p>不过由于是并行执行，parallelStream并不保证结果顺序，同样由于这个特性，如果能使用findAny就尽量不要使用findFirst。</p><p>使用parallelStream时需要注意的一点是，多个parallelStream之间默认使用的是同一个线程池，所以IO操作尽量不要放进parallelStream中，否则会阻塞其他parallelStream。</p><h1 id="三、Optional"><a href="#三、Optional" class="headerlink" title="三、Optional"></a>三、Optional</h1><p>Optional的引入是为了解决空指针异常的问题，事实上在Java8之前，Optional在很多地方已经较为广泛使用了，例如scala、谷歌的Guava库等。</p><p>在实际生产中我们经常会遇到如下这种情况，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Person person = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        String result = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (person != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            Address address = person.address;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (address != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                Country country = address.country;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (country != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">                    result = country.name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        System.out.println(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    Address address;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    Country country;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>每每写到这样的代码，作为编码者一定都会头皮发麻，满心地不想写，但是却不得不写。这个问题如果使用Optional，或许你就能找到你想要的答案了。</p><h2 id="Optional的基本操作"><a href="#Optional的基本操作" class="headerlink" title="Optional的基本操作"></a>Optional的基本操作</h2><h3 id="1-创建Optional"><a href="#1-创建Optional" class="headerlink" title="1. 创建Optional"></a>1. 创建Optional</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Optional.empty();          <span class="comment">// 创建一个空Optional</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Optional.of(T value);      <span class="comment">// 不接受null，会报NullPointerException异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Optional.ofNullable(T value);     <span class="comment">// 可以接受null</span></span></pre></td></tr></table></figure><h3 id="2-获取结果"><a href="#2-获取结果" class="headerlink" title="2. 获取结果"></a>2. 获取结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">get();                                   <span class="comment">// 返回里面的值，如果值为null，则抛异常</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">orElse(T other);                         <span class="comment">// 有值则返回值，null则返回other</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">orElseGet(Supplier other);               <span class="comment">// 有值则返回值，null则由提供的lambda表达式生成值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">orElseThrow(Supplier exceptionSupplier); <span class="comment">// 有值则返回值，null则抛出异常</span></span></pre></td></tr></table></figure><h3 id="3-判断是否为空"><a href="#3-判断是否为空" class="headerlink" title="3. 判断是否为空"></a>3. 判断是否为空</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">isPresent();       <span class="comment">// 判断是否为空</span></span></pre></td></tr></table></figure><p>到这里，我们可能会开始考虑怎么用Optional解决引言中的问题了，于是思考半天，写出了这样一段代码，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Person person = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    String result = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    Optional&lt;Person&gt; per = Optional.ofNullable(person);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (per.isPresent()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        Optional&lt;Address&gt; address = Optional.ofNullable(per.get().address);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (address.isPresent()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            Optional&lt;Country&gt; country = Optional.ofNullable(address.get().country);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (country.isPresent()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                result = Optional.ofNullable(country.get().name).orElse(<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">     &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">     System.out.println(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>啊嘞嘞，感觉不仅没有使得代码变得简单，反而变得更加复杂了。那么很显然这并不是Optional的正确使用方法。接下来的部分才是Optional的正确使用方式。</p><h3 id="4-链式方法"><a href="#4-链式方法" class="headerlink" title="4. 链式方法"></a>4. 链式方法</h3><p>在Optional中也有类似于Stream API中的链式方法map、flatMap、filter、ifPresent。这些方法才是Optional的精髓。此处以最典型的map作为例子，可以看看map的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Objects.requireNonNull(mapper);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!isPresent())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> empty();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>源码很简单，可以看到对于null情况仍然返回null，否则返回处理结果。那么此再来思考一下引言的问题，那就可以很简单地改写成如下的写法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Person person = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    String result = Optional.ofNullable(person)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            .map(per -&gt; per.address)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            .map(address -&gt; address.country)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            .map(country -&gt; country.name).orElse(<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    System.out.println(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>哇哇哇，相比原先的null写法真真是舒服太多了。</p><h4 id="map与flatMap的区别"><a href="#map与flatMap的区别" class="headerlink" title="map与flatMap的区别"></a>map与flatMap的区别</h4><p>这两者的区别，同样使用一个简单的例子来解释一下吧，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        Person person = <span class="keyword">new</span> Person();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        String name = Optional.ofNullable(person).flatMap(p -&gt; p.name).orElse(<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        System.out.println(name);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    Optional&lt;String&gt; name;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里使用的不是map而是flatMap，稍微观察一下，可以发现Person中的name不再是String类型，而是Optional&lt;String&gt;类型了，如果使用map的话，那map的结果就是Optional&lt;Optional&lt;String&gt;&gt;了，很显然不是我们想要的，flatMap就是用来将最终的结果扁平化(简单地描述，就是消除嵌套)的。</p><p>至于filter和ifPresent用法类似，就不再叙述了。</p><h1 id="四、其他一些函数式概念在Java中的实现"><a href="#四、其他一些函数式概念在Java中的实现" class="headerlink" title="四、其他一些函数式概念在Java中的实现"></a>四、其他一些函数式概念在Java中的实现</h1><p>由于个人目前为止也只是初探函数式阶段，很多地方了解也不多，此处只列举两个。(注意：下面的部分应用函数与柯里化对应的是scala中的概念，其他语言中可能略有偏差)</p><h2 id="部分应用函数-偏应用函数"><a href="#部分应用函数-偏应用函数" class="headerlink" title="部分应用函数(偏应用函数)"></a>部分应用函数(偏应用函数)</h2><p>部分应用函数指的是对于一个有n个参数的函数f，但是我们只提供m个参数给它(m &lt; n)，那么我们就可以得到一个部分应用函数，简单地描述一下，如下<br>$$<br>f(x,y,z) = x + y + z<br>$$</p><p>$$<br>g(x,y) = f(x,y,3)<br>$$</p><p>在这里$g$就是$f$的一个部分应用函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">BiFunction&lt;Integer, Integer, Integer&gt; f = (x, y) -&gt; x + y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Integer&gt; g = x -&gt; f.apply(<span class="number">1</span>, x);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">System.out.println(g.apply(<span class="number">2</span>));</span></pre></td></tr></table></figure><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>柯里化就是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。换个描述，如下<br>$$<br>f(x, y, z)  \rightarrow  f(x)(y)(z)<br>$$<br>Java中对柯里化的实现如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; f = x -&gt; y -&gt; x + y;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">System.out.println(f.apply(<span class="number">1</span>).apply(<span class="number">2</span>));</span></pre></td></tr></table></figure><p>因为Java限制，我们不得不写成<code>f.apply(1).apply(2)</code>的形式，不过视觉上的体验与直接写成<code>f(1)(2)</code>相差就很大了。</p><p>柯里化与部分应用函数感觉很相像，不过因为个人几乎未使用过这两者，因此此处就不发表更多见解。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.ibm.com/developerworks/cn/java/j-java-streams-1-brian-goetz/index.html" target="_blank" rel="noopener">java.util.stream 库简介</a><br>[2] <a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" target="_blank" rel="noopener">Java 8 中的 Streams API 详解</a><br>[3] <a href="https://www.jianshu.com/p/63830b7cb743" target="_blank" rel="noopener">了解、接受和利用Java中的Optional(类)</a><br>[4] <a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96" target="_blank" rel="noopener">维基百科-柯里化</a><br>[5] <a href="https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97" target="_blank" rel="noopener">维基百科-λ演算</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用lambda表达式，感觉使用起来非常舒服，箭头函数极大增强了代码的表达能力。于是决心花点时间深入地去研究一下java8的函数式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="函数式编程" scheme="https://www.cayun.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用c语言写一个socks5代理服务器</title>
    <link href="https://www.cayun.me/%E7%BD%91%E7%BB%9C/%E7%94%A8c%E8%AF%AD%E8%A8%80%E5%86%99%E4%B8%80%E4%B8%AAsocks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://www.cayun.me/%E7%BD%91%E7%BB%9C/%E7%94%A8c%E8%AF%AD%E8%A8%80%E5%86%99%E4%B8%80%E4%B8%AAsocks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2019-03-28T18:21:00.000Z</published>
    <updated>2019-12-13T11:26:51.489Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都对ss的底层实现原理非常感兴趣，但是却一直都没有去真正地学习研究过。这次恰好因为服务器被连封两次，借此契机，决定研究一下socks5代理，并写出一个属于自己的socks5代理服务器。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h2><p>参考ss的结构，整个应用包含了两个部分——服务端和客户端。其中客户端的作用是为了实现与服务端之间的自定义通信。</p><p><img alt="image-20190324222403226" data-src="https://img.cayun.me/2019-03-24-142404.png" class="lazyload"></p><h2 id="socket编程的整体流程"><a href="#socket编程的整体流程" class="headerlink" title="socket编程的整体流程"></a>socket编程的整体流程</h2><p><img alt="socket编程基础流程" data-src="https://img.cayun.me/2019-03-25-140709.png" class="lazyload"></p><h2 id="socks5协议"><a href="#socks5协议" class="headerlink" title="socks5协议"></a>socks5协议</h2><p>socks5协议分为三个阶段，握手阶段、建立连接和传输阶段。</p><h3 id="1-握手阶段"><a href="#1-握手阶段" class="headerlink" title="1. 握手阶段"></a>1. 握手阶段</h3><p>在验证阶段，首先客户端会向服务端发送一个包含版本识别码和验证方法选择的消息。格式如下：</p><p><img alt="image-20190325221900380" data-src="https://img.cayun.me/2019-03-25-141900.png" class="lazyload"></p><p>第一位是版本号，对于socks5协议固定是0x05<br>第二位是methods的数量，决定了后面methods的长度<br>最后是nmethods个method，表示客户端的验证方法列表，最常用的两个如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">0x00: 无需认证</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">0x02: 用户名密码验证</span></pre></td></tr></table></figure><hr><p>接下来，服务端从客户端的验证方法列表中选择一个，并返回给客户端，格式如下：</p><p><img alt="image-20190325222748650" data-src="https://img.cayun.me/2019-03-25-142748.png" class="lazyload"></p><p>第一位是协议版本号，固定0x05<br>第二位表明服务端接受的客户端的验证方法。0xFF表示都不接受</p><hr><p>如果这一步选择了无需验证，这个阶段就已经结束了。但是如果选择的是用户名和密码验证，那么接下来客户端还需要与服务端进行用户名密码的验证。</p><p>客户端先发给服务端一条包含用户名和密码的消息，格式如下：</p><p><img alt="image-20190325223752594" data-src="https://img.cayun.me/2019-03-25-143753.png" class="lazyload"></p><p>这个请求包含了五个参数：版本号、用户名长度、用户名、密码长度、密码。</p><hr><p>接下来服务端会响应客户端的请求：</p><p><img alt="image-20190325224052303" data-src="https://img.cayun.me/2019-03-25-144052.png" class="lazyload"></p><p>status为0x00表示验证成功，0x01表示验证失败。</p><h3 id="2-建立连接"><a href="#2-建立连接" class="headerlink" title="2. 建立连接"></a>2. 建立连接</h3><p>验证成功后，就需要正式建立连接了。这一步主要是客户端告诉服务端目标服务器地址。</p><p>首先客户端向服务端发送一条包含目标服务器地址的请求，格式如下：</p><p><img alt="image-20190327230336159" data-src="https://img.cayun.me/2019-03-27-150336.png" class="lazyload"></p><p>CMD有三种情况，0x01表示CONNECT，0x02表示BIND，0x03表示UDP<br>RSV为保留字，固定为0x00<br>ATYP表示后面的地址类型，0x01表示IPv4地址，0x03表示域名，0x04表示IPv6地址<br>DST.ADDR表示目标主机地址，对于域名类型，第一位表示长度，对于IPv4和IPv6分为占4位和16位<br>DST.PORT表示目标主机端口</p><hr><p>接下来服务器需要连接目标主机，然后对客户端的请求作出回应。回应格式如下：</p><p><img alt="image-20190327231221497" data-src="https://img.cayun.me/2019-03-27-151221.png" class="lazyload"></p><p>REP取0x00表示正常返回，其他的表示各种错误，例如0x08表示地址类型不支持<br>BND.ADDR和BND.PORT表示服务器的地址和接口，当CMD为0x01的情况下，绝大多数客户端会忽略这两个字端</p><h3 id="3-传输阶段"><a href="#3-传输阶段" class="headerlink" title="3. 传输阶段"></a>3. 传输阶段</h3><p>传输阶段的时候socks5服务器存粹只是作为一个数据转发的工具，因为在握手阶段客户端就已经和服务器建立了一条socket通道，而建立连接阶段服务器也与目标主机建立了一条socket通道。</p><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>为了简单起见，本次只写一个不需要认证且只支持TCP连接的socks5代理服务器和相应的socks5客户端。同样是为了简单，本次就不写界面了，只写一个命令行程序。</p><h2 id="1-命令行参数解析"><a href="#1-命令行参数解析" class="headerlink" title="1. 命令行参数解析"></a>1. 命令行参数解析</h2><p>参数是一个命令行程序的重要组成部分，我们可以通过这些参数来灵活地让我们的程序执行不同的功能。命令行参数分为两种，短参数和长参数。本文只介绍c语言中短参数的解析(因为简单)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((opt = getopt(argc, argv, <span class="string">"P:csh:p:"</span>)) != EOF) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">switch</span> (opt) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'P'</span>: config.localPort = atoi(optarg); <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'c'</span>: config.client = <span class="number">1</span>; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'s'</span>: config.server = <span class="number">1</span>; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'h'</span>: config.serverHost = optarg; <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">case</span> <span class="string">'p'</span>: config.serverPort = atoi(optarg); <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>c语言中，命令行的短参数解析是通过getopt这个函数来做的，每个字母代表一个参数，如果后面跟着冒号，则代表这个参数后面还有值。在我的程序中，-P [port]代表本地监听端口，-c/-s代表是作为客户端还是服务端启动，若果是作为客户端启动，那么还需要-h和-p参数分别代表socks5服务端的主机名和端口。</p><h2 id="2-打开监听端口"><a href="#2-打开监听端口" class="headerlink" title="2. 打开监听端口"></a>2. 打开监听端口</h2><p>无论是对于socks5代理客户端还是socks5代理服务端，我们都需要打开监听端口。这里或许会有疑问，为什么socks5代理客户端也需要监听端口，其实从应用架构那张图中可以看到，socks5代理客户端在充当客户端的同时也充当了服务端的角色，它相对用户而言，又变成了服务端。那么下面是打开监听端口的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createListeningSocket</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// socket()函数用来创建一个socket，参数可以指定请求协议(TCP/UDP/其他)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> listeningSock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (listeningSock &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> SERVER_SOCKET_CREATE_ERROR;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 给socket设置属性，SO_REUSEADDR表示关闭socket后，仍可继续重用该socket</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> optval;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    setsockopt(listeningSock, SOL_SOCKET, SO_REUSEADDR, &amp;optval, <span class="keyword">sizeof</span>(optval));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">memset</span>(&amp;serverAddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(serverAddr));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    serverAddr.sin_family = AF_INET;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    serverAddr.sin_port = htons(port);   <span class="comment">// htons和htonl是用来将主机字节顺序转换成网络字节顺序</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 绑定socket到本地地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (bind(listeningSock, (struct sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> SERVER_SOCKET_BIND_ERROR;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 开始监听</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (listen(listeningSock, <span class="number">30</span>) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> SERVER_SOCKET_LISTEN_ERROR;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> listeningSock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="3-获取请求数据并进行处理"><a href="#3-获取请求数据并进行处理" class="headerlink" title="3. 获取请求数据并进行处理"></a>3. 获取请求数据并进行处理</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">serverLoop</span><span class="params">(struct Config config, <span class="keyword">int</span> serverSock)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">socklen_t</span> clientAddrLength = <span class="keyword">sizeof</span>(clientAddr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> clientSock = accept(serverSock, (struct sockaddr*)&amp;clientAddr, &amp;clientAddrLength);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (clientSock == <span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            close(serverSock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            handleClientRequest(config, clientSock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        close(clientSock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这里接收请求以及处理请求的过程放入了一个死循环里面进行处理。这块代码是个很神奇的代码，最开始我并没有使用fork()来写，直接在同一个线程里面执行了接收请求和处理请求的逻辑，发现也能正常跑通，但是网页加载速度却异常之慢，于是找到了这样一种很古老的解决方法，就是通过fork()的方式来处理。</p><p>fork()的方式有一块地方比较难以理解，从代码中我们可以看到子进程close了监听的socket，父进程close了用户端的socket。这里其实是利用了这样一个原理，调用了fork()之后，serverSock和clientSock这两个socket在父子进程间共享，只是两者的引用计数都变为了2，而关闭了不属于自己的socket之后，两个socket的引用计数都变为了1，并不会关闭socket文件。这样的话，父进程可以继续监听serverSock，子进程可以继续处理clientSock，两者互不干扰。</p><h2 id="4-处理请求"><a href="#4-处理请求" class="headerlink" title="4. 处理请求"></a>4. 处理请求</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleClientRequest</span><span class="params">(struct Config config, <span class="keyword">int</span> clientSock)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"handle client socket.\n"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (validateSock5Connection(clientSock) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> remoteSock = createSock5Connection(config, clientSock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (remoteSock &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        forwardData(clientSock, remoteSock, <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        forwardData(remoteSock, clientSock, <span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转发数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forwardData</span><span class="params">(<span class="keyword">int</span> srcSock, <span class="keyword">int</span> dstSock, <span class="keyword">int</span> encryption)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">char</span> buffer[<span class="number">8192</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">ssize_t</span> n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> ((n = recv(srcSock, buffer, <span class="number">8000</span>, <span class="number">0</span>)) &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (send(dstSock, buffer, (<span class="keyword">size_t</span>)n, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    shutdown(srcSock, SHUT_RDWR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    shutdown(dstSock, SHUT_RDWR);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>从handleClientRequest()函数中可以看到整个处理过程分别对应socks5协议的三个阶段：握手、建立连接、传输数据。在我的设计中，处于简单考虑，socks5客户端部分只做简单地转发数据，至于握手和建立连接部分则全部由服务端来完成。</p><p>直接来看转发数据部分，转发数据设计成了单向的数据流，A-&gt;B和B-&gt;A方向的数据分别开出两个进程来处理，调用recv()不停地从src读取数据，每次读到数据后，都立即通过send()向dst发送完全相同的数据。</p><p>至于握手和建立连接部分，原理类似，同样是通过recv和send来收发数据，只不过中间根据socks5协议的内容多了一些逻辑操作。</p><h2 id="5-一些其他内容"><a href="#5-一些其他内容" class="headerlink" title="5. 一些其他内容"></a>5. 一些其他内容</h2><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><p>当子进程比父进程先结束，而父进程又没有回收子进程的情况下，就会产生僵尸进程。调用exit结束自己生命的时候，仅仅是使进程退出，仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁。</p><p>处理僵尸进程的一种简单的方式是忽略SIGCHLD信号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">signal(SIGCHLD, SIG_IGN);</span></pre></td></tr></table></figure><p>或者使用waitpid这个函数来处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) &gt; <span class="number">0</span>);</span></pre></td></tr></table></figure><h3 id="让程序后台运行"><a href="#让程序后台运行" class="headerlink" title="让程序后台运行"></a>让程序后台运行</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">pid_t</span> pid;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((pid = fork()) == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  server_loop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span> ) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  close(server_sock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>使程序后台运行的方式，就是通过创建一个子进程来处理主流程，然后干掉自身。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>yyl-bridge分支v1.0 <a href="https://github.com/yunyuliu/yyl-bridge/tree/v1.0" target="_blank" rel="noopener">https://github.com/yunyuliu/yyl-bridge/tree/v1.0</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://tools.ietf.org/html/rfc1928" target="_blank" rel="noopener">SOCKS Protocol Version 5</a><br>[2] <a href="https://tools.ietf.org/html/rfc1929" target="_blank" rel="noopener">Username/Password Authentication for SOCKS V5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都对ss的底层实现原理非常感兴趣，但是却一直都没有去真正地学习研究过。这次恰好因为服务器被连封两次，借此契机，决定研究一下socks5代理，并写出一个属于自己的socks5代理服务器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.cayun.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="c语言" scheme="https://www.cayun.me/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="socks5" scheme="https://www.cayun.me/tags/socks5/"/>
    
  </entry>
  
  <entry>
    <title>ExceptionHandler的执行顺序</title>
    <link href="https://www.cayun.me/spring/ExceptionHandler%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://www.cayun.me/spring/ExceptionHandler%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2019-03-27T14:39:00.000Z</published>
    <updated>2019-12-13T11:26:51.484Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发中经常会遇到统一异常处理的问题，在springMVC中有一种解决方式，使用ExceptionHandler。举个例子，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;IllegalArgumentException<span class="class">.<span class="keyword">class</span>&#125;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Result</span> <span class="title">handleIllegalArgumentException</span>(<span class="title">IllegalArgumentException</span> <span class="title">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        logger.error(e.getLocalizedMessage(), e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Result.fail(e.getMessage());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;RuntimeException<span class="class">.<span class="keyword">class</span>&#125;)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Result</span> <span class="title">handleRuntimeException</span>(<span class="title">RuntimeException</span> <span class="title">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        logger.error(e.getLocalizedMessage(), e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> Result.failure();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>在这段代码中，我们可以看到存在两个异常处理的函数分别处理IllegalArgumentException和RuntimeException，但是转念一想，就会想到一个问题，IllegalArgumentException是RuntimeException的子类，那么对IllegalArgumentException这个异常又会由谁来处理呢？起初在网上看到一些答案，可以通过Order设置，但是经过简单的测试，发现Order并不起任何作用。虽然心中已有猜测，但还是希望能够找到真正可以证明想法的证据，于是便尝试找到这一块的源码。</p><a id="more"></a><h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>排出掉缓存的情况，主动触发一个IllegalArgumentException异常，经过一步步调试，发现调用栈如下:</p><p><img alt="image-20190326180205336" data-src="https://img.cayun.me/2019-03-26-100206.png" class="lazyload"></p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>决定最终选择哪个ExceptionHandler的核心代码为ExceptionHandlerMethodResolver的getMappedMethod方法。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Method <span class="title">getMappedMethod</span><span class="params">(Class&lt;? extends Throwable&gt; exceptionType)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  List&lt;Class&lt;? extends Throwable&gt;&gt; matches = <span class="keyword">new</span> ArrayList&lt;Class&lt;? extends Throwable&gt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> (Class&lt;? extends Throwable&gt; mappedException : <span class="keyword">this</span>.mappedMethods.keySet()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (mappedException.isAssignableFrom(exceptionType)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">      matches.add(mappedException);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!matches.isEmpty()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    Collections.sort(matches, <span class="keyword">new</span> ExceptionDepthComparator(exceptionType));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.mappedMethods.get(matches.get(<span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这个首先找到可以匹配异常的所有ExceptionHandler，然后对其进行排序，取深度最小的那个(即匹配度最高的那个)。</p><p>至于深度比较器的算法如下图，就是做了一个简单的递归，不停地判断父异常是否为目标异常来取得最终的深度。</p><p><img alt="image-20190327224336509" data-src="https://img.cayun.me/2019-03-27-144337.png" class="lazyload"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>源码不长，我们也可以很容易地就找到我们想要的答案——ExceptionHandler的处理顺序是由异常匹配度来决定的，且我们也无法通过其他途径指定顺序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目开发中经常会遇到统一异常处理的问题，在springMVC中有一种解决方式，使用ExceptionHandler。举个例子，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ControllerAdvice&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GlobalExceptionHandler&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ExceptionHandler&lt;/span&gt;(&amp;#123;IllegalArgumentException&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    @&lt;span class=&quot;title&quot;&gt;ResponseBody&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleIllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        logger.error(e.getLocalizedMessage(), e);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Result.fail(e.getMessage());&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ExceptionHandler&lt;/span&gt;(&amp;#123;RuntimeException&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    @&lt;span class=&quot;title&quot;&gt;ResponseBody&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;    &lt;span class=&quot;title&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleRuntimeException&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;RuntimeException&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        logger.error(e.getLocalizedMessage(), e);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Result.failure();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这段代码中，我们可以看到存在两个异常处理的函数分别处理IllegalArgumentException和RuntimeException，但是转念一想，就会想到一个问题，IllegalArgumentException是RuntimeException的子类，那么对IllegalArgumentException这个异常又会由谁来处理呢？起初在网上看到一些答案，可以通过Order设置，但是经过简单的测试，发现Order并不起任何作用。虽然心中已有猜测，但还是希望能够找到真正可以证明想法的证据，于是便尝试找到这一块的源码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://www.cayun.me/categories/spring/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="springMVC" scheme="https://www.cayun.me/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>Java多层跳板机执行远程命令</title>
    <link href="https://www.cayun.me/java/java%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E6%9C%BA%E6%89%A7%E8%A1%8C%E8%BF%9C%E7%A8%8Bssh/"/>
    <id>https://www.cayun.me/java/java%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E6%9C%BA%E6%89%A7%E8%A1%8C%E8%BF%9C%E7%A8%8Bssh/</id>
    <published>2019-03-25T07:29:08.000Z</published>
    <updated>2019-12-13T11:26:51.470Z</updated>
    
    <content type="html"><![CDATA[<p>可能是巧合吧，近期在开发过程中总是会遇到多层跳板机执行远程命令的场景。之前通过shell执行的情况，发现ssh命令存在一个参数<code>-J</code>可以支持多层跳板机，具体可以参考之前的一篇文章——<a href="https://www.cayun.me/linux/ssh%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">ssh多层跳板机解决方法</a>。但是当Java项目尝试去使用ssh执行远程命令时，发现无论是ganymed-ssh-2还是jsch都没有提供相应参数。</p><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>经过一番搜索，恰巧在jsch官网找到<a href="http://www.jcraft.com/jsch/examples/JumpHosts.java.html" target="_blank" rel="noopener">JumpHost的示例</a>，感觉实现方式大开眼界。原理如下图，假设需要通过A、B、C连接D服务器：</p><p><img alt="image-20190325165729882" data-src="https://img.cayun.me/2019-03-25-085730.png" class="lazyload"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>由于官网的demo代码比较啰嗦。于是简化了demo代码，写了一个自己的工具类。</p><h2 id="自己抽出来的工具类"><a href="#自己抽出来的工具类" class="headerlink" title="自己抽出来的工具类"></a>自己抽出来的工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.ChannelExec;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.JSch;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.JSchException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.jcraft.jsch.Session;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SshUtils</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * 按顺序连接ssh服务器，并执行远程命令</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> sshHosts  ssh服务器列表，最后一个为最终的目标服务器</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> command   需要执行的命令</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback  输出回调，格式: (stdout, stderr) -&gt; &#123;&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(List&lt;SshHost&gt; sshHosts, String command, BiConsumer&lt;InputStream, InputStream&gt; callback)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            JSch jsch = <span class="keyword">new</span> JSch();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            jsch.addIdentity(<span class="string">"~/.ssh/id_rsa"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            Session[] sessions = <span class="keyword">new</span> Session[sshHosts.size()];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">            Session session = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sshHosts.size(); i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">                SshHost sshHost = sshHosts.get(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">                    sessions[i] = session = jsch.getSession(sshHost.user, sshHost.host, sshHost.port);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">int</span> assignedPort = session.setPortForwardingL(<span class="number">0</span>, sshHost.host, sshHost.port);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                    sessions[i] = session = jsch.getSession(sshHost.user, <span class="string">"127.0.0.1"</span>, assignedPort);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">                session.setConfig(<span class="string">"StrictHostKeyChecking"</span>, <span class="string">"no"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                session.connect();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">            ChannelExec channel = (ChannelExec)session.openChannel(<span class="string">"exec"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">            channel.setCommand(command);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">            channel.connect();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">            callback.accept(channel.getInputStream(), channel.getErrStream());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = sessions.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                sessions[i].disconnect();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (JSchException | IOException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SshHost</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">        String user;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        String host;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        Integer port;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SshHost</span><span class="params">(String user, String host)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>(user, host, <span class="number">22</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SshHost</span><span class="params">(String user, String host, Integer port)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.user = user;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.host = host;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.port = Optional.ofNullable(port).orElse(<span class="number">22</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="工具类使用demo"><a href="#工具类使用demo" class="headerlink" title="工具类使用demo"></a>工具类使用demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SshUtilsTest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        List&lt;SshUtils.SshHost&gt; sshHosts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        sshHosts.add(<span class="keyword">new</span> SshUtils.SshHost(<span class="string">"root"</span>, <span class="string">"172.16.2.3"</span>, <span class="number">22</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        sshHosts.add(<span class="keyword">new</span> SshUtils.SshHost(<span class="string">"root"</span>, <span class="string">"10.3.2.123"</span>, <span class="number">22</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        sshHosts.add(<span class="keyword">new</span> SshUtils.SshHost(<span class="string">"root"</span>, <span class="string">"10.1.6.107"</span>, <span class="number">22</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        SshUtils.execute(sshHosts, <span class="string">"ls -l"</span>, (stdout, stderr) -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stdout));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            String line;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                    System.out.println(line);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="http://www.jcraft.com/jsch/examples/JumpHosts.java.html" target="_blank" rel="noopener">JSch - Examples - JumpHosts.java</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可能是巧合吧，近期在开发过程中总是会遇到多层跳板机执行远程命令的场景。之前通过shell执行的情况，发现ssh命令存在一个参数&lt;code&gt;-J&lt;/code&gt;可以支持多层跳板机，具体可以参考之前的一篇文章——&lt;a href=&quot;https://www.cayun.me/linu
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="ssh" scheme="https://www.cayun.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>virtualenv虚拟环境原理</title>
    <link href="https://www.cayun.me/python/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8E%9F%E7%90%86/"/>
    <id>https://www.cayun.me/python/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%8E%9F%E7%90%86/</id>
    <published>2019-02-26T13:26:00.000Z</published>
    <updated>2019-12-13T11:26:51.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用过几次python的虚拟环境，感觉非常爽，一直想去了解它的原理，于是借此机会，做了一次源码学习，但由于conda的源码比较复杂，于是此文便以virtualenv作为切入点。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在之前，我一直有如下几个疑惑，在此先抛出来</p><ol><li>python是怎么决定默认包搜索路径？</li><li>激活虚拟环境与直接调用虚拟环境中的python有什么区别？</li><li>虚拟环境是如何修改终端提示的？</li><li>conda和pip安装的包在同一位置吗？</li><li>conda与virtualenv虚拟环境的优先级？</li></ol><a id="more"></a><h1 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h1><h2 id="基础流程"><a href="#基础流程" class="headerlink" title="基础流程"></a>基础流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">1. 安装virtualenv: pip install virtualenv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">2. 创建虚拟环境: virtualenv --no-site-packages venv</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">3. 激活虚拟环境: source venv&#x2F;bin&#x2F;activate</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">4. 退出虚拟环境: deactivate</span></pre></td></tr></table></figure><h2 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h2><p>激活虚拟环境通过<code>source venv/bin/activate</code>命令来搞的，那么我们的切入点就是venv/bin/activate这个shell脚本。</p><p>直接来阅读源码，</p><h3 id="主流程代码"><a href="#主流程代码" class="headerlink" title="主流程代码"></a>主流程代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出虚拟环境</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">deactivate nondestructive</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置VIRTUAL_ENV为venv目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">VIRTUAL_ENV=<span class="string">"/Users/hongshu/tmp/venv"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> VIRTUAL_ENV    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将VIRTUAL_ENV添加到PATH的最前面</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">_OLD_VIRTUAL_PATH=<span class="string">"<span class="variable">$PATH</span>"</span>      <span class="comment"># 保留原先的PATH变量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">PATH=<span class="string">"<span class="variable">$VIRTUAL_ENV</span>/bin:<span class="variable">$PATH</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 销毁PYTHONHOME变量</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$&#123;PYTHONHOME+_&#125;</span>"</span> ] ; <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    _OLD_VIRTUAL_PYTHONHOME=<span class="string">"<span class="variable">$PYTHONHOME</span>"</span>    <span class="comment"># 保存原先的PYTHONHOME</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">unset</span> PYTHONHOME</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">fi</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改终端提示符显示</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;VIRTUAL_ENV_DISABLE_PROMPT-&#125;</span>"</span> ] ; <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    _OLD_VIRTUAL_PS1=<span class="string">"<span class="variable">$&#123;PS1-&#125;</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> [ <span class="string">"x"</span> != x ] ; <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        PS1=<span class="string">"<span class="variable">$&#123;PS1-&#125;</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        PS1=<span class="string">"(`basename \"<span class="variable">$VIRTUAL_ENV</span>\"`) <span class="variable">$&#123;PS1-&#125;</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">fi</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">export</span> PS1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">fi</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消pydoc的别名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> pydoc 2&gt;/dev/null &gt;/dev/null &amp;&amp; <span class="built_in">unalias</span> pydoc || <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置新的pydoc</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">pydoc</span></span> () &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">    python -m pydoc <span class="string">"<span class="variable">$@</span>"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 干掉已经缓存的$PATH</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$&#123;BASH-&#125;</span>"</span> ] || [ -n <span class="string">"<span class="variable">$&#123;ZSH_VERSION-&#125;</span>"</span> ] ; <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">hash</span> -r 2&gt;/dev/null</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">fi</span></span></pre></td></tr></table></figure><h3 id="1-退出虚拟环境"><a href="#1-退出虚拟环境" class="headerlink" title="1. 退出虚拟环境"></a>1. 退出虚拟环境</h3><p>这一步中执行了一条deactivate命令，deactivate其实是一个函数，同时如果仔细想想我们可以发现当我们执行销毁虚拟环境的时候其实就是执行的deactiavte。这两个deactivate就是同一个东西，如果说唯一的区别就是这里多了一个nondestructive作为参数。这个由于与创建的过程强相关，放到后面退出虚拟环境部分讲。</p><h3 id="2-设置VIRTUAL-ENV和PATH"><a href="#2-设置VIRTUAL-ENV和PATH" class="headerlink" title="2. 设置VIRTUAL_ENV和PATH"></a>2. 设置VIRTUAL_ENV和PATH</h3><p>这一步可以说是虚拟环境的核心吧，就是将venv添加到PATH中去。</p><p><strong>疑问</strong> 而且我们可以看到此处包括后面却没有将虚拟环境中的依赖库的位置包含进去，那这又是为何呢？</p><h3 id="3-销毁PYTHONHOME变量"><a href="#3-销毁PYTHONHOME变量" class="headerlink" title="3. 销毁PYTHONHOME变量"></a>3. 销毁PYTHONHOME变量</h3><p>这一步有个特别有趣的东西，可以看到<code>${PYTHONHOME+_}</code>后面有一个+_，这个地方应该是叫做“shell参数扩展”。</p><p>此处${a+B}表示如果a不为空，则返回”B”。</p><p>在下面的脚本中还有${a-B}，表示如果a未定义或为空，则返回”B”。</p><p>更多的可以参考<a href="https://www.jianshu.com/p/c623ef6f2342" target="_blank" rel="noopener">Shell Bash 中的参数扩展</a></p><h3 id="4-修改终端提示符显示"><a href="#4-修改终端提示符显示" class="headerlink" title="4. 修改终端提示符显示"></a>4. 修改终端提示符显示</h3><p>我们每次在激活虚拟环境之后，命令行的显示都会发生变化，如下图</p><p><img alt="image-20190227005558061" data-src="https://img.cayun.me/2019-02-26-165558.png" class="lazyload"></p><p>就是在上方会多出一个关于虚拟环境目录的提示。根据代码，我们也很容易发现是通过对PS1变量的修改来触发的，同样也可以发现如何隐藏掉这个提示，设置环境变量VIRTUAL_ENV_DISABLE_PROMPT即可</p><p><img alt="image-20190227005905253" data-src="https://img.cayun.me/2019-02-26-165906.png" class="lazyload"></p><p>如上图所示，设置环境变量VIRTUAL_ENV_DISABLE_PROMPT之后，venv的提示就不见了，销毁掉该环境变量后就又出来了。</p><h3 id="5-取消pydoc的别名并设置新的pydoc"><a href="#5-取消pydoc的别名并设置新的pydoc" class="headerlink" title="5. 取消pydoc的别名并设置新的pydoc"></a>5. 取消pydoc的别名并设置新的pydoc</h3><p>这一步的意思就是用新的pydoc取代原先的pydoc，至于要取消别名是因为有别名的前提下无法定义函数。下面做个简单的实验。先定义别名再定义函数。</p><p><img alt="image-20190227213725487" data-src="https://img.cayun.me/2019-02-27-133725.png" class="lazyload"></p><p>可以看到存在别名后函数定义错误。但是先定义函数再定义别名却是可以的，这种时候别名会优先被使用，如下图所示</p><p><img alt="image-20190227213952281" data-src="https://img.cayun.me/2019-02-27-133952.png" class="lazyload"></p><h3 id="6-干掉已经缓存的-PATH"><a href="#6-干掉已经缓存的-PATH" class="headerlink" title="6. 干掉已经缓存的$PATH"></a>6. 干掉已经缓存的$PATH</h3><p>因为即使我们设置了新的PATH路径，但是有些不在新的PATH路径的命令会因为缓存原因而被依然能够被执行。这一步没有实验成功，姑且认为可能会存在这种情况吧。</p><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><p>退出虚拟环境调用的是deactivate命令，其实就是在<code>source venv/bin/activate</code>脚本中创建的一个函数而已，如下图所示</p><p><img alt="image-20190227220509106" data-src="https://img.cayun.me/2019-02-27-140509.png" class="lazyload"></p><p>那么结合创建虚拟环境的过程，就可以发现此处做的工作无非就是将几个变量(PATH、PYTHONHOME、PS1)重新恢复了而已。真正需要关注的只有最后一步，最后一步中我们可以看到里面对传参nondestructive做了处理，如果传入了nondestructive，那么就不会销毁到deactivate函数，否则销毁。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最开始留了几个问题，虽然有几个无法从上文中找到答案，但憋着总是很难受，就通过实验的方式揭秘这些问题的答案。</p><p><strong>1. python是怎么决定默认包搜索路径</strong></p><p>在整个激活虚拟环境的过程中，我发现并没有任何对python的包路径进行设置的语句，于是此处产生了两个猜想：</p><ol><li>python的默认包搜索路径在python安装的时候就已经定好了</li><li>python的默认包搜索路径由python所在位置决定</li></ol><p>接下来就是验证哪个猜想是正确的了，于是做了个简单的实验，找一个虚拟环境，将其原封不动地拷贝到一个新的目录下，</p><p><img alt="image-20190301000409284" data-src="https://img.cayun.me/2019-02-28-160409.png" class="lazyload"></p><p>拷贝完成后执行python，发现报错，但是根据报错信息，可以很大概率上觉得猜想2更接近于事实。</p><p>那么接下来，解决掉报错信息，继续执行下去</p><p><img alt="image-20190301000851825" data-src="https://img.cayun.me/2019-02-28-160852.png" class="lazyload"></p><p>可以看到最终结果表明猜想2才是正确的。</p><p><strong>2. 激活虚拟环境与直接调用虚拟环境中的python有什么区别</strong></p><p>从上述虚拟环境激活脚本中可以看到直接调用虚拟环境中的python几乎没有太大区别，真正对运行可能产生影响的是PYTHONHOME变量。</p><p><strong>3. 虚拟环境是如何修改终端提示的</strong></p><p>这个问题在激活虚拟环境的第4步我们其实已经得到了答案，PS1变量决定了终端的提示信息。至于隐藏虚拟环境的终端提示，只需要在.bashrc这类的文件中设置VIRTUAL_ENV_DISABLE_PROMPT环境变量便可以关掉。甚至我们还可以通过VIRTUAL_ENV和PS1变量来自定义自己的终端提示。(ps: 文章中截图中的终端提示python3.7就是利用conda环境变量做的自定义终端提示)</p><p><strong>4. conda和pip安装的包在同一位置吗</strong></p><p>此处测试了一下，的确是安装在同样的目录下的，不过conda应该是通过conda-meta目录来记录自己的数据的。</p><p><img alt="image-20190228230730600" data-src="https://img.cayun.me/2019-02-28-150731.png" class="lazyload"></p><p><strong>5. conda与virtualenv虚拟环境的优先级</strong></p><p><img alt="image-20190301001404636" data-src="https://img.cayun.me/2019-02-28-161404.png" class="lazyload"></p><p>做了个简单实验，可以发现后执行的会覆盖掉先执行的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.jianshu.com/p/c623ef6f2342" target="_blank" rel="noopener">Shell Bash 中的参数扩展</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;用过几次python的虚拟环境，感觉非常爽，一直想去了解它的原理，于是借此机会，做了一次源码学习，但由于conda的源码比较复杂，于是此文便以virtualenv作为切入点。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在之前，我一直有如下几个疑惑，在此先抛出来&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;python是怎么决定默认包搜索路径？&lt;/li&gt;
&lt;li&gt;激活虚拟环境与直接调用虚拟环境中的python有什么区别？&lt;/li&gt;
&lt;li&gt;虚拟环境是如何修改终端提示的？&lt;/li&gt;
&lt;li&gt;conda和pip安装的包在同一位置吗？&lt;/li&gt;
&lt;li&gt;conda与virtualenv虚拟环境的优先级？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://www.cayun.me/categories/python/"/>
    
    
      <category term="python" scheme="https://www.cayun.me/tags/python/"/>
    
      <category term="virtualenv" scheme="https://www.cayun.me/tags/virtualenv/"/>
    
      <category term="虚拟环境" scheme="https://www.cayun.me/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh主题支持conda虚拟环境</title>
    <link href="https://www.cayun.me/%E6%9D%82%E9%A1%B9/oh-my-zsh%E4%B8%BB%E9%A2%98%E6%94%AF%E6%8C%81conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://www.cayun.me/%E6%9D%82%E9%A1%B9/oh-my-zsh%E4%B8%BB%E9%A2%98%E6%94%AF%E6%8C%81conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2019-02-14T07:37:00.000Z</published>
    <updated>2019-12-13T11:26:51.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近使用python的时候经常用到虚拟环境(此处使用的是conda)，虽然虚拟环境用起来各种舒适，但是在命令行中显示起来巨丑。如下图所示，在上方会有一个环境名称，看得眼睛都花了。</p><p><img alt="image-20190214154133566" data-src="https://img.cayun.me/2019-02-14-074133.png" class="lazyload"></p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>经过一番改造，最终的显示效果如下图所示，就是将环境显示在了最右侧，这感觉就完全不一样了。</p><p><img alt="image-20190214154335248" data-src="https://img.cayun.me/2019-02-14-074335.png" class="lazyload"></p><a id="more"></a><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>此番改造是基于使用如下环境的基础上进行的</p><ol><li>命令行使用 zsh + oh-my-zsh</li><li>python环境管理使用conda</li></ol><h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><h4 id="修改zsh主题"><a href="#修改zsh主题" class="headerlink" title="修改zsh主题"></a>修改zsh主题</h4><p>由于之前使用的是ys主题，于是就直接在ys主题的基础上直接进行了修改，如下图所示，</p><p><img alt="image-20190214154951259" data-src="https://img.cayun.me/2019-02-14-074951.png" class="lazyload"></p><p>仿照上方的hg-info的形式添加了一个conda_info，之后在将conda_info插入到合适的显示位置即可，此处我将其插在了exit_code前面，</p><p><img alt="image-20190214155424455" data-src="https://img.cayun.me/2019-02-14-075424.png" class="lazyload"></p><h4 id="关闭conda自带的显示"><a href="#关闭conda自带的显示" class="headerlink" title="关闭conda自带的显示"></a>关闭conda自带的显示</h4><p>修改完了zsh主题后还没完成，还需要将conda默认的显示给关掉，在~/.condarc添加如下语句<code>changeps1: False</code></p><h4 id="修改zsh主题-1"><a href="#修改zsh主题-1" class="headerlink" title="修改zsh主题"></a>修改zsh主题</h4><p>修改.zshrc中的theme属性</p><h2 id="Git项目"><a href="#Git项目" class="headerlink" title="Git项目"></a>Git项目</h2><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p><a href="https://github.com/comeacrossyun/ys-cayun.zsh-theme" target="_blank" rel="noopener">https://github.com/comeacrossyun/ys-cayun.zsh-theme</a></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><ol><li>将ys-cayun.zsh-theme文件拷贝到~/.oh-my-zsh/themes下</li><li>修改~/.zshrc中的theme配置为ys-cayun</li><li>~/.condarc中添加changeps1: False</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近使用python的时候经常用到虚拟环境(此处使用的是conda)，虽然虚拟环境用起来各种舒适，但是在命令行中显示起来巨丑。如下图所示，在上方会有一个环境名称，看得眼睛都花了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.cayun.me/2019-02-14-074133.png&quot; alt=&quot;image-20190214154133566&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h2&gt;&lt;p&gt;经过一番改造，最终的显示效果如下图所示，就是将环境显示在了最右侧，这感觉就完全不一样了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.cayun.me/2019-02-14-074335.png&quot; alt=&quot;image-20190214154335248&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂项" scheme="https://www.cayun.me/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="oh-my-zsh" scheme="https://www.cayun.me/tags/oh-my-zsh/"/>
    
      <category term="conda" scheme="https://www.cayun.me/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>如何保持ssh代理在后台运行</title>
    <link href="https://www.cayun.me/linux/%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81ssh%E4%BB%A3%E7%90%86%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>https://www.cayun.me/linux/%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81ssh%E4%BB%A3%E7%90%86%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</id>
    <published>2019-01-04T15:07:00.000Z</published>
    <updated>2019-12-13T11:26:51.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在ssh命令中有一个-D参数，这个参数可以使得ssh命令能够建立一条socks5代理。</p><p>那socks5代理有什么用？举个简单的例子，公司服务器隔离外网，但是这个时候我们又需要访问一些应用的管理界面，但是内部服务器通常没有图形化界面，无法使用浏览器，这个时候就可以通过socks5建立代理来访问。</p><p>故事就是发生在这里，由于前段时间公司部分服务器禁用外网，导致不得不使用socks5代理来访问。但是但是ssh的socks5连接虽然不难(命令<code>ssh -fD2222 root@192.168.1.2</code>)，但是却存在不小的问题，ssh超过一定时长就会自动断开连接。对于一个希望将socks5长期驻留在后台的需求者来说这是不可忍受的。</p><a id="more"></a><p><strong>问题1</strong> ssh超过一定时长就会自动断开连接</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h3 id="1-autossh"><a href="#1-autossh" class="headerlink" title="1. autossh"></a>1. autossh</h3><p>上面我们遇到了问题1，这个问题还是比较容易解决的，网上搜一下，一下子就能找到相关的解决方案，我这边采用了autossh这个工具来解决这个问题。(autossh的安装过程此处就不详解了)</p><h3 id="2-在切换网络时也能保持连接"><a href="#2-在切换网络时也能保持连接" class="headerlink" title="2. 在切换网络时也能保持连接"></a>2. 在切换网络时也能保持连接</h3><p>autossh的确解决了问题1，但是随着几天的使用，我又发现了一个新的问题</p><p><strong>问题2</strong> 一旦网络长时间断开，或者切换网络，autossh所建立的socks5通道会有两分钟左右的时间无法访问</p><p>于是乎，一个想法就在脑海中诞生了，就是定时检查网络，一旦发生变化，就杀掉原先的autossh进程，然后再创建一个新的进程。下面是代码(仅供参考，部分语句根据机器不同可能需要微调)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> <span class="string">'clean; exit'</span> SIGINT</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> <span class="string">'clean; exit'</span> SIGTERM</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">trap</span> <span class="string">'clean; exit'</span> SIGHUP</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> clean()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">kill</span> $(ps -ef | grep autossh | grep <span class="string">"\-D2222"</span> | awk <span class="string">'&#123;print $2&#125;'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> work()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> :</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        net=$(ifconfig -L en0 | grep status | awk <span class="string">'&#123;print $2&#125;'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> [ <span class="variable">$net</span> = <span class="string">'active'</span> ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">then</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            old=$(ifconfig)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            new=$(ifconfig)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            /usr/<span class="built_in">local</span>/bin/autossh -M 2223 -f -CNo <span class="string">"ProxyJump sysop@192.168.1.1"</span> -D2222 sysop@192.168.1.2</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">while</span> [ <span class="variable">$net</span> = <span class="string">'active'</span> ] &amp;&amp; [ <span class="string">"<span class="variable">$old</span>"</span> = <span class="string">"<span class="variable">$new</span>"</span> ]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">do</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                sleep 1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                net=$(ifconfig -L en0 | grep status | awk <span class="string">'&#123;print $2&#125;'</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                new=$(ifconfig)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">done</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">            clean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">fi</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        sleep 1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">done</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">clean</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">work</span></pre></td></tr></table></figure><p>只需一直保持代码在后台执行即可，不过网络切换时仍然会存在几秒的无法连接的时间，不过相对之前的方式，已经明显在可接受范围之内了。</p><h3 id="3-后续"><a href="#3-后续" class="headerlink" title="3. 后续"></a>3. 后续</h3><h5 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h5><p>此步不详解，mac可能会稍微麻烦，我捣鼓了很久才搞定。</p><h5 id="借助工具访问代理"><a href="#借助工具访问代理" class="headerlink" title="借助工具访问代理"></a>借助工具访问代理</h5><p>对于网页浏览，可以借助一些插件，例如chrome的SwitchyOmega等。</p><p>对于命令行程序的运行，可以使用proxychains。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在ssh命令中有一个-D参数，这个参数可以使得ssh命令能够建立一条socks5代理。&lt;/p&gt;
&lt;p&gt;那socks5代理有什么用？举个简单的例子，公司服务器隔离外网，但是这个时候我们又需要访问一些应用的管理界面，但是内部服务器通常没有图形化界面，无法使用浏览器，这个时候就可以通过socks5建立代理来访问。&lt;/p&gt;
&lt;p&gt;故事就是发生在这里，由于前段时间公司部分服务器禁用外网，导致不得不使用socks5代理来访问。但是但是ssh的socks5连接虽然不难(命令&lt;code&gt;ssh -fD2222 root@192.168.1.2&lt;/code&gt;)，但是却存在不小的问题，ssh超过一定时长就会自动断开连接。对于一个希望将socks5长期驻留在后台的需求者来说这是不可忍受的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://www.cayun.me/categories/linux/"/>
    
    
      <category term="ssh" scheme="https://www.cayun.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Java锁性能定量测试</title>
    <link href="https://www.cayun.me/java/Java%E9%94%81%E6%80%A7%E8%83%BD%E5%AE%9A%E9%87%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://www.cayun.me/java/Java%E9%94%81%E6%80%A7%E8%83%BD%E5%AE%9A%E9%87%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2019-01-04T07:58:46.000Z</published>
    <updated>2019-12-13T11:26:51.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学习Java的过程中，主要有接触到三种锁，于是很好奇这三种锁的性能，本次就是对这三种做一次定量的性能测试。</p><h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>Java版本：JDK1.8</p><p>并发数：300</p><p>读操作时间: 0.02ms</p><p>写操作时间：读操作时间的1倍/2倍</p><p>测试代码：见附录</p><h4 id="三种锁"><a href="#三种锁" class="headerlink" title="三种锁"></a>三种锁</h4><ul><li>ReentrantLock</li><li>synchronized</li><li>ReentrantReadWriteLock</li></ul><a id="more"></a><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><blockquote><p>测试结果仅供参考，时间单位ms</p></blockquote><h4 id="写操作与读操作耗时相等"><a href="#写操作与读操作耗时相等" class="headerlink" title="写操作与读操作耗时相等"></a>写操作与读操作耗时相等</h4><table><thead><tr><th>读写比例</th><th>ReentrantLock</th><th>synchronized</th><th>ReentrantReadWriteLock</th></tr></thead><tbody><tr><td>全读</td><td>7550</td><td>7629</td><td>170</td></tr><tr><td>99:1</td><td>7635</td><td>7890</td><td>1659</td></tr><tr><td>49:1</td><td>7715</td><td>7719</td><td>3128</td></tr><tr><td>9:1</td><td>7724</td><td>7702</td><td>5552</td></tr><tr><td>4:1</td><td>7532</td><td>7573</td><td>7177</td></tr><tr><td>2:1</td><td>7761</td><td>7821</td><td>7958</td></tr><tr><td>1:1</td><td>7613</td><td>7750</td><td>8212</td></tr><tr><td>全写</td><td>7656</td><td>7664</td><td>7622</td></tr></tbody></table><h4 id="写操作耗时为读操作耗时2倍"><a href="#写操作耗时为读操作耗时2倍" class="headerlink" title="写操作耗时为读操作耗时2倍"></a>写操作耗时为读操作耗时2倍</h4><table><thead><tr><th>读写比例</th><th>ReentrantLock</th><th>synchronized</th><th>ReentrantReadWriteLock</th></tr></thead><tbody><tr><td>全读</td><td>7515</td><td>7668</td><td>116</td></tr><tr><td>99:1</td><td>7768</td><td>7883</td><td>1849</td></tr><tr><td>49:1</td><td>7768</td><td>7795</td><td>3285</td></tr><tr><td>9:1</td><td>8317</td><td>8312</td><td>6126</td></tr><tr><td>4:1</td><td>9070</td><td>9120</td><td>9060</td></tr><tr><td>2:1</td><td>9856</td><td>10057</td><td>10608</td></tr><tr><td>1:1</td><td>10979</td><td>11266</td><td>12328</td></tr><tr><td>全写</td><td>14551</td><td>14735</td><td>14545</td></tr></tbody></table><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol><li>Lock与synchronized的耗时基本一致</li><li>读写锁的性能在读操作远大于写多操作的时候性能会比其他两种方式更优</li></ol><h1 id="附录：测试代码"><a href="#附录：测试代码" class="headerlink" title="附录：测试代码"></a>附录：测试代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"ReentrantLock: "</span> + testLockTest(<span class="keyword">new</span> ReentrantLockTest()));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"synchronized: "</span> + testLockTest(<span class="keyword">new</span> SyncLockTest()));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        System.out.println(<span class="string">"ReentrantReadWriteLock: "</span> + testLockTest(<span class="keyword">new</span> ReadWriteLockTest()));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">testLockTest</span><span class="params">(LockTest lockTest)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">300</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> cur = <span class="number">0</span>; cur &lt; <span class="number">1000</span>; cur++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (cur % <span class="number">100</span> == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">                        lockTest.add();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                        lockTest.get();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">                latch.countDown();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">            &#125;).start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        latch.await();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> endTime - startTime;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LockTest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockTest</span> <span class="keyword">implements</span> <span class="title">LockTest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">        lock.lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">            Tools.writeSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">            lock.unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">        lock.lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line">            Tools.readSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line">            lock.unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">64</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncLockTest</span> <span class="keyword">implements</span> <span class="title">LockTest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">65</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">66</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">67</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">68</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">69</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">70</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">71</span></pre></td><td class="code"><pre><span class="line">            Tools.writeSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">72</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">73</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">74</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">75</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">76</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">77</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">78</span></pre></td><td class="code"><pre><span class="line">            Tools.readSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">79</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">80</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">81</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">82</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">83</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> <span class="keyword">implements</span> <span class="title">LockTest</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">84</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">85</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">86</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">87</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">88</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">89</span></pre></td><td class="code"><pre><span class="line">        lock.writeLock().lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">90</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">91</span></pre></td><td class="code"><pre><span class="line">            Tools.writeSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">92</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">93</span></pre></td><td class="code"><pre><span class="line">            lock.writeLock().unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">94</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">95</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">96</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">97</span></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">98</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">99</span></pre></td><td class="code"><pre><span class="line">        lock.readLock().lock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">100</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">101</span></pre></td><td class="code"><pre><span class="line">            Tools.readSleep();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">102</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">103</span></pre></td><td class="code"><pre><span class="line">            lock.readLock().unlock();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">104</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">105</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">106</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">107</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">108</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tools</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">109</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger cntRead = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">110</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger cntWrite = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">111</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">112</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readSleep</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">113</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (cntRead.incrementAndGet() % <span class="number">50</span> == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">114</span></pre></td><td class="code"><pre><span class="line">            sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">115</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">116</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">117</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">118</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeSleep</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">119</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (cntWrite.incrementAndGet() % <span class="number">50</span> == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">120</span></pre></td><td class="code"><pre><span class="line">            sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">121</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">122</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">123</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">124</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> time)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">125</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">126</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(time);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">127</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">128</span></pre></td><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">129</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">130</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">131</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在学习Java的过程中，主要有接触到三种锁，于是很好奇这三种锁的性能，本次就是对这三种做一次定量的性能测试。&lt;/p&gt;
&lt;h4 id=&quot;基本信息&quot;&gt;&lt;a href=&quot;#基本信息&quot; class=&quot;headerlink&quot; title=&quot;基本信息&quot;&gt;&lt;/a&gt;基本信息&lt;/h4&gt;&lt;p&gt;Java版本：JDK1.8&lt;/p&gt;
&lt;p&gt;并发数：300&lt;/p&gt;
&lt;p&gt;读操作时间: 0.02ms&lt;/p&gt;
&lt;p&gt;写操作时间：读操作时间的1倍/2倍&lt;/p&gt;
&lt;p&gt;测试代码：见附录&lt;/p&gt;
&lt;h4 id=&quot;三种锁&quot;&gt;&lt;a href=&quot;#三种锁&quot; class=&quot;headerlink&quot; title=&quot;三种锁&quot;&gt;&lt;/a&gt;三种锁&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ReentrantLock&lt;/li&gt;
&lt;li&gt;synchronized&lt;/li&gt;
&lt;li&gt;ReentrantReadWriteLock&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="性能" scheme="https://www.cayun.me/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="多线程" scheme="https://www.cayun.me/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="锁" scheme="https://www.cayun.me/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Java直接内存分配与释放原理</title>
    <link href="https://www.cayun.me/java/Java%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E9%87%8A%E6%94%BE%E5%8E%9F%E7%90%86/"/>
    <id>https://www.cayun.me/java/Java%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E9%87%8A%E6%94%BE%E5%8E%9F%E7%90%86/</id>
    <published>2018-12-25T04:04:00.000Z</published>
    <updated>2019-12-13T11:26:51.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Java中分配直接内存大概有如下三种主要方式：</p><ol><li>Unsafe.allocateMemory()</li><li>ByteBuffer.allocateDirect()</li><li>native方法</li></ol><h1 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h1><p>Java提供了Unsafe类用来进行直接内存的分配与释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">long</span> <span class="title">allocateMemory</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span></pre></td></tr></table></figure><a id="more"></a><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectMemoryMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        Unsafe unsafe = getUnsafe();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">long</span> address = unsafe.allocateMemory(<span class="number">10000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">// System.out.println(address);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                <span class="comment">// unsafe.freeMemory(address);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// Unsafe无法直接使用，需要通过反射来获取</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            Class clazz = Unsafe<span class="class">.<span class="keyword">class</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            Field field = clazz.getDeclaredField(<span class="string">"theUnsafe"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> (Unsafe) field.get(<span class="keyword">null</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | NoSuchFieldException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>下面为这段代码的演示效果，其中JVM最大内存设为64M，而真实内存则可以无限增长。</p><p><img alt="image-20181225122431853" data-src="https://img.cayun.me/2018-12-25-042432.png" class="lazyload"></p><h1 id="DirectByteBuffer类"><a href="#DirectByteBuffer类" class="headerlink" title="DirectByteBuffer类"></a>DirectByteBuffer类</h1><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>虽然Unsafe可以通过反射调用来进行内存分配，但是按照其设计方式，它并不是给开发者来使用的，而且Unsafe里面的方法也十分原始，更像是一个底层设施。而其上层的封装则是DirectByteBuffer，这个才是最终留给开发者使用的。DirectByteBuffer的分配是通过<code>ByteBuffer.allocateDirect(int capacity)</code>方法来实现的。</p><p>DirectByteBuffer申请内存的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 计算需要分配的内存大小</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">int</span> ps = Bits.pageSize();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 告诉内存管理器要分配内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    Bits.reserveMemory(size, cap);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 分配直接内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> base = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        base = unsafe.allocateMemory(size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Bits.unreserveMemory(size, cap);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> x;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    unsafe.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 计算内存的地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        address = base;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 创建Cleaner</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    att = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>整个DirectByteBuffer分配过程中，比较需要关注的Bits.reserveMemory()和Cleaner,Deallocator，其中Bits.reserveMemory()与分配相关，Cleaner、Deallocator则与内存释放相关。</p><h3 id="Bits-reserveMemory"><a href="#Bits-reserveMemory" class="headerlink" title="Bits.reserveMemory()"></a>Bits.reserveMemory()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reserveMemory</span><span class="params">(<span class="keyword">long</span> size, <span class="keyword">int</span> cap)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 初始化maxMemory，就是使用-XX:MaxDirectMemorySize指定的最大直接内存大小</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!memoryLimitSet &amp;&amp; VM.isBooted()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        maxMemory = VM.maxDirectMemory();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        memoryLimitSet = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 第一次先采取最乐观的方式直接尝试告诉Bits要分配内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (tryReserveMemory(size, cap)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">final</span> JavaLangRefAccess jlra = SharedSecrets.getJavaLangRefAccess();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 尝试执行Cleaner来释放直接内存，直到内存空间足够</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (jlra.tryHandlePendingReference()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (tryReserveMemory(size, cap)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// GC</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    System.gc();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 按照1ms,2ms,4ms,...,256ms的等待间隔尝试9次分配内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">long</span> sleepTime = <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> sleeps = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (tryReserveMemory(size, cap)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (sleeps &gt;= MAX_SLEEPS) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (!jlra.tryHandlePendingReference()) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">                    Thread.sleep(sleepTime);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">                    sleepTime &lt;&lt;= <span class="number">1</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">                    sleeps++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line">                    interrupted = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(<span class="string">"Direct buffer memory"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (interrupted) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">            Thread.currentThread().interrupt();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// -XX:MaxDirectMemorySize限制的是总cap，而不是真实的内存使用量，(在页对齐的情况下，真实内存使用量和总cap是不同的)</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryReserveMemory</span><span class="params">(<span class="keyword">long</span> size, <span class="keyword">int</span> cap)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">long</span> totalCap;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">while</span> (cap &lt;= maxMemory - (totalCap = totalCapacity.get())) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (totalCapacity.compareAndSet(totalCap, totalCap + cap)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            reservedMemory.addAndGet(size);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            count.incrementAndGet();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h2><p>内存释放是通过Cleaner和Deallocator来实现的。</p><h3 id="Deallocator"><a href="#Deallocator" class="headerlink" title="Deallocator"></a>Deallocator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deallocator</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe = Unsafe.getUnsafe();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> address;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Deallocator</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> size, <span class="keyword">int</span> capacity)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">assert</span> (address != <span class="number">0</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.address = address;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.size = size;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            <span class="comment">// Paranoia</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        unsafe.freeMemory(address);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        address = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        Bits.unreserveMemory(size, capacity);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这个类中主要方法为run()，里面的步骤也很简单，包含两步</p><ul><li>使用unsafe释放内存</li><li>利用Bits管理内存的释放，就是标记一下该内存已释放</li></ul><p>每个DirectByteBuffer都有一个相对应的Deallocator，而Deallocator则是由Cleaner来进行调度。</p><h3 id="Cleaner"><a href="#Cleaner" class="headerlink" title="Cleaner"></a>Cleaner</h3><p>Cleaner的数据结构为一个双向链表，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Cleaner first = <span class="keyword">null</span>;  <span class="comment">// 链表的头节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Cleaner next = <span class="keyword">null</span>;  <span class="comment">// 下一个节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Cleaner prev = <span class="keyword">null</span>;  <span class="comment">// 上一个节点</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable thunk;   <span class="comment">// 存放Deallocator</span></span></pre></td></tr></table></figure><p>Cleaner中主要包含如下操作，add, remove,clean</p><h4 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h4><p><strong>1. add</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Cleaner <span class="title">add</span><span class="params">(Cleaner var0)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        var0.next = first;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        first.prev = var0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    first = var0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> var0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>add操作就是不断地将新的Cleaner节点添加在链表头部，之后将头节点指针指向新的Cleaner</p><p><strong>2. remove</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Cleaner var0)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (var0.next == var0) &#123; <span class="comment">// 已经移除，防止重复移除</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (first == var0) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (var0.next != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                first = var0.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                first = var0.prev;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (var0.next != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">            var0.next.prev = var0.prev;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (var0.prev != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            var0.prev.next = var0.next;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        var0.next = var0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        var0.prev = var0;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>remove操作就是将Cleaner节点从链表中删除</p><p><strong>3. clean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (remove(<span class="keyword">this</span>)) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">this</span>.thunk.run();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable var2) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (System.err != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                        (<span class="keyword">new</span> Error(<span class="string">"Cleaner terminated abnormally"</span>, var2)).printStackTrace();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                    System.exit(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>clean操作则是移除Cleaner节点并调用Deallocator的run()方法</p><h4 id="清理过程"><a href="#清理过程" class="headerlink" title="清理过程"></a>清理过程</h4><p><strong>疑问</strong> Cleaner.clean()又是由谁在何时调用的呢？</p><p>仔细观察可以发现，Cleaner继承了PhantomReference，其referent为DirectByteBuffer</p><h5 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h5><p>在Reference初次加载的过程中会调用一段静态代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> (ThreadGroup tgn = tg;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">         tgn != <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">         tg = tgn, tgn = tg.getParent());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    Thread handler = <span class="keyword">new</span> ReferenceHandler(tg, <span class="string">"Reference Handler"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    handler.setPriority(Thread.MAX_PRIORITY);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    handler.setDaemon(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    handler.start();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// provide access in SharedSecrets</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    SharedSecrets.setJavaLangRefAccess(<span class="keyword">new</span> JavaLangRefAccess() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        <span class="meta">@Override</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryHandlePendingReference</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> tryHandlePending(<span class="keyword">false</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>这段代码中包含了两种可以调用Cleaner的方式：</p><ul><li>ReferenceHandler，会不停地循环调用tryHandlePending</li><li>SharedSecrets.JavaLangRefAccess，在Bits.reserveMemory()中被调用</li></ul><p>事实上直接内存的回收过程也的确是由这两种方式混合组成，这两种方式有一个共同点，他们都会调用Reference.tryHandlePending()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryHandlePending</span><span class="params">(<span class="keyword">boolean</span> waitForNotify)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    Reference&lt;Object&gt; r;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    Cleaner c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">                r = pending;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">                c = r <span class="keyword">instanceof</span> Cleaner ? (Cleaner) r : <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">                pending = r.discovered;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">                r.discovered = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (waitForNotify) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">                    lock.wait();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">return</span> waitForNotify;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        Thread.yield();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">        c.clean();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    ReferenceQueue&lt;? <span class="keyword">super</span> Object&gt; q = r.queue;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>其中pending和discovered由JVM来操作，两个共同组成一个等待队列链表，对于PhantomReference的情况，当对象不存在其他引用，便会直接加入等待队列。每当等待队列中出现Cleaner，就会执行其clean()方法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1. 整个DirectByteBuffer的分配与释放流程如下</p><p><img alt="image-20181225181100276" data-src="https://img.cayun.me/2018-12-25-101100.png" class="lazyload"></p><p>2. -XX:MaxDirectMemorySize参数只对由DirectByteBuffer分配的内存有效，对Unsafe直接分配的内存无效</p><h1 id="native方法"><a href="#native方法" class="headerlink" title="native方法"></a>native方法</h1><p><strong>疑问</strong> native方法中分配的内存是否是属于DirectByteBuffer对象呢?</p><p>这个疑问来自于一次内存泄漏问题的排查，一直没有机会去研究，正好借这次机会寻找一下该问题的答案。</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>写了一个简单的demo程序如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// java部分</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">allocateMemory</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        System.setProperty(<span class="string">"java.library.path"</span>, <span class="string">"."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        System.loadLibrary(<span class="string">"nativemain"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        NativeMain nativeMain = <span class="keyword">new</span> NativeMain();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">                nativeMain.allocateMemory();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// c++实现部分</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"jni.h"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"NativeMain.h"</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_NativeMain_allocateMemory</span><span class="params">(JNIEnv *, jobject)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">char</span> *ptr = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img alt="image-20181225185252446" data-src="https://img.cayun.me/2018-12-25-105253.png" class="lazyload"></p><p><img alt="image-20181225185325785" data-src="https://img.cayun.me/2018-12-25-105326.png" class="lazyload"></p><p>运行发现native方法分配的内存并不会产生DirectByteBuffer对象，同样的也不受-XX:MaxDirectMemorySize影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Java中分配直接内存大概有如下三种主要方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unsafe.allocateMemory()&lt;/li&gt;
&lt;li&gt;ByteBuffer.allocateDirect()&lt;/li&gt;
&lt;li&gt;native方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Unsafe类&quot;&gt;&lt;a href=&quot;#Unsafe类&quot; class=&quot;headerlink&quot; title=&quot;Unsafe类&quot;&gt;&lt;/a&gt;Unsafe类&lt;/h1&gt;&lt;p&gt;Java提供了Unsafe类用来进行直接内存的分配与释放&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;allocateMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; var1)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;freeMemory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; var1)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="内存" scheme="https://www.cayun.me/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>ssh多层跳板机解决方法</title>
    <link href="https://www.cayun.me/linux/ssh%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://www.cayun.me/linux/ssh%E5%A4%9A%E5%B1%82%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2018-12-06T14:37:00.000Z</published>
    <updated>2019-12-13T11:26:51.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>仿真环境因被入侵而关闭外网，进入仿真环境需要2层跳板机，图示如下(ps: ssh端口均使用2222，而不是默认的22)</p><p><img alt="image-20181129191348692" data-src="https://img.cayun.me/2018-11-29-111349.png" class="lazyload"></p><a id="more"></a><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="A-直接从本机跳转到10-203"><a href="#A-直接从本机跳转到10-203" class="headerlink" title="A. 直接从本机跳转到10-203"></a>A. 直接从本机跳转到10-203</h2><p>通过-J参数设置跳转代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh -p 2222 -J root@10-140:2222,root@120-99:2222 root@10-203</span></pre></td></tr></table></figure><h2 id="B-从本地直接连接到10-203上的数据库，端口号为3306"><a href="#B-从本地直接连接到10-203上的数据库，端口号为3306" class="headerlink" title="B. 从本地直接连接到10-203上的数据库，端口号为3306"></a>B. 从本地直接连接到10-203上的数据库，端口号为3306</h2><p>1. 将10-203的3306端口映射为本地的3306</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh -NL 3306:10-203:3306 -J root@10-140:2222 root@120-99 -p2222</span></pre></td></tr></table></figure><p>2. 本机的mysql连接设置为127.0.0.1:3306</p><h2 id="C-vncviewer访问10-204上的vnc"><a href="#C-vncviewer访问10-204上的vnc" class="headerlink" title="C. vncviewer访问10-204上的vnc"></a>C. vncviewer访问10-204上的vnc</h2><p>1. 首先在本机到120-99之间建立一条sock5通道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ssh -N -J root@10-140:2222 -D 2222 root@120-99 -p2222</span></pre></td></tr></table></figure><p>2. 配置vncviewer的代理</p><p><img alt="image-20181129192855570" data-src="https://img.cayun.me/2018-11-29-112855.png" class="lazyload"></p><h2 id="D-将文件从本机上传到10-203"><a href="#D-将文件从本机上传到10-203" class="headerlink" title="D. 将文件从本机上传到10-203"></a>D. 将文件从本机上传到10-203</h2><p>与ssh类似，scp也支持跳转代理参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">scp -o <span class="string">"ProxyJump root@10-140:2222,root@120-99:2222"</span> -P 2222 tmp.txt root@10-203:~</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;仿真环境因被入侵而关闭外网，进入仿真环境需要2层跳板机，图示如下(ps: ssh端口均使用2222，而不是默认的22)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.cayun.me/2018-11-29-111349.png&quot; alt=&quot;image-20181129191348692&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://www.cayun.me/categories/linux/"/>
    
    
      <category term="ssh" scheme="https://www.cayun.me/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>记一次Font导致JVM堆外内存泄漏分析</title>
    <link href="https://www.cayun.me/java/%E8%AE%B0%E4%B8%80%E6%AC%A1Font%E5%AF%BC%E8%87%B4JVM%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/"/>
    <id>https://www.cayun.me/java/%E8%AE%B0%E4%B8%80%E6%AC%A1Font%E5%AF%BC%E8%87%B4JVM%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</id>
    <published>2018-11-27T10:12:00.000Z</published>
    <updated>2019-12-13T11:26:51.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>双11期间，公司的某个Java服务内存占用达到37g，但是该应用的JVM配置为<code>-Xms6g -Xmx6g</code></p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>主要是涉及到了图片文字合成业务</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>下面是问题代码的简化版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, FontFormatException, InterruptedException, NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/cayun/PingFang.ttc"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">            run(file);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException, FontFormatException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        BufferedImage blankImage = <span class="keyword">new</span> BufferedImage(<span class="number">100</span>, <span class="number">100</span>, BufferedImage.TYPE_INT_RGB);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        Graphics2D g = blankImage.createGraphics();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        Font font = Font.createFont(Font.TRUETYPE_FONT, file);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        font = font.deriveFont(<span class="number">12.0f</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        g.setFont(font);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        g.drawString(<span class="string">"hello"</span>, <span class="number">12</span>, <span class="number">12</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a><h2 id="泄漏原因"><a href="#泄漏原因" class="headerlink" title="泄漏原因"></a>泄漏原因</h2><h3 id="原因概述"><a href="#原因概述" class="headerlink" title="原因概述"></a>原因概述</h3><p>每次new Font()之后，调用g.drawString()方法都会在Non-Heap区域分配一块内存且不回收</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>g.drawString()的调用栈如下，</p><p><code>SunGraphics2D.drawString(String, int, int)</code> -&gt; <code>ValidatePipe.drawString(SunGraphics2D, String, double, double)</code> -&gt; <code>SunGraphics2D.getFontInfo()</code> -&gt; <code>SunGraphics2D.checkFontInfo</code> -&gt; <code>Font2D.getStrike(Font, AffineTransform, AffineTransform, int, int)</code> -&gt; <code style="color:red;">Font2D.getStrike(FontStrikeDesc, boolean)</code>-&gt;<code>FileFont.createStrike(FontStrikeDesc)</code> -&gt; … -&gt; <code>T2KFontScaler.&lt;init&gt;(Font2D, int, boolean, int)</code> -&gt; <code style="color:red;">T2KFontScaler.initNativeScaler(...)</code></p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><blockquote><p>在调用栈中第二个标红的部分</p></blockquote><p>new T2KFontScaler() 时会调用 T2KFontScaler.initNativeScaler()这个native方法，这个native方法会在Non-Heap部分分配内存，且之后也没有相应的回收机制。</p><h4 id="demo代码-amp-效果图"><a href="#demo代码-amp-效果图" class="headerlink" title="demo代码&amp;效果图"></a>demo代码&amp;效果图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, FontFormatException, InterruptedException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, ClassNotFoundException, InstantiationException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/System/Library/Fonts/AquaKana.ttc"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">        Font font = Font.createFont(Font.TRUETYPE_FONT, file);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        font = font.deriveFont(<span class="number">12.0f</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        BufferedImage blankImage = <span class="keyword">new</span> BufferedImage(<span class="number">100</span>, <span class="number">100</span>, BufferedImage.TYPE_INT_RGB);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">        Graphics2D g = blankImage.createGraphics();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">        g.setFont(font);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// T2KFontScaler无法通过new的方式创建，此处使用反射创建</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        Class clazz = Class.forName(<span class="string">"sun.font.T2KFontScaler"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        Constructor constructor = clazz.getConstructor(Font2D<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>, <span class="title">boolean</span>.<span class="title">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            constructor.newInstance(((SunGraphics2D) g).getFontInfo().font2D, <span class="number">0</span>, <span class="keyword">true</span>, <span class="number">80005872</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p><img alt="image-20181127183725026" data-src="https://img.cayun.me/2018-11-27-103725.png" class="lazyload"></p><h3 id="辅助证明：JDK已知bug"><a href="#辅助证明：JDK已知bug" class="headerlink" title="辅助证明：JDK已知bug"></a>辅助证明：JDK已知bug</h3><p><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=7074159" target="_blank" rel="noopener">JDK-7074159 : run out of memory</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="为字体做个缓存"><a href="#为字体做个缓存" class="headerlink" title="为字体做个缓存"></a>为字体做个缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Font font = <span class="keyword">null</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, FontFormatException, InterruptedException, NoSuchMethodException, IllegalAccessException, InvocationTargetException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"/Users/cayun/PingFang.ttc"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">            run(file);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">            Thread.sleep(<span class="number">1</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException, FontFormatException, NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">        BufferedImage blankImage = <span class="keyword">new</span> BufferedImage(<span class="number">100</span>, <span class="number">100</span>, BufferedImage.TYPE_INT_RGB);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        Graphics2D g = blankImage.createGraphics();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">        <span class="keyword">if</span> (font == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">                <span class="keyword">if</span> (font == <span class="keyword">null</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">                    font = Font.createFont(Font.TRUETYPE_FONT, file);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">        font = font.deriveFont(<span class="number">12.0f</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">        g.setFont(font);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        g.drawString(<span class="string">"hello"</span>, <span class="number">12</span>, <span class="number">12</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="原因详解"><a href="#原因详解" class="headerlink" title="原因详解"></a>原因详解</h2><p>这个解决方法看起来有点奇怪，或许很容易就会有这样一个疑问：明明导致内存泄漏的是g.drawString()方法，却为何要对Font做缓存？</p><p>为了简单说明原因，我们先定义两种方案</p><ol><li>方案1: 不使用缓存，就是原先会导致内存泄漏的方案</li><li>方案2: 对字体做缓存</li></ol><h3 id="具体原因"><a href="#具体原因" class="headerlink" title="具体原因"></a>具体原因</h3><p>现在来看调用栈部分第一个标红的位置，源码如下</p><p><img alt="image-20181122122215650" data-src="https://img.cayun.me/2018-11-22-042215.png" class="lazyload"></p><h1 id="快速判断此类问题的方法"><a href="#快速判断此类问题的方法" class="headerlink" title="快速判断此类问题的方法"></a>快速判断此类问题的方法</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">jmap -histo &lt;pid&gt; | grep FontScaler</span></pre></td></tr></table></figure><p>如果该对象特别多，那极大可能是由于这个原因导致</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;双11期间，公司的某个Java服务内存占用达到37g，但是该应用的JVM配置为&lt;code&gt;-Xms6g -Xmx6g&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h1&gt;&lt;h2 id=&quot;业务&quot;&gt;&lt;a href=&quot;#业务&quot; class=&quot;headerlink&quot; title=&quot;业务&quot;&gt;&lt;/a&gt;业务&lt;/h2&gt;&lt;p&gt;主要是涉及到了图片文字合成业务&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;p&gt;下面是问题代码的简化版本&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FontMain&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, FontFormatException, InterruptedException, NoSuchMethodException, IllegalAccessException, InvocationTargetException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        File file = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;string&quot;&gt;&quot;/Users/cayun/PingFang.ttc&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;            run(file);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;            Thread.sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(File file)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, FontFormatException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        BufferedImage blankImage = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedImage(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, BufferedImage.TYPE_INT_RGB);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        Graphics2D g = blankImage.createGraphics();&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        Font font = Font.createFont(Font.TRUETYPE_FONT, file);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        font = font.deriveFont(&lt;span class=&quot;number&quot;&gt;12.0f&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        g.setFont(font);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        g.drawString(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.cayun.me/categories/Java/"/>
    
    
      <category term="Java" scheme="https://www.cayun.me/tags/Java/"/>
    
      <category term="内存泄漏" scheme="https://www.cayun.me/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    
      <category term="Non-Heap" scheme="https://www.cayun.me/tags/Non-Heap/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB初试</title>
    <link href="https://www.cayun.me/MongoDB/MongoDB%E5%88%9D%E8%AF%95/"/>
    <id>https://www.cayun.me/MongoDB/MongoDB%E5%88%9D%E8%AF%95/</id>
    <published>2018-09-21T06:00:00.000Z</published>
    <updated>2019-12-13T11:26:51.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">brew install mongodb</span></pre></td></tr></table></figure><p>创建/data/db目录，mongodb默认的数据库目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">sudo chown -R &#123;用户名&#125; /data/db</span></pre></td></tr></table></figure><p>启动mongodb</p><p><code>mongod</code> 或 <code>brew services start mongodb</code></p><p>查询mongodb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另起窗口　</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mongo</span></pre></td></tr></table></figure><a id="more"></a><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">show dbs  <span class="comment"># 显示已经存在的数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">use &#123;dbname&#125; <span class="comment"># 使用(创建)数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db <span class="comment"># 显示当前数据库</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出查询</span></span></pre></td></tr></table></figure><p>在MongoDB中有一个概念叫做集合(collection)，与mysql中的表比较类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 查看数据库中的集合，下面两条均可</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">show collections</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">show tables</span></pre></td></tr></table></figure><blockquote><p>下面的操作均在一个叫做students的集合中</p></blockquote><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><h3 id="单条插入"><a href="#单条插入" class="headerlink" title="单条插入"></a>单条插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 下面两种均可</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.insert(&#123;name: &#39;小明&#39;, height: 180, age: 18&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db.students.insertOne(&#123;name: &#39;小王&#39;, height: 160&#125;)</span></pre></td></tr></table></figure><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 下面两种均可</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.insert([&#123;name: &#39;小张&#39;&#125;, &#123;name: &#39;阿丘&#39;, age: 20&#125;])</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db.students.insertMany([&#123;name: &#39;小张&#39;&#125;, &#123;name: &#39;阿丘&#39;, age: 20&#125;])</span></pre></td></tr></table></figure><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><p>查询叫做名字叫“小明”的学生数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name: &#39;小明&#39;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name: &#39;小明&#39;&#125;).pretty() # 加上pretty()可以使查询结果更容易阅读</span></pre></td></tr></table></figure><p><strong>AND</strong></p><p>查询名字叫“小明”、年龄18的学生数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name: &#39;小明&#39;, age: 18&#125;).pretty()</span></pre></td></tr></table></figure><p><strong>OR</strong></p><p>查询名字叫“小明”、年龄18的数据或者名字叫“小张”的学生数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;$or: [&#123;name: &#39;小明&#39;, age: 18&#125;, &#123;name: &#39;小张&#39;&#125;]&#125;).pretty()</span></pre></td></tr></table></figure><p><strong>AND + OR</strong></p><p>查询名字叫“小明”或“小张”、年龄18的学生的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;age: 18, $or: [&#123;name: &#39;小明&#39;&#125;, &#123;name: &#39;小张&#39;&#125;]&#125;).pretty()</span></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>查询身高小于等于180的学生的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;height: &#123;$lte: 180&#125;&#125;).pretty()</span></pre></td></tr></table></figure><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">$gt</td><td align="center">&gt;</td></tr><tr><td align="center">$lt</td><td align="center">&lt;</td></tr><tr><td align="center">$gte</td><td align="center">&gt;=</td></tr><tr><td align="center">$lte</td><td align="center">&lt;=</td></tr></tbody></table><h3 id="正则表达式查询"><a href="#正则表达式查询" class="headerlink" title="正则表达式查询"></a>正则表达式查询</h3><p>查询名字以“小”开头的学生数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name: &#x2F;^小&#x2F;&#125;).pretty()</span></pre></td></tr></table></figure><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;name: &#39;小张&#39;&#125;).limit(1).pretty()</span></pre></td></tr></table></figure><h3 id="NULL查询"><a href="#NULL查询" class="headerlink" title="NULL查询"></a>NULL查询</h3><p>查询age为null的学生的数据(包含不存在age字段的数据)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;age: null&#125;)</span></pre></td></tr></table></figure><p>查询存在age字段且age为null的学生的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;age: &#123;$in: [null], $exists: true&#125;&#125;)</span></pre></td></tr></table></figure><h3 id="WHERE查询"><a href="#WHERE查询" class="headerlink" title="WHERE查询"></a>WHERE查询</h3><p>查询height = age * 10的学生的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 这两种均可</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;$where: &#39;obj.height &#x3D;&#x3D; obj.age * 10&#39;&#125;)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db.students.find(&#123;$where: &#39;this.height &#x3D;&#x3D; this.age * 10&#39;&#125;)</span></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.update(criteria, objNew, upsert, multi)</span></pre></td></tr></table></figure><ul><li><strong>criteria</strong> : update的查询条件，类似sql update查询内where后面的。</li><li><strong>objNew</strong> : update的对象和一些更新的操作符（如 inc…）等，也可以理解为sql update查询内set后面的</li><li><strong>upsert</strong> : 这个参数的意思是，如果不存在update的记录，是否插入objNew，true为插入，默认是false，不插入。</li><li><strong>multi</strong> : mongodb默认是false,只更新找到的第一条记录，如果这个参数为true，就把按条件查出来多条记录全部更新。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>将“小张”的年龄改为20</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.update(&#123;name: &#39;小张&#39;&#125;, &#123;$set: &#123;age: 20&#125;&#125;)</span></pre></td></tr></table></figure><p>如果直接写成<code>db.students.update({name: &#39;小张&#39;}, {age: 20})</code>，那整条数据就会都变成{age: 20}，而不是{name: ‘小张’, age: 20, …}</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.collection.deleteOne()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">db.collection.deleteMany()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&lt;query&gt;,             &#x2F;&#x2F;查询或过滤条件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">justOne: &lt;boolean&gt;, &#x2F;&#x2F;用于确定是单行还是删除所有行(true为缺省值即单行)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">writeConcern: &lt;document&gt;  &#x2F;&#x2F;设定写安全，用于确保强一致性还是弱一致性</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>删除名字为null的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.remove(&#123;name: null&#125;)</span></pre></td></tr></table></figure><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.count()</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.count(&#123;name: &#39;小张&#39;&#125;)</span></pre></td></tr></table></figure><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.&#123;collection&#125;.getIndexes()</span></pre></td></tr></table></figure><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>语法可以参考<a href="http://www.runoob.com/mongodb/mongodb-indexing.html" target="_blank" rel="noopener">MongoDB 索引</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># 创建一个按照height升序，name降序的索引</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">db.students.createIndex(&#123;height: 1, name: -1&#125;)</span></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">db.students.dropIndex(&#39;height_1_name_-1&#39;) # 索引名称可以通过getIndexes查看</span></pre></td></tr></table></figure><h1 id="Java中使用MongoDB"><a href="#Java中使用MongoDB" class="headerlink" title="Java中使用MongoDB"></a>Java中使用MongoDB</h1><p>引入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></pre></td></tr></table></figure><p>示例代码，包含CRUD操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.cayun.javalab;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.Block;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.MongoClient;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoCollection;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mongodb.client.MongoDatabase;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mongodb.client.model.Filters.*;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.bson.Document;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongodbMain</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">        MongoClient client = <span class="keyword">new</span> MongoClient(<span class="string">"localhost"</span>, <span class="number">27017</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">        MongoDatabase db = client.getDatabase(<span class="string">"cayun"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">        MongoCollection&lt;Document&gt; collection = db.getCollection(<span class="string">"students"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">        Document document = <span class="keyword">new</span> Document(<span class="string">"name"</span>, <span class="string">"chacha"</span>).append(<span class="string">"height"</span>, <span class="number">150</span>).append(<span class="string">"age"</span>, <span class="number">18</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        collection.insertOne(document); <span class="comment">// 插入</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">        Block&lt;Document&gt; printBlock = <span class="keyword">new</span> Block&lt;Document&gt;() &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Document document)</span> </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">                System.out.println(document.toJson());</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 查询并打印 name == "chacha" &amp;&amp; age &lt; 20 的数据</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">        collection.find(and(eq(<span class="string">"name"</span>, <span class="string">"chacha"</span>), lt(<span class="string">"age"</span>, <span class="number">20</span>))).forEach(printBlock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 将chacha的年龄更新为15岁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">        collection.updateOne(eq(<span class="string">"name"</span>, <span class="string">"chacha"</span>), <span class="keyword">new</span> Document(<span class="string">"$set"</span>, <span class="keyword">new</span> Document(<span class="string">"age"</span>, <span class="number">15</span>)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 打印chacha的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">        collection.find(eq(<span class="string">"name"</span>, <span class="string">"chacha"</span>)).forEach(printBlock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 删除chacha</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">        collection.deleteOne(eq(<span class="string">"name"</span>, <span class="string">"chacha"</span>));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 打印</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">        collection.find(eq(<span class="string">"name"</span>, <span class="string">"chacha"</span>)).forEach(printBlock);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>运行结果如下</p><p><img alt="image-20180921173757849" data-src="https://img.cayun.me/2018-09-21-093758.png" class="lazyload"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.cnblogs.com/egger/p/3135847.html" target="_blank" rel="noopener">MongoDB学习 (六)：查询</a><br>[2] <a href="https://wizardforcel.gitbooks.io/w3school-mongodb/content/8.html" target="_blank" rel="noopener">MongoDB使用update()函数更新数据</a><br>[3] <a href="http://www.runoob.com/mongodb/mongodb-indexing.html" target="_blank" rel="noopener">MongoDB 索引</a><br>[4] <a href="http://mongodb.github.io/mongo-java-driver/3.8/driver/getting-started/quick-start/" target="_blank" rel="noopener">MongoDB Driver Quick Start</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装MongoDB&quot;&gt;&lt;a href=&quot;#安装MongoDB&quot; class=&quot;headerlink&quot; title=&quot;安装MongoDB&quot;&gt;&lt;/a&gt;安装MongoDB&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install mongodb&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;创建/data/db目录，mongodb默认的数据库目录&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mkdir -p /data/db&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo chown -R &amp;#123;用户名&amp;#125; /data/db&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;启动mongodb&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mongod&lt;/code&gt; 或 &lt;code&gt;brew services start mongodb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询mongodb&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 另起窗口　&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://www.cayun.me/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://www.cayun.me/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>wireshark分析一次HTTPS请求</title>
    <link href="https://www.cayun.me/%E7%BD%91%E7%BB%9C/wireshark%E5%88%86%E6%9E%90%E4%B8%80%E6%AC%A1HTTPS%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.cayun.me/%E7%BD%91%E7%BB%9C/wireshark%E5%88%86%E6%9E%90%E4%B8%80%E6%AC%A1HTTPS%E8%AF%B7%E6%B1%82/</id>
    <published>2018-09-19T10:25:00.000Z</published>
    <updated>2019-12-13T11:26:51.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTPS协议概览"><a href="#HTTPS协议概览" class="headerlink" title="HTTPS协议概览"></a>HTTPS协议概览</h1><p>HTTPS本质上就是在HTTP和TCP协议中间又插入了一层SSL/TLS协议(现在普遍已经是TLSv1.1, TLSv1.2)，图示如下</p><blockquote><p>图片来自<a href="https://www.jianshu.com/p/7158568e4867" target="_blank" rel="noopener">https://www.jianshu.com/p/7158568e4867</a></p></blockquote><p><img alt="image-20180919193742999" data-src="https://img.cayun.me/2018-09-19-113745.png" class="lazyload"></p><a id="more"></a><p>SSL/TLS握手过程如下</p><blockquote><p>图片来自<a href="https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm" target="_blank" rel="noopener">An overview of the SSL or TLS handshake</a></p></blockquote><p><img alt data-src="https://img.cayun.me/2018-09-21-033242.gif" class="lazyload"></p><h1 id="wireshark分析HTTPS请求"><a href="#wireshark分析HTTPS请求" class="headerlink" title="wireshark分析HTTPS请求"></a>wireshark分析HTTPS请求</h1><p>首先wireshark设置过滤条件为ip.addr == 61.135.169.125(这个地址可以通过<code>ping www.baidu.com</code>获得)</p><p>为了防止过多的请求造成干扰，就不通过浏览器直接访问百度了，直接使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">curl https://www.baidu.com</span></pre></td></tr></table></figure><p>最后的wireshark中的结果如下</p><p><img alt="image-20180919183420877" data-src="https://img.cayun.me/2018-09-19-105036.png" class="lazyload"></p><p>这里面主要包含有两种协议TCP和TLSv1.2的请求</p><p>先简单地看一下TCP的请求部分，这部分就只是简单地过一下</p><ul><li>前三行为TCP的三次握手</li><li>中间全部都是TCP的ACK数据，也就是用来确认收到数据包用的</li><li>最后的FIN是TCP的四次挥手</li><li>还有一些RST就暂时忽略了(我暂时也不清楚)</li></ul><p>我们重点还是分析TLS协议的请求</p><p>列一下步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">client                                        server</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">   |               Client Hello                  |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">   |--------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">   |               Server Hello                  |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">   |               Certificate                   | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">   |            Server Key Exchange              | </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">   |             Server Hello Done               |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">   |             Client Key Exchange             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">   |--------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">   |             Change Cipher Spec              |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">   |--------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">   |          Encryted Handshake Message         |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">   |--------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">   |             Change Cipher Spec              |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">   |          Encryted Handshake Message         |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">   |              Application Data               |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">   |&lt;-------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">   |                    ... ...                  |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">   |               Encrypted Alert               |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">   |--------------------------------------------&gt;|</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">   |                                             |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">   |               Encrypted Alert               |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">   |&lt;--------------------------------------------|</span></pre></td></tr></table></figure><h2 id="Client-Hello"><a href="#Client-Hello" class="headerlink" title="Client Hello"></a>Client Hello</h2><p>TLS协议的握手过程的第一步是client向server发送Client Hello消息</p><p><img alt="image-20180921182614107" data-src="https://img.cayun.me/2018-09-21-102615.png" class="lazyload"></p><p>这一步中包含一个随机数Random1，支持的加密套件以及TLS版本信息等</p><h2 id="Server-Hello"><a href="#Server-Hello" class="headerlink" title="Server Hello"></a>Server Hello</h2><p>第二步为server向client发送Server Hello消息</p><p><img alt="image-20180921182638681" data-src="https://img.cayun.me/2018-09-21-102641.png" class="lazyload"></p><p>这一步中也生成了一个随机数Random2，同时确定了选择的加密套件</p><h2 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h2><p>server将自己的证书发送给client</p><p><img alt="image-20180921182711069" data-src="https://img.cayun.me/2018-09-21-102713.png" class="lazyload"></p><h2 id="Server-Key-Exchange"><a href="#Server-Key-Exchange" class="headerlink" title="Server Key Exchange"></a>Server Key Exchange</h2><p>如果是DH算法，这里发送服务器使用的DH参数。RSA算法不需要这一步。</p><p><img alt="image-20180921181131578" data-src="https://img.cayun.me/2018-09-21-101133.png" class="lazyload"></p><h2 id="Server-Hello-Done"><a href="#Server-Hello-Done" class="headerlink" title="Server Hello Done"></a>Server Hello Done</h2><p>Server Hello结束</p><h2 id="Certificate-Verify-这一步由客户端完成，不在网络通信过程中"><a href="#Certificate-Verify-这一步由客户端完成，不在网络通信过程中" class="headerlink" title="Certificate Verify(这一步由客户端完成，不在网络通信过程中)"></a>Certificate Verify(这一步由客户端完成，不在网络通信过程中)</h2><blockquote><p>摘自<a href="https://www.jianshu.com/p/7158568e4867" target="_blank" rel="noopener">https://www.jianshu.com/p/7158568e4867</a></p></blockquote><p>客户端收到服务端传来的证书后，先从 CA 验证该证书的合法性，验证通过后取出证书中的服务端公钥，再生成一个随机数 <strong>Random3</strong>，再用服务端公钥非对称加密 <strong>Random3</strong>生成 <strong>PreMaster Key</strong>。</p><h2 id="Client-Key-Exchange"><a href="#Client-Key-Exchange" class="headerlink" title="Client Key Exchange"></a>Client Key Exchange</h2><blockquote><p>摘自<a href="https://www.jianshu.com/p/7158568e4867" target="_blank" rel="noopener">https://www.jianshu.com/p/7158568e4867</a></p></blockquote><p>上面客户端根据服务器传来的公钥生成了 <strong>PreMaster Key</strong>，Client Key Exchange 就是将这个 key 传给服务端，服务端再用自己的私钥解出这个 <strong>PreMaster Key</strong> 得到客户端生成的 <strong>Random3</strong>。至此，客户端和服务端都拥有 <strong>Random1</strong> + <strong>Random2</strong> + <strong>Random3</strong>，两边再根据同样的算法就可以生成一份秘钥，握手结束后的应用层数据都是使用这个秘钥进行对称加密。这一步中，客户端将<strong>PreMaster Key</strong>传给服务端。</p><p><img alt="image-20180921181159638" data-src="https://img.cayun.me/2018-09-21-101203.png" class="lazyload"></p><h2 id="Change-Cipher-Spec"><a href="#Change-Cipher-Spec" class="headerlink" title="Change Cipher Spec"></a>Change Cipher Spec</h2><p>通知对方后面发送的消息将会使用前面协商出来的秘钥加密了</p><h2 id="Encryted-Handshake-Message"><a href="#Encryted-Handshake-Message" class="headerlink" title="Encryted Handshake Message"></a>Encryted Handshake Message</h2><p>表明客户端(服务端)握手完成</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.jianshu.com/p/7158568e4867" target="_blank" rel="noopener">SSL/TLS 握手过程详解</a><br>[2] <a href="https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm" target="_blank" rel="noopener">An overview of the SSL or TLS handshake</a><br>[3] <a href="https://blog.csdn.net/mrpre/article/details/77867831" target="_blank" rel="noopener">TLS/SSL 协议详解(12) server key exchange</a><br>[4] <a href="https://blog.csdn.net/mrpre/article/details/77868396" target="_blank" rel="noopener">TLS/SSL 协议详解 (16) client key exchange</a><br>[5] <a href="https://blog.csdn.net/fw0124/article/details/40983787" target="_blank" rel="noopener">使用wireshark观察SSL/TLS握手过程–双向认证/单向认证</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;HTTPS协议概览&quot;&gt;&lt;a href=&quot;#HTTPS协议概览&quot; class=&quot;headerlink&quot; title=&quot;HTTPS协议概览&quot;&gt;&lt;/a&gt;HTTPS协议概览&lt;/h1&gt;&lt;p&gt;HTTPS本质上就是在HTTP和TCP协议中间又插入了一层SSL/TLS协议(现在普遍已经是TLSv1.1, TLSv1.2)，图示如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来自&lt;a href=&quot;https://www.jianshu.com/p/7158568e4867&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/7158568e4867&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img.cayun.me/2018-09-19-113745.png&quot; alt=&quot;image-20180919193742999&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="https://www.cayun.me/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="https" scheme="https://www.cayun.me/tags/https/"/>
    
      <category term="tls" scheme="https://www.cayun.me/tags/tls/"/>
    
      <category term="wireshark" scheme="https://www.cayun.me/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump的简单使用</title>
    <link href="https://www.cayun.me/linux/tcpdump/"/>
    <id>https://www.cayun.me/linux/tcpdump/</id>
    <published>2018-09-18T02:04:00.000Z</published>
    <updated>2019-12-13T11:26:51.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP-IP网络模型"><a href="#TCP-IP网络模型" class="headerlink" title="TCP/IP网络模型"></a>TCP/IP网络模型</h1><table><thead><tr><th>名称</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>HTTP, FTP, TELNET</td></tr><tr><td>传输层</td><td>TCP, UDP</td></tr><tr><td>网络互连层</td><td>IP, ARP, ICMP</td></tr><tr><td>网络接口层</td><td>WIFI, 以太网</td></tr></tbody></table><p><strong>运行在TCP协议上的协议</strong></p><ul><li>HTTP</li><li>HTTPS</li><li>FTP</li><li>POP3</li><li>SMTP</li><li>TELNET</li><li>SSH</li></ul><p><strong>运行在UDP协议上的协议</strong></p><ul><li>DHCP</li><li>NTP</li><li>BOOTP</li></ul><p><strong>其他</strong></p><ul><li>DNS (运行在TCP和UDP协议上)</li><li>ECHO (运行在TCP和UDP协议上)</li></ul><a id="more"></a><h1 id="TCP三次握手、四次挥手"><a href="#TCP三次握手、四次挥手" class="headerlink" title="TCP三次握手、四次挥手"></a>TCP三次握手、四次挥手</h1><h2 id="TCP的头部信息"><a href="#TCP的头部信息" class="headerlink" title="TCP的头部信息"></a>TCP的头部信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">0                            15   16                           31</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">|          source port          |       destination port        |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">|                        sequence number                        |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">|                     acknowledgment number                     |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">|         TCP checksum          |       urgent pointer          |</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"># 图来自 man tcpdump</span></pre></td></tr></table></figure><h3 id="TCP标志位"><a href="#TCP标志位" class="headerlink" title="TCP标志位"></a>TCP标志位</h3><table><thead><tr><th>TCP标志</th><th>tcpdump标志</th><th>含义</th></tr></thead><tbody><tr><td>SYN</td><td>S</td><td>用来请求建立回话</td></tr><tr><td>ACK</td><td>.</td><td>确认收到数据。可能和其他标志一起出现</td></tr><tr><td>FIN</td><td>F</td><td>关闭连接</td></tr><tr><td>RESET</td><td>R</td><td>立即断开连接</td></tr><tr><td>PUSH</td><td>P</td><td>传送数据</td></tr><tr><td>URGENT</td><td>U</td><td>紧急数据，优先于其他数据</td></tr></tbody></table><h2 id="三次握手、四次挥手"><a href="#三次握手、四次挥手" class="headerlink" title="三次握手、四次挥手"></a>三次握手、四次挥手</h2><blockquote><p>图片摘自<a href="http://www.cnblogs.com/Jessy/p/3535612.html" target="_blank" rel="noopener">http://www.cnblogs.com/Jessy/p/3535612.html</a></p></blockquote><p><img alt="image-20180918171043205" data-src="https://img.cayun.me/2018-09-20-091741.png" class="lazyload"></p><h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><h2 id="1-过滤主机"><a href="#1-过滤主机" class="headerlink" title="1. 过滤主机"></a>1. 过滤主机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump host www.baidu.com  <span class="comment"># 此处也可以使用IP</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tcpdump src host www.baidu.com</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">tcpdump dst host www.baidu.com</span></pre></td></tr></table></figure><h2 id="2-过滤端口"><a href="#2-过滤端口" class="headerlink" title="2. 过滤端口"></a>2. 过滤端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump [src|dst] port 80</span></pre></td></tr></table></figure><h2 id="3-过滤协议"><a href="#3-过滤协议" class="headerlink" title="3. 过滤协议"></a>3. 过滤协议</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump [arp|ip|tcp|udp|...]</span></pre></td></tr></table></figure><h2 id="4-过滤网络"><a href="#4-过滤网络" class="headerlink" title="4. 过滤网络"></a>4. 过滤网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump [src|dst] net 192.168</span></pre></td></tr></table></figure><h2 id="5-表达式"><a href="#5-表达式" class="headerlink" title="5. 表达式"></a>5. 表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">非: !   not</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">且: &amp;&amp;  and</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">或: ||  or</span></pre></td></tr></table></figure><p>举个例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump <span class="string">'(host www.baidu.com || port 80)'</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">tcpdump <span class="string">'(host www.baidu.com &amp;&amp; ! port 80)'</span></span></pre></td></tr></table></figure><h2 id="6-参数选项"><a href="#6-参数选项" class="headerlink" title="6. 参数选项"></a>6. 参数选项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">-x        打印出数据包的内容</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">-xx       更加详细的打印出数据包的内容</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">-X        用ASCII码的形式打印出数据包的内容</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">-XX       同上，不过打印出来的信息内容更加详尽</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">-c        数量</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">-i        指定网络接口，例如 tcpdump -i pktap,lo0,en0</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">-v        可以打印更详细的信息，例如协议、校验和等</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">-e 　　　  在输出行打印出数据链路层的头部信息；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">-f 　　　  将外部的Internet地址以数字的形式打印出来</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">-n 　　　  不把网络地址转换成名字</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">-w 　　　  直接将包写入文件中，并不分析和打印出来</span></pre></td></tr></table></figure><blockquote><p>此处只列出一些常用的选项</p></blockquote><h1 id="tcpdump分析一次TCP请求"><a href="#tcpdump分析一次TCP请求" class="headerlink" title="tcpdump分析一次TCP请求"></a>tcpdump分析一次TCP请求</h1><p>首先，准备好一个比较典型的API，我是直接使用的公司测试环境的某个API(使用百度总是会出现一些RESET标志位的流量)，大概格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx.yyy.com&#x2F;app-customer&#x2F;messageBox&#x2F;getMessageBoxSummary?token&#x3D;rcqXFsiPQgYoAEbMjTsh</span></pre></td></tr></table></figure><p>tcpdump命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">tcpdump host xxx.yyy.com</span></pre></td></tr></table></figure><p>结果如下</p><p><img alt="image-20180918170320334" data-src="https://img.cayun.me/2018-09-20-091749.png" class="lazyload"></p><p>其中172.16.2.127.64990是我的机子，172.16.254.5.http是服务器</p><p><strong>连接建立，三次握手</strong></p><p><img alt="image-20180918171543457" data-src="https://img.cayun.me/2018-09-20-091757.png" class="lazyload"></p><p>最前面的三条是TCP的三次握手的过程</p><ol><li>client-&gt;server  发送SYN</li><li>server-&gt;client 发送SYN+ACK，这一步的ack值刚好是第一步的seq+1</li><li>client-&gt;server 发送ACK，这一步的ack为1(此处tcpdump内部处理了一下，显示成了一个相对值。可以同时使用wireshark验证就知道了)</li></ol><p><strong>客户端发送GET请求</strong></p><p><img alt="image-20180918172146951" data-src="https://img.cayun.me/2018-09-20-091803.png" class="lazyload"></p><p>这一步中client向server发送GET /app-customer/messageBox/… 请求</p><ol><li>client-&gt;server 发送GET请求</li><li>server-&gt;client 确认收到TCP请求，此处的ack值刚好等于第一步的seq 1:164的164</li></ol><p><strong>服务端响应请求</strong></p><p><img alt="image-20180918172636167" data-src="https://img.cayun.me/2018-09-20-091810.png" class="lazyload"></p><p>这一步为server响应client请求</p><ol><li><p>server-&gt;client 发送响应结果，长度为1356</p></li><li><p>server-&gt;client 发送响应结果，长度为134</p></li><li><p>server-&gt;client 发送响应结果，长度为5</p></li><li><p>client-&gt;server 确认收到数据，ack1491，对应第2步</p></li><li><p>client-&gt;server 确认收到数据，ack1496，对应第3步</p></li></ol><p><strong>关闭连接，四次挥手</strong></p><p><img alt="image-20180918173658749" data-src="https://img.cayun.me/2018-09-20-091817.png" class="lazyload"></p><p>最后一步是关闭连接</p><ol><li>client-&gt;server 发送FIN，同时ack1496表示确认收到了上一步的数据。对应四次挥手的第一步FIN M</li><li>server-&gt;client 发送FIN，同时ack165表示确认第一步的数据。对应四次挥手的第二步和第三步ACK M+1和FIN N </li><li>client-&gt;server 发送ACK，确认收到第2步的数据。对应四次挥手的最后一步ACK N+1</li><li>这一步以及下一个请求应该属于其他流量的干扰，原因：这次请求的端口和之前的不同，并且多次测试未复现</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://linuxwiki.github.io/NetTools/tcpdump.html" target="_blank" rel="noopener">tcpdump使用技巧</a><br>[2] <a href="https://fwknowledge.wordpress.com/2013/03/05/tcpdump-flags/" target="_blank" rel="noopener">tcpdump flags</a><br>[3] <a href="https://amits-notes.readthedocs.io/en/latest/networking/tcpdump.html" target="_blank" rel="noopener">tcpdump</a><br>[4] <a href="http://www.cnblogs.com/Jessy/p/3535612.html" target="_blank" rel="noopener">TCP的三次握手(建立连接）和四次挥手(关闭连接）</a><br>[5] <a href="https://blog.csdn.net/zg_hover/article/details/5711852" target="_blank" rel="noopener">tcpdump 用法详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP-IP网络模型&quot;&gt;&lt;a href=&quot;#TCP-IP网络模型&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP网络模型&quot;&gt;&lt;/a&gt;TCP/IP网络模型&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td&gt;HTTP, FTP, TELNET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;传输层&lt;/td&gt;
&lt;td&gt;TCP, UDP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络互连层&lt;/td&gt;
&lt;td&gt;IP, ARP, ICMP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络接口层&lt;/td&gt;
&lt;td&gt;WIFI, 以太网&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;运行在TCP协议上的协议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;FTP&lt;/li&gt;
&lt;li&gt;POP3&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;li&gt;TELNET&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;运行在UDP协议上的协议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DHCP&lt;/li&gt;
&lt;li&gt;NTP&lt;/li&gt;
&lt;li&gt;BOOTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS (运行在TCP和UDP协议上)&lt;/li&gt;
&lt;li&gt;ECHO (运行在TCP和UDP协议上)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://www.cayun.me/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.cayun.me/tags/linux/"/>
    
      <category term="tcpdump" scheme="https://www.cayun.me/tags/tcpdump/"/>
    
  </entry>
  
</feed>
